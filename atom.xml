<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tianchi&#39;s Blog</title>
  <subtitle>阅读 思考 实践</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://itanch.github.io/"/>
  <updated>2017-04-06T12:02:19.000Z</updated>
  <id>http://itanch.github.io/</id>
  
  <author>
    <name>Tian chi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 知识点</title>
    <link href="http://itanch.github.io/2017/03/26/Java%E6%8D%A1%E6%BC%8F/"/>
    <id>http://itanch.github.io/2017/03/26/Java捡漏/</id>
    <published>2017-03-26T09:01:59.000Z</published>
    <updated>2017-04-06T12:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在本科时没有好好听老师讲课，现在只能重新再学学Java，😭。</p>
</blockquote>
<h2 id="我的java环境"><a href="#我的java环境" class="headerlink" title="我的java环境"></a>我的java环境</h2><blockquote>
<p>java version “1.8.0_121”<br>Java(TM) SE Runtime Environment (build 1.8.0_121-b13)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</p>
</blockquote>
<h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><strong>bootstrap classloader</strong>: 加载java的核心库的类。<br><strong>ExtClassLoader</strong>: 加载扩展的java库中的类。<br><strong>AppClassLoader</strong>: 加载应用中的类。</p>
<a id="more"></a>
<h2 id="i"><a href="#i" class="headerlink" title="i++"></a>i++</h2><h3 id="1-前-和后"><a href="#1-前-和后" class="headerlink" title="1. 前++和后++"></a>1. 前++和后++</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">//局部变量，不影响下面的x</span></div><div class="line">		<span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//jvm会初始化全局变量x，y为0。局部变量则无初始值。</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> x, y;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//x变为-1</span></div><div class="line">		x--;</div><div class="line">		</div><div class="line">		myMethod();</div><div class="line">		</div><div class="line">		<span class="comment">//1. 此时x=1,y=0</span></div><div class="line">		<span class="comment">//2. y++的++先不执行，而是y先参与运算，结果为2</span></div><div class="line">		System.out.println(x + y++ + x); <span class="comment">//2</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//1. x++的++先不运算，还是原始的x作为参数，所以此刻相当于x + ++x</span></div><div class="line">		<span class="comment">//2. ++x的++会执行，所以x此时变为0</span></div><div class="line">		<span class="comment">//3. 此时x为0，y = 0+0=0</span></div><div class="line">		<span class="comment">//4. x++在运算结束后开始执行，所以x为1</span></div><div class="line">		y = x++ + ++x;</div><div class="line">		</div><div class="line">		System.out.println(x+<span class="string">" "</span>+y); <span class="comment">// x=1,y=0</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="2-的缓存机制"><a href="#2-的缓存机制" class="headerlink" title="2. ++的缓存机制"></a>2. ++的缓存机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">			<span class="comment">//执行顺序拆解为如下</span></div><div class="line">			<span class="comment">//temp=j</span></div><div class="line">			<span class="comment">//j++</span></div><div class="line">			<span class="comment">//j=temp</span></div><div class="line">			j = j++;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println(j); <span class="comment">//0</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="3-各种"><a href="#3-各种" class="headerlink" title="3. 各种++"></a>3. 各种++</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">		<span class="comment">//1. 先执行i + ++i，++i为1，所以temp = 1 +1 =2</span></div><div class="line">		<span class="comment">//2. i++执行，变为2，但是没什么作用  </span></div><div class="line">		<span class="comment">//3. i=temp，结果是2</span></div><div class="line">		i = i++ + ++i;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		<span class="comment">//1. ++j 使得j为1，1号j++的++先不执行，所以temp= j + j= 1+1</span></div><div class="line">		<span class="comment">//2. 加法函数执行完了，所以1号j++执行，j=2</span></div><div class="line">		<span class="comment">//3. temp = temp + j++，2号j++同样先不执行，所以temp= 1+1+2</span></div><div class="line">		<span class="comment">//4. 2号j++执行，j=3</span></div><div class="line">		<span class="comment">//5. temp =temp +j++，3号j++同理，temp=1+1+2+3</span></div><div class="line">		<span class="comment">//6. 3号j++执行，得到j=4</span></div><div class="line">		<span class="comment">//7. j=temp，j最后变为7</span></div><div class="line">		j = ++j + j++ + j++ + j++;</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">		<span class="comment">//1. 1号k++先不执行，k为0，temp=0。</span></div><div class="line">		<span class="comment">//2. 1号k++执行，k=1</span></div><div class="line">		<span class="comment">//3. 到2号k++，该++不执行，所以temp=0+1</span></div><div class="line">		<span class="comment">//4. 2号k++执行，k=2</span></div><div class="line">		<span class="comment">//5. 到3号k++，temp=0+1+2</span></div><div class="line">		<span class="comment">//6. 3号k++执行，k=3，</span></div><div class="line">		<span class="comment">//7. ++k后，k=4</span></div><div class="line">		<span class="comment">//8. temp=0+1+2+4</span></div><div class="line">		<span class="comment">//9. k=temp=7</span></div><div class="line">		k = k++ + k++ + k++ + ++k;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//1. 第一个++h执行后，temp=1</span></div><div class="line">		<span class="comment">//2. 2号++h执行后temp=1+2=3</span></div><div class="line">		<span class="comment">//3. h=temp=3</span></div><div class="line">		h = ++h + ++h;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> q1 = <span class="number">0</span>, q2 = <span class="number">0</span>;</div><div class="line">		<span class="comment">//++p1后p1=1，q1=p1=1</span></div><div class="line">		q1 = ++p1;</div><div class="line">		<span class="comment">//temp=p2=0，p2++后p2=1</span></div><div class="line">		<span class="comment">//q2=temp=0</span></div><div class="line">		q2 = p2++;</div><div class="line">		System.out.println(<span class="string">" i "</span> + i); <span class="comment">//2</span></div><div class="line">		System.out.println(<span class="string">" j "</span> + j); <span class="comment">//7</span></div><div class="line">		System.out.println(<span class="string">" k "</span> + k); <span class="comment">//7</span></div><div class="line">		System.out.println(<span class="string">" h "</span> + h); <span class="comment">//3</span></div><div class="line">		System.out.println(<span class="string">" p1 "</span> + p1); <span class="comment">//1</span></div><div class="line">		System.out.println(<span class="string">" p2 "</span> + p2); <span class="comment">//1</span></div><div class="line">		System.out.println(<span class="string">" q1 "</span> + q1); <span class="comment">//1</span></div><div class="line">		System.out.println(<span class="string">" q2 "</span> + q2); <span class="comment">//0</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="1-基本数据类型的转换"><a href="#1-基本数据类型的转换" class="headerlink" title="1. 基本数据类型的转换"></a>1. 基本数据类型的转换</h3><p>低级到高级：分别为（byte，short，char）&lt; int &lt; long &lt; float &lt; double。</p>
<p>下面的程序是合法的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span> a = <span class="number">1</span>;</div><div class="line">		<span class="keyword">char</span> c = <span class="string">'c'</span>;</div><div class="line"></div><div class="line">		<span class="keyword">short</span> s = a;</div><div class="line">		<span class="comment">// 不合法 s=c, c=s;</span></div><div class="line">		<span class="keyword">int</span> i = s;</div><div class="line">		i = c;</div><div class="line">		<span class="keyword">long</span> l = i;</div><div class="line">		l = c;</div><div class="line">		<span class="keyword">float</span> f = l;</div><div class="line">		f = c;</div><div class="line">		<span class="keyword">double</span> d = f;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面程序中，有一个错误：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">short</span> s=<span class="number">1</span>;</div><div class="line">s+=<span class="number">1</span>;</div><div class="line">s=s+<span class="number">1</span>; <span class="comment">//不合法，s+1为int型</span></div><div class="line"></div></pre></td></tr></table></figure></p>
<h2 id="位移操作"><a href="#位移操作" class="headerlink" title="位移操作"></a>位移操作</h2><p>int为32位，所以位移操作会先模运算32。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">32</span>;</div><div class="line"><span class="keyword">long</span> l = <span class="number">32</span>;</div><div class="line">System.out.println(i &gt;&gt; <span class="number">32</span>); <span class="comment">//32</span></div><div class="line">System.out.println(l &gt;&gt; <span class="number">32</span>); <span class="comment">//0</span></div></pre></td></tr></table></figure>
<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><blockquote>
<p>反射主要是指程序可以访问、检测和修改它本身的状态或行为的一种能力。  </p>
</blockquote>
<p>在java中具体体现为一个类可以反射出一个class对象，通过class对象可以访问该类内部的成员变量和成员函数的详细信息。</p>
<h2 id="Object类中的方法"><a href="#Object类中的方法" class="headerlink" title="Object类中的方法"></a>Object类中的方法</h2><table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>protected Object</td>
<td>clone()</td>
<td>Creates and returns a copy of this object.</td>
</tr>
<tr>
<td>boolean</td>
<td>equals(Object obj)</td>
<td>Indicates whether some other object is “equal to” this one.</td>
</tr>
<tr>
<td>protected void</td>
<td>finalize()</td>
<td>Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</td>
</tr>
<tr>
<td>Class&lt;?&gt;</td>
<td>getClass()</td>
<td>Returns the runtime class of this Object.</td>
</tr>
<tr>
<td>int</td>
<td>hashCode()</td>
<td>Returns a hash code value for the object.</td>
</tr>
<tr>
<td>void</td>
<td>notify()</td>
<td>Wakes up a single thread that is waiting on this object’s monitor.</td>
</tr>
<tr>
<td>void</td>
<td>notifyAll()</td>
<td>Wakes up all threads that are waiting on this object’s monitor.</td>
</tr>
<tr>
<td>String</td>
<td>toString()</td>
<td>Returns a string representation of the object.</td>
</tr>
<tr>
<td>void</td>
<td>wait()</td>
<td>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.</td>
</tr>
<tr>
<td>void</td>
<td>wait(long timeout)</td>
<td>Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed.</td>
</tr>
<tr>
<td>void</td>
<td>wait(long timeout, int nanos)</td>
<td>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在本科时没有好好听老师讲课，现在只能重新再学学Java，😭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我的java环境&quot;&gt;&lt;a href=&quot;#我的java环境&quot; class=&quot;headerlink&quot; title=&quot;我的java环境&quot;&gt;&lt;/a&gt;我的java环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;java version “1.8.0_121”&lt;br&gt;Java(TM) SE Runtime Environment (build 1.8.0_121-b13)&lt;br&gt;Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ClassLoader&quot;&gt;&lt;a href=&quot;#ClassLoader&quot; class=&quot;headerlink&quot; title=&quot;ClassLoader&quot;&gt;&lt;/a&gt;ClassLoader&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;bootstrap classloader&lt;/strong&gt;: 加载java的核心库的类。&lt;br&gt;&lt;strong&gt;ExtClassLoader&lt;/strong&gt;: 加载扩展的java库中的类。&lt;br&gt;&lt;strong&gt;AppClassLoader&lt;/strong&gt;: 加载应用中的类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://itanch.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>23个设计模式</title>
    <link href="http://itanch.github.io/2017/02/15/32%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://itanch.github.io/2017/02/15/32个设计模式/</id>
    <published>2017-02-15T06:10:00.000Z</published>
    <updated>2017-04-06T12:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇文章是对<em>Design Patterns: Elements of Reusable Object-Oriented Software</em>的总结。</p>
</blockquote>
<p>看完<em>Design Patterns: Elements of Reusable Object-Oriented Software</em>已经有些时日了，现在提笔将其概括总结一下，以备将来的参考。此书总结了23中不同的设计模式，并且将它们的设计目的、结构、用法等方面进行的很好的介绍，是一本值得放在手边随时查阅的工具书。<br><a id="more"></a></p>
<h2 id="Creational-Patterns"><a href="#Creational-Patterns" class="headerlink" title="Creational Patterns"></a>Creational Patterns</h2><hr>
<h3 id="1-Abstract-Factory"><a href="#1-Abstract-Factory" class="headerlink" title="1. Abstract Factory"></a>1. Abstract Factory</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>为创建一组相关对象，Abstract Factory提供统一的接口，并且不需要指定它们具体是什么类型的。Abstract Factory是和Concrete Factory（简称Factory）相对的一个模式，Factory的功能是创建相关的一组对象，它是具体的。而Abstract Factory则是仅仅提供接口，具体如何创建、创建什么类型的对象由子类Factory来具体实现。也叫Kit。</p>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_af.png" alt="image"></p>
<p><strong>AbstractFactory</strong>: 声明了创建具体产品对象的接口。<br><strong>ConcreteFactory</strong>: 实现了创建具体产品对象的函数。<br><strong>AbstractProduct</strong>: 声明了某一种产品对象的接口。<br><strong>ConcreteProduct</strong>: 定义了具体被创建的一个产品对象。实现了AbstractProduct的接口。<br><strong>Client</strong>: 仅仅调用AbstractFactory创建产品，并且使用AbstractProduct的接口。用户无需关心具体使用了哪一个Factory和Product。</p>
<h4 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一个系统需要和它的产品的创建、组成、表示相互独立时。</li>
<li>一个系统需要配置多种产品家族中的一个时。如结构图中所示，有1和2两个产品家族，client只需要配置其中的一个即可，如果配置了1，则client使用的所有product都是1类型的，有ProductA1、ProductB1等。</li>
<li>一族相关联的产品需要一起被使用，不可混用，你可以通过Abstract Factory来加强这种限制。client如果选择使用了1，则应该保证所有的产品都是1家族的产品。比如，一个应用的UI支持windows和mac两种风格，用户选择了windows风格的UI，则应该保证所有的按钮、菜单和边栏等都是windows风格。</li>
<li>你想提供一个product的库，同时你只想暴露它们的接口，而不是如何实现的。</li>
</ol>
<hr>
<h3 id="2-Builder"><a href="#2-Builder" class="headerlink" title="2. Builder"></a>2. Builder</h3><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><p>将一个复杂对象的构建和表示相分离，从而可以使得相同的构建过程创造出不同的表示。</p>
<h4 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_bd.png" alt="image"></p>
<p><strong>Builder</strong>: 声明了一个创建一个产品对象一部分的抽象接口。<br><strong>ConcreteBuilder</strong>: 实现Builder定义的接口，可以创建和组装产品的一部分。定义并且保存了它所创建产品的当前表示。同时，它还提供了一个可以获得所创建产品的接口。<br><strong>Director</strong>: 使用Builder的提供的接口创建产品对象。<br><strong>Product</strong>:表示正在被创建的一个复杂对象。ConcreteBuilder建造了它的内部表示，决定了它组装的过程。它包含了定义它组成部分的类，同时提供了接口让具体Builder来组装这些组成部分。 </p>
<h4 id="何时使用-1"><a href="#何时使用-1" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>创建一个复杂对象的算法需要独立于对象的组成部分的定义和组装方式。如Director中实现了一个创建产品对象的算法，而对象内部如何组装的则由Builder决定。</li>
<li>一个创建过程可以产生不同的对象表示。比如，Director可以采用不同的ConcreteBuilder来创建产品对象，在Director中创建的过程是相同的，但是由于Builder的不同，导致最后产品的内部结构可能差异很大。 </li>
</ol>
<hr>
<h3 id="3-Factory-Method"><a href="#3-Factory-Method" class="headerlink" title="3. Factory Method"></a>3. Factory Method</h3><h4 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h4><p>定义一个创建对象的接口，由子类去决定创建哪一个具体的对象。Factory Method可以将实例化对象的过程委派给子类。注意，这里Factory Method强调的是方法，并且该方法极有可能会被子类覆盖。在Abstract Factory中就使用了Factory Method来创建产品。</p>
<h4 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_fm.png" alt="image">  </p>
<p><strong>Product</strong>: 定义了Factory method创建的对象的接口。<br><strong>ConcreteProduct</strong>: 实现了Product的接口。<br><strong>Creator</strong>:定义了Factory Method,factory method会创建某一个类型的产品。它有可能定义一个默认的factory method方法来创建一个具体的产品。<br><strong>ConcreteCreator</strong>: 重写factory method来实例化一个ConcreteProduct。  </p>
<h4 id="何时使用-2"><a href="#何时使用-2" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一个类不能预料它必须创建的对象属于哪一类。</li>
<li>一个类希望它的子类来决定需要创建的对象。</li>
<li>一个类将责任委派给它的一个子类，你希望将哪一个类被委派的知识本地化。</li>
</ol>
<hr>
<h3 id="4-Prototype"><a href="#4-Prototype" class="headerlink" title="4. Prototype"></a>4. Prototype</h3><h4 id="目的-3"><a href="#目的-3" class="headerlink" title="目的"></a>目的</h4><p>通过一个原型实例来创建一类的对象，创建一个新对象的过程就是拷贝原型实例。这样做可以省去传入参数来创建对象的麻烦，保证每次创建的对象都具有相同的属性。即使需要相同类的不同属性的对象，也可以先进行拷贝，然后通过稍加修改，就可以得到我们想要的对象。</p>
<p>在Nodejs中有prototype的使用。</p>
<h4 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_ptt.png" alt="image"> </p>
<p><strong>Prototype</strong>: 定义了一个来拷贝自己的接口。<br><strong>ConretePrototype</strong>: 实现了克隆自己的操作。<br><strong>Client</strong>: 让Prototype克隆自己来创建一个新对象。   </p>
<h4 id="何时使用-3"><a href="#何时使用-3" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>系统需要独立于它的产品如何创建、组成和表示的时候。</li>
<li>当需要实例化的类在运行才决定时。</li>
<li>想要避免创建一个平行于产品类层次结构的factory层次结构。因为创建一个对象只需要通过原型拷贝，无需使用factory来创建。</li>
<li>当一个类的实例只有为数不多的几个状态组合中的一个时，可以先实例好几个不同状态的对象，每次只需要从这些原型对象中按需拷贝出来新对象即可。</li>
</ol>
<hr>
<h3 id="5-Singleton"><a href="#5-Singleton" class="headerlink" title="5. Singleton"></a>5. Singleton</h3><h4 id="目的-4"><a href="#目的-4" class="headerlink" title="目的"></a>目的</h4><p>保证一个类只有一个实例，并且提供一个可以访问它的全局切入点。</p>
<p>在Android系统中的ActivityManagerService就是一个单例模式。</p>
<h4 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_sg.png" alt="image"></p>
<p><strong>Singleton</strong>: 定义一个实例化函数，可以让用户通过该函数获取该独一无二的实例。Instrance是一个类函数。有些时候，它还要负责创建它独一无二的实例。</p>
<h4 id="何时使用-4"><a href="#何时使用-4" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一个类只能有一个实例对象时，并且需要提供一个公共接口给用户访问该独一无二的实例。</li>
<li>这个孤立的实例对象可以通过继承来扩展，并且用户可以无需修改原来的代码来使用该扩展的实例。</li>
</ol>
<hr>
<h2 id="Structural-Patterns"><a href="#Structural-Patterns" class="headerlink" title="Structural Patterns"></a>Structural Patterns</h2><h3 id="6-Adapter"><a href="#6-Adapter" class="headerlink" title="6. Adapter"></a>6. Adapter</h3><h4 id="目的-5"><a href="#目的-5" class="headerlink" title="目的"></a>目的</h4><p>将一个类的接口转化为用户想要的接口形式。Adapter可以让原来接口不相匹配的类进行合作。也叫Wrapper。</p>
<h4 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h4><p>Adapter使用多继承来实现接口的适配。<br><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_adt_1.png" alt="image"></p>
<p>Adapter通过组合来实现结构的匹配。<br><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_adt_2.png" alt="image"></p>
<p><strong>Target</strong>: 定义了用户想要使用的接口。<br><strong>Client</strong>: 调用目标接口来使用某些对象。<br><strong>Adaptee</strong>: 实现了client想要的功能，但是接口并不是client想要的，所以要进行适配。<br><strong>Adapter</strong>: 将Adaptee的接口适配成目标接口。  </p>
<h4 id="何时使用-5"><a href="#何时使用-5" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>你想使用一个现有的类，但是它的接口和你需要的不太匹配。</li>
<li>你想定义一个类，它可以和不相关、不可预见的其它类进行配合使用，这个时候你定义的类没必要适配所有的情况，根据具体情况配置适当的adapter就可以了。</li>
<li>你需要使用很多现成的子类，但是通过继承类修改每一个子类的接口是比较繁琐的，这时候你可以仅仅利用adapter适配它们的父类即可。</li>
</ol>
<hr>
<h3 id="7-Bridge"><a href="#7-Bridge" class="headerlink" title="7. Bridge"></a>7. Bridge</h3><h4 id="目的-6"><a href="#目的-6" class="headerlink" title="目的"></a>目的</h4><p>将一个类的抽象行为和具体实现进行解耦，从而可以使得这两个部分独立变化。也叫做Handle/Body。Bridge和Adapter都有给用户提供适配的接口的作用，但是Adapter更强调让原来不相干的类进行合作，往往类已经设计好了。而Bridge在设计之初，希望让抽象行为和具体实现进行分离。</p>
<h4 id="结构-6"><a href="#结构-6" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_bdg.png" alt="image"></p>
<p><strong>Abstraction</strong>: 定义抽象接口。有一个指向Implementor对象的引用。<br><strong>RefmedAbstraction</strong>: 扩展Abstraction的接口。<br><strong>Implementor</strong>: 定义了实现类的接口。这些接口没必要和Abstraction的接口保持一致，甚至可以完全不同。通常情况下，Implementor的接口提供的是基本的功能，Abstraction利用这些基本函数来构成更高级的函数功能。<br><strong>ConcreteImplementor</strong>: 具体实现了Implementor的接口，定义了具体的实现。</p>
<h4 id="何时使用-6"><a href="#何时使用-6" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>你希望避免将抽象行为和具体实现进行永久的绑定在一起。例如，一个类提供的抽象行为没有变化，但是在运行时，这些行为的具体的实现却需要进行变动。</li>
<li>抽象行为和具体实现应该可以通过继承来进行扩展。Bridge可以让及将不同的抽象和实现进行组合，并且可以互不影响的进行扩展。</li>
<li>对具体实现的改变不会影响用户，因为抽象行为没有变化。</li>
<li>你希望对用户隐藏抽象行为的具体实现。</li>
<li>你想共享具体实现部分，并且这种共享对用户而言是透明的，因为用户只能看到抽象行为。</li>
</ol>
<hr>
<h3 id="8-Composite"><a href="#8-Composite" class="headerlink" title="8. Composite"></a>8. Composite</h3><h4 id="目的-7"><a href="#目的-7" class="headerlink" title="目的"></a>目的</h4><p>将对象组合成树的结构来表现部分-整体的层次结构。Composite使得用户可以将个体对象和组合对象统一进行处理。</p>
<p>Android系统中Activity中存放View组件的RootView就是一个典型的Composite。</p>
<h4 id="结构-7"><a href="#结构-7" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_cp.png" alt="image"></p>
<p><strong>Component</strong>: 为需要进行组合的对象定义了接口。适当的实现所有类共有的默认行为。定义访问、管理子组件的接口。也可以定义访问父节点的接口。<br><strong>Leaf</strong>: 表示叶子节点，叶子节点没有子节点。定义了组合中基本对象的函数。<br><strong>Composite</strong>: 定义有子节点的组件的行为。存储子节点。实现Component中定义的有关子节点操作的函数。<br><strong>Client</strong>: 通过Component提供的接口操作组合结构。</p>
<h4 id="何时使用-7"><a href="#何时使用-7" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>你想表现一个部分-整体的层次结构时。  </li>
<li>你希望让用户无法感知组合对象和孤立对象的区别，用户可以统一地处理composite结构中所有的对象。   </li>
</ol>
<hr>
<h3 id="9-Decorator"><a href="#9-Decorator" class="headerlink" title="9. Decorator"></a>9. Decorator</h3><h4 id="目的-8"><a href="#目的-8" class="headerlink" title="目的"></a>目的</h4><p>动态的给一个对象添加功能。Decorators提供了一个灵活的选择来扩展功能。也叫做Wrapper。</p>
<h4 id="结构-8"><a href="#结构-8" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_dc.png" alt="image"></p>
<p><strong>Component</strong>: 定义了基本组件的接口。<br><strong>ConcreteComponent</strong>: 定义了一个具体组件的类。<br><strong>Decorator</strong>: 有一个指向一个Compoent对象的应用，并且有着和Component一样的接口。这样可以保持给用户提供一致的接口，用户可以在不知不觉中使用已经扩展功能的对象。<br><strong>ConcreteDecorator</strong>: 给组件添加新的功能。并通过将Component的原始接口和新功能封装在重写的函数中实现行为的一致性。</p>
<h4 id="何时使用-8"><a href="#何时使用-8" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>动态地、透明地、不影响其它对象地给某个对象添加新的功能。</li>
<li>可以撤销对象的新功能。</li>
<li>通过继承来实现功能的扩展不切实际时。有时大量的可以扩展的独立功能，但是直接通过继承来实现会导致子类的组合爆炸。继承是需要在编程时写死的，而采用Decorator则可以在运行时动态的组合新的功能。</li>
</ol>
<hr>
<h3 id="10-Facade"><a href="#10-Facade" class="headerlink" title="10. Facade"></a>10. Facade</h3><h4 id="目的-9"><a href="#目的-9" class="headerlink" title="目的"></a>目的</h4><p>为一个子系统的一组接口提供一个统一地接口。Facade定义了一个更高层次的接口，是的子系统更加易于使用。</p>
<h4 id="结构-9"><a href="#结构-9" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_fcd.png" alt="image"></p>
<p><strong>Facade</strong>: 知道在子系统中哪一个类应该对一个请求进行处理，并且将适当的请求交给相应的类。<br><strong>subsystem classes</strong>: 实现子系统的功能，处理Facade交给的任务，但是它们并不知道Facade存在。   </p>
<h4 id="何时使用-9"><a href="#何时使用-9" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>你如果想给一个复杂的系统提供一个简单的接口，请用Facade。子系统会随着升级越来越复杂，可能会导致许多细粒度的类出现，虽然这增加了子系统的可定制性，但是对用户而说却越来越难使用。Facade可以给这些用户提供一个相对简单的视图，只有在用户需要定制子系统时，才需要越过Facade来观察子系统。  </li>
<li>在传统的系统中，客户端和子系统之间会产生复杂的依赖关系，而Facade的引入可以很好的将用户和子系统进行解耦，因此可以提升子系统的独立性和可携带性。</li>
<li>将子系统进行层次化。用facade来定义每个子系统的接口，如果子系统之间有依赖关系，你就可以让这些子系统之间只通过他们的facade接口来进行交互，从而简化他们之间的依赖。</li>
</ol>
<hr>
<h3 id="11-Flyweight"><a href="#11-Flyweight" class="headerlink" title="11. Flyweight"></a>11. Flyweight</h3><h4 id="目的-10"><a href="#目的-10" class="headerlink" title="目的"></a>目的</h4><p>通过分享的方式来高效的支持大量的细粒度的对象。   </p>
<h4 id="结构-10"><a href="#结构-10" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_fly.png" alt="image">  </p>
<p><strong>Flyweight</strong>: 声明了用来接收和处理外部状态的接口。<br><strong>ConcreteFlyweight</strong>: 实现了Flyweight接口，并且有自己的内部状态。ConcreteFlyweight必须是可以共享的。它内部存储的状态必须是与上下文无关的。<br><strong>UnsharedConcreteFlyweight</strong>: 不是所有的Flyweight子类都需要被分享，Flyweight并不强制需要被共享。<br><strong>FlyweightFactory</strong>: 创建和管理flyweight对象。保证flyweight可以被适当的共享。当用户需要一个flyweight时，FlyweightFactory会根据是否已经有该flyweight而创建或者直接返回一个flyweight对象。<br><strong>Client</strong>: 有指向flyweight的引用，同时有flyweight的外部状态。   </p>
<h4 id="何时使用-10"><a href="#何时使用-10" class="headerlink" title="何时使用"></a>何时使用</h4><p>当满足一下所有条件时可以使用：   </p>
<ol>
<li>一个应用使用了大量的对象。  </li>
<li>因为对象的数量庞大而导致耗费大量的存储资源。   </li>
<li>大部分的对象状态可以提出来作为外部状态传入。</li>
<li>当外部状态被提取出来以后，大量的的对象可以被几个可以共享的对象替代。</li>
<li>应用不依赖于对象的独一无二性，因为对用户而言，它们表面上是不同的对象，但是实质上它们是被共享的。   </li>
</ol>
<hr>
<h3 id="12-Proxy"><a href="#12-Proxy" class="headerlink" title="12. Proxy"></a>12. Proxy</h3><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>为一个对象提供一个代理或者占位符来控制对它的访问。也被称作Surrogate。</p>
<p>在Android系统中，Activity与ActivityManagerService进行进程间通信时，Activity是与ActivityManagerService的Proxy进行直接打交道的。</p>
<h4 id="结构-11"><a href="#结构-11" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_pxy.png" alt="image"></p>
<p><strong>Proxy</strong>: 有着一个指向真正的主体引用。它会提供和主体一样的接口，所以它可以替代主体。控制对真正主体的访问，也可能负责主体的创建和删除。不同种类的proxy:   </p>
<pre><code>1. **remote porxy**: 负责对请求和参数进行编码，然后将请求发送给在其它地址空间的真正主体。    
2. **virtual proxy**: 缓存部分真正主体的信息，因为它可以延缓访问主体。   
3. **protection proxy**: 验证访问者是否有权限发送请求。   
</code></pre><p><strong>Subject</strong>: 定义了RealSubject和Proxy的统一接口，所以Proxy可以在任何地方替代RealSubject。<br><strong>RealSubject</strong>: 定义了Proxy需要代理的真正对象。   </p>
<h4 id="何时使用-11"><a href="#何时使用-11" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li><strong>remote proxy</strong>: 给不在本地空间的对象提供了一个本地表示。  </li>
<li><strong>virtual proxy</strong>: 在必要时才需求创建昂贵的对象，能拖就拖。   </li>
<li><strong>protection proxy</strong>: 控制访问原始对象。在一个对象有着不同等级的访问权限时，Protection proxy十分有用。   </li>
<li><strong>smart reference</strong>: 可以代替指针，在访问主体对象之前可以进行一些附加操作。比如统计有多少个引用指向该主体，在适当的时候可以释放主体；在第一访问时将主体加载到内存；对主体进行加锁等。</li>
</ol>
<hr>
<h2 id="Behavioral-Patterns"><a href="#Behavioral-Patterns" class="headerlink" title="Behavioral Patterns"></a>Behavioral Patterns</h2><h3 id="13-Chain-of-Responsibility"><a href="#13-Chain-of-Responsibility" class="headerlink" title="13. Chain of Responsibility"></a>13. Chain of Responsibility</h3><h4 id="目的-11"><a href="#目的-11" class="headerlink" title="目的"></a>目的</h4><p>解耦请求的接收对象，使得一个请求可以被多个接收者处理。将这些接收对象串联成链，并且将请求依次传递过去，直到有接收者可以处理这个请求。</p>
<p>在Nodejs中有Connect模块负责在原始的http模块上进一步处理http请求，加入了session、Cookie、body解析等中间件来依次处理http请求。Connect的设计模式的就是典型的Chain of Responsibility。</p>
<h4 id="结构-12"><a href="#结构-12" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_dpc.png" alt="image"></p>
<p><strong>Handler</strong>: 定义了一个处理请求的接口。提供了后继的连接。<br><strong>ConcreteHandler</strong>: 处理它需要处理的请求，也可以将请求继续传递下去。<br><strong>Client</strong>: 创建一个请求给ConcreteHandler。  </p>
<h4 id="何时使用-12"><a href="#何时使用-12" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>当不止一个对象可以处理一个请求时，并且接收者的优先级不被告知，那就需要这些接收者自己确定优先级。</li>
<li>你想将一个请求发送给多个对象中的一个，但是不想指明接收者时。</li>
<li>那些可以处理对象的接收者可以动态的被决定。  </li>
</ol>
<hr>
<h3 id="14-Command"><a href="#14-Command" class="headerlink" title="14. Command"></a>14. Command</h3><h4 id="目的-12"><a href="#目的-12" class="headerlink" title="目的"></a>目的</h4><p>将请求封装为一个对象，因此可以让你使用不同的请求参数化客户端、列出请求序列，还能够支持撤销等行为。也被称作Action、Transaction。</p>
<h4 id="结构-13"><a href="#结构-13" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_cmmd.png" alt="image"></p>
<p><strong>Command</strong>: 声明一个接口来执行一个操作。<br><strong>ConcreteCommand</strong>: 定义一个Receiver和action之间的绑定关系。实现Execute函数来在Receiver上执行某些操作。实质上是将receiver和作用其上的Action封装成了一个command的对象，以便记录和撤销。<br><strong>Client</strong>: 创建一个ConcreteCommand并且制定它的receiver。<br><strong>Invoker</strong>: 让command执行请求。<br><strong>Receiver</strong>: 知道如何对请求进行具体的操作。  </p>
<h4 id="何时使用-13"><a href="#何时使用-13" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>通过一个action来参数化一个对象时。你可以在面向过程的语言中使用回调函数来实现这种定制，回调函数就是先在某些地方注册，在以后某个时间点执行的函数。Command是在面向对象的语言中一种回调函数的替代方式。  </li>
<li>在不同的时刻指定、放入队列，和执行请求。如果一个请求的接收者可以在不同的地址空间中，那么你可以将请求封装成command给不同的进程，并且在这些进程中执行这个command。  </li>
<li>支持撤销动作。Command可以存储装状态用来撤销自己执行的动作所产生的效果。所有执行过的动作应该放在一个列表中，使用该列表可以实现撤销和重做一系列动作的功能。  </li>
<li>可以记录行为日志，可以在crash发生时恢复系统状态。  </li>
<li>Command可以让系统建立在由基本操作组成的高级操作之上。在信息系统中，将基本操作封装为高级操作–“事务“是很常见的一种模式。   </li>
</ol>
<hr>
<h3 id="15-Interpreter"><a href="#15-Interpreter" class="headerlink" title="15. Interpreter"></a>15. Interpreter</h3><h4 id="目的-13"><a href="#目的-13" class="headerlink" title="目的"></a>目的</h4><p>给定一种语言，在interpreter中定义该语言的语法表示来翻译该语言。  </p>
<h4 id="结构-14"><a href="#结构-14" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_itpr.png" alt="image">   </p>
<p><strong>AbstractExpression</strong>: 给抽象语法树种所有节点声明抽象的公共翻译接口。<br><strong>TerminalExpression</strong>: 实现一个和语法中终结符号相关的的翻译函数。每个语法中的终结符都需要有一个对应的实例。<br><strong>NonterminalExpression</strong>: 非终结符表达式。有着一组类型为AbstractExpression的变量，这些变量是该表达式的子表达式。它会提供接口来递归的翻译所有子表达式。<br><strong>Context</strong>: 给Interpreter提供上下文环境。<br><strong>Client</strong>: 建造一个抽象语法树来表现某一种语法定义的语言。抽象语法树由NonterminalExpression和TerminalExpression构成。Client负责调用翻译函数。  </p>
<h5 id="何时使用-14"><a href="#何时使用-14" class="headerlink" title="何时使用"></a>何时使用</h5><p>在需要翻译一种语言时使用Interpreter模式，并且该语言中的语句可以使用抽象语法树来表示。下列情况下使用最佳：    </p>
<ol>
<li>语法比较简单。对于较为复杂的语法，用来表现语法的类的层次结构变得很庞大和不好管理。在语法复杂的时候解析生成器更为适合。他们可以不使用抽象语法树来翻译语句，因此可以节省空间和时间。   </li>
<li>效率不是特别的重要的时候。最有效的翻译方式通常不是直接翻译语法树，而是首先将它们转化为其它的形式。例如，正则表达式经常首先被转化成一个状态机。</li>
</ol>
<hr>
<h3 id="16-Iterator"><a href="#16-Iterator" class="headerlink" title="16. Iterator"></a>16. Iterator</h3><h4 id="目的-14"><a href="#目的-14" class="headerlink" title="目的"></a>目的</h4><p>提供了一个可以按序访问集合对象元素的方式，并且无需暴露集合的内部实现。   </p>
<h4 id="结构-15"><a href="#结构-15" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_itr.png" alt="image">  </p>
<p><strong>Iterator</strong>: 定义一个访问和遍历元素的接口。<br><strong>ConcreteIterator</strong>: 实现Iterator接口，保存当前遍历到的位置。<br><strong>Aggregate</strong>: 定义了一个创建Iterator对象的接口。<br><strong>ConcreteAggregate</strong>: 实现了穿件Iterator的接口来返回一个合适的ConcreteIterator。   </p>
<h4 id="何时使用-15"><a href="#何时使用-15" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>访问一个集合的内容，并且无需暴露集合的内部表示。  </li>
<li>可以支持多种遍历方式。</li>
<li>可以提供统一的接口来遍历不同的接口（因此可以支持多态的迭代）。</li>
</ol>
<hr>
<h3 id="17-Mediator"><a href="#17-Mediator" class="headerlink" title="17. Mediator"></a>17. Mediator</h3><h4 id="目的-15"><a href="#目的-15" class="headerlink" title="目的"></a>目的</h4><p>定义一个对象来封装一组对象之间的交互。Mediator让对象之间不通过指明的互相引用来减轻它们之间的耦合度，从而可以让你互不影响的变化它们之间的交互。   </p>
<h4 id="结构-16"><a href="#结构-16" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/2dp_media.png" alt="mediator">  </p>
<p><strong>Mediator</strong>: 定义了一个和同伴交流的接口。<br><strong>ConcreteMediator</strong>: 实现合作的接口来让这些伙伴对象可以相互协作。它知道并且维护着它的同伴对象。<br><strong>Colleague classes</strong>: 每个Colleague类都知道它的Mediator对象。当它想和同伴对象交流的时候，它会通过它的mediator来进行间接的交流。  </p>
<h4 id="何时使用-16"><a href="#何时使用-16" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一组对象通过定义良好但方式复杂的方式来交流合作。结果就导致它们之间的依赖结构混乱并且难以理解。  </li>
<li>重新使用一个对象是比较困难的，因为它引用着许多其它对象。   </li>
<li>一个分布在多个类之间的行为应该很容易被定制，而不需要搞出来很多的子类。</li>
</ol>
<hr>
<h3 id="18-Memento"><a href="#18-Memento" class="headerlink" title="18. Memento"></a>18. Memento</h3><h4 id="目的-16"><a href="#目的-16" class="headerlink" title="目的"></a>目的</h4><p>不用破坏对象的封装性质，获取一个对象的内部状态以便该对象可以恢复原来的状态。也可以被作token。在Android系统中，Activity可以通过savedInstanceState来保存和恢复一个Activity的状态。    </p>
<h4 id="结构-17"><a href="#结构-17" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_memto.png" alt="image">  </p>
<p><strong>Memento</strong>：存储Originator对象的内部状态。有originator自己决定需要保存多少的内部状态。它应该保护存储的状态只由originator自己访问。Memento最好有两种接口，Caretaker只能看到一个“狭窄”的接口，它只能将Memento传给其他对象。相反的，Originator应该可以看到一个“宽广”的接口，从而可以让它访问存储的状态，从而恢复到原来的状态。理想情况下，只有产生memento的originator才可以访问memento的内部状态。<br><strong>Originator</strong>：创建一个memento来保存它的内部状态快照。使用Memento来恢复它的状态。<br><strong>Caretaker</strong>: 安全的保存着memento。不会操作和访问memento的内部状态。</p>
<h4 id="何时使用-17"><a href="#何时使用-17" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一个对象的状态快照需要被保存下来，以后可以用来恢复状态。   </li>
<li>直接访问一个对象的内部状态会导致破坏一个对象的封装性，暴露对象的实现细节。</li>
</ol>
<hr>
<h3 id="19-Observer"><a href="#19-Observer" class="headerlink" title="19. Observer"></a>19. Observer</h3><h4 id="目的-17"><a href="#目的-17" class="headerlink" title="目的"></a>目的</h4><p>定义一个一对多的对象之间的依赖关系，因此当一个对象发生改变，所有依赖于它的对象会收到提醒，并且自动的改变状态。可以称作Dependents，Publish-Subscribe模式。在Android系统中，有broadcast/broadcast receiver机制，在nodejs中，同样有event emmiter/listen机制。</p>
<h4 id="结构-18"><a href="#结构-18" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_observer.png" alt="image">   </p>
<p><strong>Subject</strong>: 知道所有的observer，observer的数量时不固定的。提供接口来添加或者移除所有的observer对象。<br><strong>Observer</strong>: 给那些需要观察subject变化的对象提供了一个update的接口。<br><strong>ConcreteSubject</strong>: 存储了ConcreteObserver感兴趣的状态，当它的状态发生变化时，提醒它的观察者。<br><strong>ConcreteObserver</strong>: 有一个指向ConcreteSubject对象的引用，存储了应该和subject一致的状态。实现了Observer的更新接口，来保持与subject状态的一致。   </p>
<p>目前，很多使用该模式的系统会进一步解耦合，使得subject和observer相互透明。</p>
<h4 id="何时使用-18"><a href="#何时使用-18" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一个抽象结构中有两个部分，一个依赖于另一个。将这两个部分封装成独立的对象，可以让你独立的修改和重复使用它们。   </li>
<li>当一个对象的变化需要需要其他对象跟着变化，但是你不知道有多少对象需要被修改的时候。  </li>
<li>当你想让一个对象通知其它对象，而无需关心这些被通知的对象是谁时。一句话，你不想让这些对象紧密耦合的时候。   </li>
</ol>
<hr>
<h3 id="20-State"><a href="#20-State" class="headerlink" title="20. State"></a>20. State</h3><h4 id="目的-18"><a href="#目的-18" class="headerlink" title="目的"></a>目的</h4><p>让一个对象可以在它的状态改变时，改变它的行为。使得对象看上去改变了自己的类。也被称作Object for States。  </p>
<h4 id="结构-19"><a href="#结构-19" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_state.png" alt="state">   </p>
<p><strong>Context</strong>: 定义了用户需要的接口。保存着一个定义了当前状态的ConcreteState子类实例。<br><strong>State</strong>: 定义了一个用来封装与之对应的行为的接口。<br><strong>ConcreteState subclasses</strong>: 每个subclass实现了与状态对应的行为。   </p>
<h4 id="何时使用-19"><a href="#何时使用-19" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一个对象的行为依赖于它的状态，它必须在运行时刻根据它的状态改变它的行为。   </li>
<li>一个对象的操作有着大量的条件语句依赖于对象的状态。这些状态通常只有可数的几种组合。通常，很多函数含有重复的条件结构。State可以将这些不同的条件分支放到不同的类中。从而，你可以将对象的状态看成独立的对象，这些状态可以相互独立的进行切换。</li>
</ol>
<hr>
<h3 id="21-Strategy"><a href="#21-Strategy" class="headerlink" title="21. Strategy"></a>21. Strategy</h3><h4 id="目的-19"><a href="#目的-19" class="headerlink" title="目的"></a>目的</h4><p>定义了一组算法，并且对每个算法进行了封装，并且他们之间是可以相互切换的。Strategy 让算法可以独立于用户变化。也可以称作Policy。   </p>
<h4 id="结构-20"><a href="#结构-20" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_strategy.png" alt="strategy">  </p>
<p><strong>Strategy</strong>: 定义了所有支持的算法的通用接口。Context使用该接口来调用ConcreteStrategy提供的算法。<br><strong>ConcreteStrategy</strong>: 使用Strategy定义的接口实现了具体的算法。<br><strong>Context</strong>: 它会配置一个ConcreteStrategy对象。保存一个对Strategy对象的引用。提供了可以让Strategy访问数据的接口。   </p>
<h4 id="何时使用-20"><a href="#何时使用-20" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一些类只有他们的行为不同，使用Strategy可以让一个类配置多种行为。  </li>
<li>你需要不同算法。比如，你可能定义了一些有着不同的时间／空间复杂度的算法。</li>
<li>用户无需知道算法如何使用数据。使用Strategy可以避免暴露复杂的，算法特定的数据结构。   </li>
<li>一个类定义了多种行为，导致在函数中有多种条件语句来选择这些行为。为了避免这种繁杂的条件语句，将相关的分支封装成不同的Strategy对象。  </li>
</ol>
<hr>
<h3 id="22-Template-Method"><a href="#22-Template-Method" class="headerlink" title="22. Template Method"></a>22. Template Method</h3><h4 id="目的-20"><a href="#目的-20" class="headerlink" title="目的"></a>目的</h4><p>在函数中定义了算法的骨架，将具体某些步骤交给子类来实现。Template Method让子类重定义部分步骤，而不用改变整个算法的结构。   </p>
<h4 id="结构-21"><a href="#结构-21" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_template.png" alt="template method">  </p>
<p><strong>AbstractClass</strong>: 定义了抽象的primitive函数，让子类来具体实现这几步。实现了一个模版方法，决定了算法的骨架。template method 调用了primitive方法，还有一些其他方法。<br><strong>ConcreteClass</strong>: 实现了primitive方法，从而达到定制算法某些步骤的目的。   </p>
<h4 id="何时使用-21"><a href="#何时使用-21" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>实现算法中不可变的部分，将可变的部分交给子类去实现。  </li>
<li>当几个子类的函数中有着共同部分行为，可以将这共同的部分在父类中实现，避免代码的重复。有一种通过重构达到一般化的目的。  </li>
<li>控制子类的扩展。你可以定义一个template方法在指定位置调用“hook”操作，从而限制子类只能在这些hook的位置进行扩展。   </li>
</ol>
<hr>
<h3 id="23-Visitor"><a href="#23-Visitor" class="headerlink" title="23. Visitor"></a>23. Visitor</h3><h4 id="目的-21"><a href="#目的-21" class="headerlink" title="目的"></a>目的</h4><p>表示一个可以对结构体中的元素进行操作的模式。可以对其中的元素添加新的操作，而无需修改该元素对应的类。   </p>
<h4 id="结构-22"><a href="#结构-22" class="headerlink" title="结构"></a>结构</h4><p><img src="http://7xky03.com1.z0.glb.clouddn.com/23dp_visitor.png" alt="visitor">  </p>
<p><strong>Visitor</strong>: 给每个结构中的类定义了一个访问函数。函数名指明了它能能够访问的对象。Visitor决定了自己可以访问的元素，通过特定的参数，visitor能够直接的访问这些元素。<br><strong>Concrete Visitor</strong>: 实现Visitor声明的每个操作，每个操作位结构中对应的元素实现了算法的一个片段，Concrete Visitor提供了算法的上下文，并且存储了本地状态，可以加速遍历。<br><strong>Element</strong>: 定义了可以接受Visitor的接口。<br><strong>ConcreteElement</strong>: 实现了接受接口。<br><strong>ObjectStructure</strong>: 可以列举自己的element。提供了一个更高层次的接口来让visitor来访问它的元素。可以是一个composite结构，也可以是一个列表、集合等。   </p>
<h4 id="何时使用-22"><a href="#何时使用-22" class="headerlink" title="何时使用"></a>何时使用</h4><ol>
<li>一个结构体中有着很多接口不同的元素对象，同时你希望对其中的这些元素进行操作。   </li>
<li>你需要对一个结构体中的对象进行很多不同的，并且不相关的操作，同时你不希望“污染”这些原有的类。Visitor可以让你将这些无关的操作定义在一个类中。</li>
<li>结构体中对象的类很少变化，但是你常常想对结构添加新的操作。修改结构体中的类的接口，会导致需要重新定义visitor的接口，这些代价很大。所以如果结构体中的类如果常常变化，那么最好还是将操作定义在这些类中，而不要用visitor。   </li>
</ol>
<hr>
<blockquote>
<p>整理完了23个设计模式，经常回顾，必将会受益匪浅。</p>
</blockquote>
<div class="tip"><br>    本文可以转载，但请注明文章来自：<a href="http://itanch.github.io/">http://itanch.github.io/</a><br></div>






]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章是对&lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt;的总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看完&lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt;已经有些时日了，现在提笔将其概括总结一下，以备将来的参考。此书总结了23中不同的设计模式，并且将它们的设计目的、结构、用法等方面进行的很好的介绍，是一本值得放在手边随时查阅的工具书。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="设计模式" scheme="http://itanch.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>23个设计模式</title>
    <link href="http://itanch.github.io/2017/02/15/%E7%94%A8React-Native%E5%86%99%E4%B8%80%E4%B8%AA%E5%BE%AE%E5%8D%9A%E5%AE%A2%E6%88%B7%E7%AB%AF-1/"/>
    <id>http://itanch.github.io/2017/02/15/用React-Native写一个微博客户端-1/</id>
    <published>2017-02-15T06:10:00.000Z</published>
    <updated>2017-04-06T15:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇文章是对<em>Design Patterns: Elements of Reusable Object-Oriented Software</em>的总结。</p>
</blockquote>
<p>看完<em>Design Patterns: Elements of Reusable Object-Oriented Software</em>已经有些时日了，现在提笔将其概括总结一下，以备将来的参考。此书总结了23中不同的设计模式，并且将它们的设计目的、结构、用法等方面进行的很好的介绍，是一本值得放在手边随时查阅的工具书。<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章是对&lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt;的总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看完&lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt;已经有些时日了，现在提笔将其概括总结一下，以备将来的参考。此书总结了23中不同的设计模式，并且将它们的设计目的、结构、用法等方面进行的很好的介绍，是一本值得放在手边随时查阅的工具书。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="设计模式" scheme="http://itanch.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>写在2017的开始</title>
    <link href="http://itanch.github.io/2017/02/14/%E5%86%99%E5%9C%A82017%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://itanch.github.io/2017/02/14/写在2017的开始/</id>
    <published>2017-02-14T08:02:40.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>博客的一次搬迁</p>
</blockquote>
<h2 id="博客搬迁历史"><a href="#博客搬迁历史" class="headerlink" title="博客搬迁历史"></a>博客搬迁历史</h2><p>一年前，在依靠github搭建了个人博客后，写了一些文章。一年后<code>liutianchi.com</code>域名没有续费，就被阿里云封掉，所以在github上的博客暂时无法访问。所以，暂时将博客迁移到<a href="http://blog.csdn.net/tianchi92" target="_blank" rel="external">CSDN</a>继续我的博客之旅。</p>
<p>现在，我放弃购买域名，采用github默认域名继续在<code>http://itanch.github.io/</code>记录我的学习点滴，并且将部分自己认为有价值的文章从CSDN上迁移了过来。</p>
<p>希望新的一年有更多的收获:)。情人节快乐！</p>
<a id="more"></a>
<p><img src="http://7xky03.com1.z0.glb.clouddn.com/lalaland.jpg" alt="lalaland"></p>
<h2 id="2017博客计划"><a href="#2017博客计划" class="headerlink" title="2017博客计划"></a>2017博客计划</h2><ol>
<li>重新整理一遍32种设计模式</li>
<li>重新整理一遍Android四大组件的运行框架</li>
<li>其它</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;博客的一次搬迁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;博客搬迁历史&quot;&gt;&lt;a href=&quot;#博客搬迁历史&quot; class=&quot;headerlink&quot; title=&quot;博客搬迁历史&quot;&gt;&lt;/a&gt;博客搬迁历史&lt;/h2&gt;&lt;p&gt;一年前，在依靠github搭建了个人博客后，写了一些文章。一年后&lt;code&gt;liutianchi.com&lt;/code&gt;域名没有续费，就被阿里云封掉，所以在github上的博客暂时无法访问。所以，暂时将博客迁移到&lt;a href=&quot;http://blog.csdn.net/tianchi92&quot;&gt;CSDN&lt;/a&gt;继续我的博客之旅。&lt;/p&gt;
&lt;p&gt;现在，我放弃购买域名，采用github默认域名继续在&lt;code&gt;http://itanch.github.io/&lt;/code&gt;记录我的学习点滴，并且将部分自己认为有价值的文章从CSDN上迁移了过来。&lt;/p&gt;
&lt;p&gt;希望新的一年有更多的收获:)。情人节快乐！&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="http://itanch.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(18):Android应用的显示</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-18-Android%E5%BA%94%E7%94%A8%E7%9A%84%E6%98%BE%E7%A4%BA/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-18-Android应用的显示/</id>
    <published>2017-02-14T07:04:48.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-启动ActivityManagerService"><a href="#1-启动ActivityManagerService" class="headerlink" title="1. 启动ActivityManagerService"></a>1. 启动ActivityManagerService</h2><p>在前面第14章讲到，在System进程启动时，会启动系统的一些基本服务。启动就有ActivityManagerService和PackageManagerService。在SystemServer中如下启动ActivityManagerService。</p>
<p><em>frameworks/base/services/java/com/android/server/SystemServer.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Activity manager runs the show.</span></div><div class="line">mActivityManagerService = mSystemServiceManager.startService(ActivityManagerService.Lifecycle.class).getService();</div></pre></td></tr></table></figure>   </p>
<p>startService就是创建了ActivityManagerService的实例对象mActivityManagerService，然后启动了ActivityManagerService的looper线程。在SystemServer启动了基本服务后，就会调用mActivityManagerService的systemReady函数来启动HomeActivity。<br><a id="more"></a></p>
<h2 id="2-启动HomeActivity"><a href="#2-启动HomeActivity" class="headerlink" title="2. 启动HomeActivity"></a>2. 启动HomeActivity</h2><p>目前仍在SystemServer主线程中调用的systemReady函数。该函数又会接着调用startHomeActivityLocked函数来启动HomeActivity，具体如下：</p>
<p><em>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startHomeActivityLocked</span><span class="params">(<span class="keyword">int</span> userId, String reason)</span> </span>&#123;</div><div class="line">      <span class="comment">//...</span></div><div class="line">      <span class="comment">//先创建一个启动Home的Intent，Intent的category为android.intent.category.home</span></div><div class="line">      Intent intent = getHomeIntent();</div><div class="line">      ActivityInfo aInfo =</div><div class="line">          resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);</div><div class="line">      <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</div><div class="line">          intent.setComponent(<span class="keyword">new</span> ComponentName(</div><div class="line">                  aInfo.applicationInfo.packageName, aInfo.name));</div><div class="line">          <span class="comment">// Don't do this if the home app is currently being</span></div><div class="line">          <span class="comment">// instrumented.</span></div><div class="line">          aInfo = <span class="keyword">new</span> ActivityInfo(aInfo);</div><div class="line">          aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);</div><div class="line">          <span class="comment">//因为是第一次启动home，所以还没有相应的进程，所以app为null</span></div><div class="line">          ProcessRecord app = getProcessRecordLocked(aInfo.processName,</div><div class="line">                  aInfo.applicationInfo.uid, <span class="keyword">true</span>);</div><div class="line">          <span class="keyword">if</span> (app == <span class="keyword">null</span> || app.instrumentationClass == <span class="keyword">null</span>) &#123;</div><div class="line">              intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">              <span class="comment">//这里开始启动HomeActivity</span></div><div class="line">              mStackSupervisor.startHomeActivity(intent, aInfo, reason);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>   </p>
<p>这里交给了mStackSupervisor.startHomeActivity函数来启动HomeActivity，然后就会调用startActivityLocked函数。到这里，就开始重复第2章中，启动普通应用的activity的过程了，不再赘述。其中，在Launcher的Manifest中指明了它的类型为android.intent.category.home，所以启动的就是Laucher应用。</p>
<h2 id="3-Launcher展示应用"><a href="#3-Launcher展示应用" class="headerlink" title="3. Launcher展示应用"></a>3. Launcher展示应用</h2><p>下面从Launcher的onCreate函数开始讲起，部分代码如下：</p>
<p><em>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">LauncherAppState app = LauncherAppState.getInstance();</div><div class="line"><span class="comment">//将该launcher设置为mModel的callback函数</span></div><div class="line">mModel = app.setLauncher(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!mRestoring) &#123;</div><div class="line">    <span class="keyword">if</span> (DISABLE_SYNCHRONOUS_BINDING_CURRENT_PAGE) &#123;</div><div class="line">        <span class="comment">// If the user leaves launcher, then we should just load items asynchronously when</span></div><div class="line">        <span class="comment">// they return.</span></div><div class="line">        mModel.startLoader(PagedView.INVALID_RESTORE_PAGE);</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// We only load the page synchronously if the user rotates (or triggers a</span></div><div class="line">        <span class="comment">// configuration change) while launcher is in the foreground</span></div><div class="line">        <span class="comment">//开始加载应用信息</span></div><div class="line">        mModel.startLoader(mWorkspace.getRestorePage());</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>其中mModel是一个LauncherModel对象，它负责加载应用信息。在重载的startLoader函数中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLoader</span><span class="params">(<span class="keyword">int</span> synchronousBindPage, <span class="keyword">int</span> loadFlags)</span> </span>&#123;</div><div class="line">       <span class="comment">//...</span></div><div class="line">       <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">           <span class="comment">//...</span></div><div class="line">           <span class="comment">// Don't bother to start the thread if we know it's not going to do anything</span></div><div class="line">           <span class="keyword">if</span> (mCallbacks != <span class="keyword">null</span> &amp;&amp; mCallbacks.get() != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">//需要重新加载了，所以先把原来的加载任务停了</span></div><div class="line">               <span class="comment">// If there is already one running, tell it to stop.</span></div><div class="line">               stopLoaderLocked();</div><div class="line">               <span class="comment">//创建了一个加载任务</span></div><div class="line">               mLoaderTask = <span class="keyword">new</span> LoaderTask(mApp.getContext(), loadFlags);</div><div class="line">               <span class="keyword">if</span> (synchronousBindPage != PagedView.INVALID_RESTORE_PAGE</div><div class="line">                   <span class="comment">//...</span></div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="comment">//交给workThread来处理这个任务</span></div><div class="line">                   sWorkerThread.setPriority(Thread.NORM_PRIORITY);</div><div class="line">                   <span class="comment">//sWorker是sWorkerThread的Handler</span></div><div class="line">                   sWorker.post(mLoaderTask);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>   
<p>因为加载所有安装的应用信息是一个比较耗时的过程，所以应该交给一个异步线程来处理。这里先创建了一个加载任务mLoaderTask，然后将它交给sWorkerThread来处理。sWorkerThread是一个HandlerThread，我们知道HandlerThread是一个独立的线程，并且有着自己的looper。mLoaderTask加载任务执行一次就可以结束，但是为什么需要用一个HandlerThread在这里不断等待着其它任务呢？因为桌面上应用可以动态的添加和删除，所以应用的加载可能是频繁的。这里使用HandlerThread可以避免重复的创建加载线程。</p>
<p>下面我们就看LoaderTask.run函数中具体做了哪些任务。</p>
<p><em>packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">          <span class="keyword">if</span> (mStopped) &#123;</div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          mIsLoaderTaskRunning = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Optimize for end-user experience: if the Launcher is up and // running with the</span></div><div class="line">      <span class="comment">// All Apps interface in the foreground, load All Apps first. Otherwise, load the</span></div><div class="line">      <span class="comment">// workspace first (default).</span></div><div class="line">      keep_running: &#123;</div><div class="line">          <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"step 1: loading workspace"</span>);</div><div class="line">          <span class="comment">//启动workspace</span></div><div class="line">          loadAndBindWorkspace();</div><div class="line">          <span class="keyword">if</span> (mStopped) &#123;</div><div class="line">              <span class="keyword">break</span> keep_running;</div><div class="line">          &#125;</div><div class="line">          waitForIdle();</div><div class="line">          <span class="comment">// second step</span></div><div class="line">          <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"step 2: loading all apps"</span>);</div><div class="line">          <span class="comment">//加载应用</span></div><div class="line">          loadAndBindAllApps();</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//...</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>   </p>
<p>WorkSpace就是Android桌面中的分屏，每个分屏有若干应用。先加载工作区，再加载应用更符合用户的心理预期？函数loadAndBindAllApps会判断是否已经加载过应用，如果已经加载过信息，则直接将app显示在桌面上即可；如果没有，则需要先调用函数loadAllApps，具体内容如下：</p>
<p><em>packages/apps/Launcher3/src/com/android/luancher3/LauncherModel.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadAllApps</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">final</span> Callbacks oldCallbacks = mCallbacks.get();</div><div class="line"></div><div class="line">           <span class="comment">// Clear the list of apps</span></div><div class="line">           mBgAllAppsList.clear();</div><div class="line">           <span class="keyword">for</span> (UserHandleCompat user : profiles) &#123;</div><div class="line">               <span class="comment">// Query for the set of apps</span></div><div class="line">               <span class="comment">//获取所有的app信息，这里最终还是从PackageManagerService获取的应用信息</span></div><div class="line">               <span class="keyword">final</span> List&lt;LauncherActivityInfoCompat&gt; apps = mLauncherApps.getActivityList(<span class="keyword">null</span>, user);</div><div class="line">        </div><div class="line">               <span class="comment">// Create the ApplicationInfos</span></div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; apps.size(); i++) &#123;</div><div class="line">                   LauncherActivityInfoCompat app = apps.get(i);</div><div class="line">                   <span class="comment">//把每个应用信息封装成AppInfo</span></div><div class="line">                   <span class="comment">// This builds the icon bitmaps.</span></div><div class="line">                   mBgAllAppsList.add(<span class="keyword">new</span> AppInfo(mContext, app, user, mIconCache));</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//...</span></div><div class="line">           <span class="comment">// Huh? Shouldn't this be inside the Runnable below?</span></div><div class="line">           <span class="keyword">final</span> ArrayList&lt;AppInfo&gt; added = mBgAllAppsList.added;</div><div class="line">           mBgAllAppsList.added = <span class="keyword">new</span> ArrayList&lt;AppInfo&gt;();</div><div class="line">            </div><div class="line">           <span class="comment">//这里一直运行在Launcher中创建的一个HandlerThread子线程中</span></div><div class="line">           <span class="comment">//获取了应用信息后，需要通知主线程进行ui更新，mHandler是主线程的Handler</span></div><div class="line">           <span class="comment">// Post callback on main thread</span></div><div class="line">           mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="comment">//这个callback就是launcher</span></div><div class="line">                   <span class="keyword">final</span> Callbacks callbacks = tryGetCallbacks(oldCallbacks);</div><div class="line">                   <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</div><div class="line">                      <span class="comment">//显示所有应用</span></div><div class="line">                       callbacks.bindAllApplications(added);</div><div class="line">                      <span class="comment">//...</span></div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="comment">//...</span></div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">           <span class="comment">//...</span></div><div class="line">       &#125;</div></pre></td></tr></table></figure>   </p>
<p>mLauncherApps.getActivityList获取app信息的方法是通过向PackageManager发送请求的方式实现的。下面回到Launcher主线程，开始显示应用图标。首先看一眼这个回调函数：</p>
<p><em>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Add the icons for all apps.</div><div class="line">  *</div><div class="line">  * Implementation of the method from LauncherModel.Callbacks.</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindAllApplications</span><span class="params">(<span class="keyword">final</span> ArrayList&lt;AppInfo&gt; apps)</span> </span>&#123;</div><div class="line">     <span class="comment">//...</span></div><div class="line">     <span class="keyword">if</span> (mAppsView != <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="comment">//mAppsView管理着所有应用的view</span></div><div class="line">         mAppsView.setApps(apps);</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//...</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>   </p>
<p>mAppsView是一个view的容器，维持了一个AlphabeticalAppsList列表，保存应用的信息。当向其中添加新的应用信息后，会对home上的应用进行更新。当home上的图标被点击后，会触发启动该应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-启动ActivityManagerService&quot;&gt;&lt;a href=&quot;#1-启动ActivityManagerService&quot; class=&quot;headerlink&quot; title=&quot;1. 启动ActivityManagerService&quot;&gt;&lt;/a&gt;1. 启动ActivityManagerService&lt;/h2&gt;&lt;p&gt;在前面第14章讲到，在System进程启动时，会启动系统的一些基本服务。启动就有ActivityManagerService和PackageManagerService。在SystemServer中如下启动ActivityManagerService。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;frameworks/base/services/java/com/android/server/SystemServer.java&lt;/em&gt; :&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Activity manager runs the show.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mActivityManagerService = mSystemServiceManager.startService(ActivityManagerService.Lifecycle.class).getService();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;   &lt;/p&gt;
&lt;p&gt;startService就是创建了ActivityManagerService的实例对象mActivityManagerService，然后启动了ActivityManagerService的looper线程。在SystemServer启动了基本服务后，就会调用mActivityManagerService的systemReady函数来启动HomeActivity。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(17):Android应用的安装</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-17-Android%E5%BA%94%E7%94%A8%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-17-Android应用的安装/</id>
    <published>2017-02-14T07:00:58.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学到的才是自己的，干活都是扯淡</p>
</blockquote>
<h2 id="1-应用的安装"><a href="#1-应用的安装" class="headerlink" title="1. 应用的安装"></a>1. 应用的安装</h2><p>PackageManagerService负责管理应用的安装。在第14章中讲到，SystemService会启动PackageManagerService，那么我们就从SystemService启动PackageManagerService开始分析。</p>
<a id="more"></a>
<h3 id="1-1-PackageManagerService-main"><a href="#1-1-PackageManagerService-main" class="headerlink" title="1.1 PackageManagerService.main"></a>1.1 PackageManagerService.main</h3><p>创建PackageManagerService对象。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title">main</span><span class="params">(Context context, Installer installer, <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</div><div class="line">     <span class="comment">//先创建一个PackageManagerService对象</span></div><div class="line">     PackageManagerService m = <span class="keyword">new</span> PackageManagerService(context, installer, factoryTest, onlyCore);</div><div class="line">     <span class="comment">//将他注册到ServiceManager里面</span></div><div class="line">     ServiceManager.addService(<span class="string">"package"</span>, m);</div><div class="line">     <span class="keyword">return</span> m;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-2-PackageManagerService-PackageManagerService"><a href="#1-2-PackageManagerService-PackageManagerService" class="headerlink" title="1.2 PackageManagerService.PackageManagerService"></a>1.2 PackageManagerService.PackageManagerService</h3><p>PackageManagerService的构造函数。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">PackageManagerService</span><span class="params">(Context context, Installer installer,</span></span></div><div class="line">           <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore) &#123;</div><div class="line">       <span class="comment">//...</span></div><div class="line"></div><div class="line">       mSettings = <span class="keyword">new</span> Settings(mPackages);</div><div class="line"></div><div class="line"><span class="comment">//...</span></div><div class="line">       <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">       <span class="comment">// writer</span></div><div class="line">       <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">           <span class="comment">//一个PackageManagerService自己的Looper</span></div><div class="line">           mHandlerThread = <span class="keyword">new</span> ServiceThread(TAG,</div><div class="line">                   Process.THREAD_PRIORITY_BACKGROUND, <span class="keyword">true</span> <span class="comment">/*allowIo*/</span>);</div><div class="line">　　　　　　　<span class="comment">//线程启动，开启自己的消息循环队列</span></div><div class="line">           mHandlerThread.start();</div><div class="line">           <span class="comment">//并且创建了一个Handler该线程</span></div><div class="line">           mHandler = <span class="keyword">new</span> PackageHandler(mHandlerThread.getLooper());</div><div class="line"></div><div class="line">　　　　　　　<span class="comment">//获取文件路径</span></div><div class="line">           File dataDir = Environment.getDataDirectory();</div><div class="line">           mAppDataDir = <span class="keyword">new</span> File(dataDir, <span class="string">"data"</span>);</div><div class="line">           mAppInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app"</span>);</div><div class="line">           mAppLib32InstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-lib"</span>);</div><div class="line">           mAsecInternalPath = <span class="keyword">new</span> File(dataDir, <span class="string">"app-asec"</span>).getPath();</div><div class="line">           mUserAppDataDir = <span class="keyword">new</span> File(dataDir, <span class="string">"user"</span>);</div><div class="line">           mDrmAppPrivateInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-private"</span>);</div><div class="line"></div><div class="line">           sUserManager = <span class="keyword">new</span> UserManagerService(context, <span class="keyword">this</span>,</div><div class="line">                   mInstallLock, mPackages);</div><div class="line"></div><div class="line">　　 <span class="comment">//　获取权限配置文件的中的权限</span></div><div class="line">           <span class="comment">// Propagate permission configuration in to package manager.</span></div><div class="line">           ArrayMap&lt;String, SystemConfig.PermissionEntry&gt; permConfig</div><div class="line">                   = systemConfig.getPermissions();</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;permConfig.size(); i++) &#123;</div><div class="line">               SystemConfig.PermissionEntry perm = permConfig.valueAt(i);</div><div class="line">               BasePermission bp = mSettings.mPermissions.get(perm.name);</div><div class="line">               <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</div><div class="line">                   bp = <span class="keyword">new</span> BasePermission(perm.name, <span class="string">"android"</span>, BasePermission.TYPE_BUILTIN);</div><div class="line">                   mSettings.mPermissions.put(perm.name, bp);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (perm.gids != <span class="keyword">null</span>) &#123;</div><div class="line">                   bp.setGids(perm.gids, perm.perUser);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">　　 <span class="comment">//获取共享库</span></div><div class="line">           ArrayMap&lt;String, String&gt; libConfig = systemConfig.getSharedLibraries();</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;libConfig.size(); i++) &#123;</div><div class="line">               mSharedLibraries.put(libConfig.keyAt(i),</div><div class="line">                       <span class="keyword">new</span> SharedLibraryEntry(libConfig.valueAt(i), <span class="keyword">null</span>));</div><div class="line">           &#125;</div><div class="line"></div><div class="line">          　<span class="comment">//恢复上一次应用安装信息，见1.3</span></div><div class="line">           mRestoredSettings = mSettings.readLPw(<span class="keyword">this</span>, sUserManager.getUsers(<span class="keyword">false</span>),</div><div class="line">                   mSdkVersion, mOnlyCore);</div><div class="line"></div><div class="line">           <span class="comment">/**</span></div><div class="line">            * Add everything in the in the boot class path to the</div><div class="line">            * list of process files because dexopt will have been run</div><div class="line">            * if necessary during zygote startup.</div><div class="line">            */</div><div class="line">           <span class="keyword">final</span> String bootClassPath = System.getenv(<span class="string">"BOOTCLASSPATH"</span>);</div><div class="line">           <span class="keyword">final</span> String systemServerClassPath = System.getenv(<span class="string">"SYSTEMSERVERCLASSPATH"</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">           File frameworkDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"framework"</span>);</div><div class="line"></div><div class="line">           <span class="comment">// Gross hack for now: we know this file doesn't contain any</span></div><div class="line">           <span class="comment">// code, so don't dexopt it to avoid the resulting log spew.</span></div><div class="line">           alreadyDexOpted.add(frameworkDir.getPath() + <span class="string">"/framework-res.apk"</span>);</div><div class="line"></div><div class="line">           <span class="comment">// Gross hack for now: we know this file is only part of</span></div><div class="line">           <span class="comment">// the boot class path for art, so don't dexopt it to</span></div><div class="line">           <span class="comment">// avoid the resulting log spew.</span></div><div class="line">           alreadyDexOpted.add(frameworkDir.getPath() + <span class="string">"/core-libart.jar"</span>);</div><div class="line"></div><div class="line">           <span class="comment">/**</span></div><div class="line">            * 将一些应用dexopt转化</div><div class="line">            * There are a number of commands implemented in Java, which</div><div class="line">            * we currently need to do the dexopt on so that they can be</div><div class="line">            * run from a non-root shell.</div><div class="line">            */</div><div class="line"></div><div class="line">          　<span class="comment">//...</span></div><div class="line"></div><div class="line">           <span class="comment">//设备厂商提供的应用</span></div><div class="line">           <span class="comment">// Collect vendor overlay packages.</span></div><div class="line">           <span class="comment">// (Do this before scanning any apps.)</span></div><div class="line">           <span class="comment">// For security and version matching reason, only consider</span></div><div class="line">           <span class="comment">// overlay packages if they reside in VENDOR_OVERLAY_DIR.</span></div><div class="line">           File vendorOverlayDir = <span class="keyword">new</span> File(VENDOR_OVERLAY_DIR);</div><div class="line">           scanDirLI(vendorOverlayDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">                   | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags | SCAN_TRUSTED_OVERLAY, <span class="number">0</span>);</div><div class="line">　　　　　　　<span class="comment">// 资源型的程序</span></div><div class="line">           <span class="comment">// Find base frameworks (resource packages without code).</span></div><div class="line">           scanDirLI(frameworkDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">                   | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">                   | PackageParser.PARSE_IS_PRIVILEGED,</div><div class="line">                   scanFlags | SCAN_NO_DEX, <span class="number">0</span>);</div><div class="line">　　　　　　  <span class="comment">//特权应用</span></div><div class="line">           <span class="comment">// Collected privileged system packages.</span></div><div class="line">           <span class="keyword">final</span> File privilegedAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"priv-app"</span>);</div><div class="line">           scanDirLI(privilegedAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">                   | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">                   | PackageParser.PARSE_IS_PRIVILEGED, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line">           <span class="comment">// Collect ordinary system packages.</span></div><div class="line">           <span class="keyword">final</span> File systemAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"app"</span>);</div><div class="line">           scanDirLI(systemAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">                   | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line">           <span class="comment">// Collect all vendor packages.</span></div><div class="line">           File vendorAppDir = <span class="keyword">new</span> File(<span class="string">"/vendor/app"</span>);</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               vendorAppDir = vendorAppDir.getCanonicalFile();</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">               <span class="comment">// failed to look up canonical path, continue with original one</span></div><div class="line">           &#125;</div><div class="line">           scanDirLI(vendorAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">                   | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line">           <span class="comment">// Collect all OEM packages.</span></div><div class="line">           <span class="keyword">final</span> File oemAppDir = <span class="keyword">new</span> File(Environment.getOemDirectory(), <span class="string">"app"</span>);</div><div class="line">           scanDirLI(oemAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">                   | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (DEBUG_UPGRADE) Log.v(TAG, <span class="string">"Running installd update commands"</span>);</div><div class="line">           mInstaller.moveFiles();</div><div class="line"></div><div class="line">           <span class="comment">// Prune any system packages that no longer exist.</span></div><div class="line">           <span class="keyword">final</span> List&lt;String&gt; possiblyDeletedUpdatedSystemApps = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">          　<span class="comment">//...</span></div><div class="line"></div><div class="line"></div><div class="line">           <span class="comment">//look for any incomplete package installations</span></div><div class="line">           ArrayList&lt;PackageSetting&gt; deletePkgsList = mSettings.getListOfIncompleteInstallPackagesLPr();</div><div class="line">           <span class="comment">//clean up list</span></div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deletePkgsList.size(); i++) &#123;</div><div class="line">               <span class="comment">//clean up here</span></div><div class="line">               cleanupInstallFailedPackage(deletePkgsList.get(i));</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//delete tmp files</span></div><div class="line">           deleteTempPackageFiles();</div><div class="line"></div><div class="line">           <span class="comment">// Remove any shared userIDs that have no associated packages</span></div><div class="line">           mSettings.pruneSharedUsersLPw();</div><div class="line">           <span class="comment">//...</span></div><div class="line"></div><div class="line">           <span class="comment">// Now that we know all the packages we are keeping,</span></div><div class="line">           <span class="comment">// read and update their last usage times.</span></div><div class="line">           mPackageUsage.readLP();</div><div class="line"></div><div class="line">           <span class="comment">// If the platform SDK has changed since the last time we booted,</span></div><div class="line">           <span class="comment">// we need to re-grant app permission to catch any new ones that</span></div><div class="line">           <span class="comment">// appear.  This is really a hack, and means that apps can in some</span></div><div class="line">           <span class="comment">// cases get permissions that the user didn't initially explicitly</span></div><div class="line">           <span class="comment">// allow...  it would be nice to have some better way to handle</span></div><div class="line">           <span class="comment">// this situation.</span></div><div class="line">           <span class="keyword">int</span> updateFlags = UPDATE_PERMISSIONS_ALL;</div><div class="line">           <span class="keyword">if</span> (ver.sdkVersion != mSdkVersion) &#123;</div><div class="line">               Slog.i(TAG, <span class="string">"Platform changed from "</span> + ver.sdkVersion + <span class="string">" to "</span></div><div class="line">                       + mSdkVersion + <span class="string">"; regranting permissions for internal storage"</span>);</div><div class="line">               updateFlags |= UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;</div><div class="line">           &#125;</div><div class="line">　　　　　　　　　　　　<span class="comment">//为申请了特定资源的访问权限的应用分配用户组id</span></div><div class="line">           updatePermissionsLPw(<span class="keyword">null</span>, <span class="keyword">null</span>, StorageManager.UUID_PRIVATE_INTERNAL, updateFlags);</div><div class="line">           ver.sdkVersion = mSdkVersion;</div><div class="line"></div><div class="line">           <span class="comment">//将应用安装信息保存到本地的配置文件</span></div><div class="line">           <span class="comment">// can downgrade to reader</span></div><div class="line">           mSettings.writeLPr();</div><div class="line"></div><div class="line"></div><div class="line">       &#125; <span class="comment">// synchronized (mPackages)</span></div><div class="line">       &#125; <span class="comment">// synchronized (mInstallLock)</span></div><div class="line"></div><div class="line">       <span class="comment">// Now after opening every single application zip, make sure they</span></div><div class="line">       <span class="comment">// are all flushed.  Not really needed, but keeps things nice and</span></div><div class="line">       <span class="comment">// tidy.</span></div><div class="line">       Runtime.getRuntime().gc();</div><div class="line"></div><div class="line">       <span class="comment">// Expose private service for system components to use.</span></div><div class="line">       LocalServices.addService(PackageManagerInternal.class, <span class="keyword">new</span> PackageManagerInternalImpl());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-3-Settings-readLPw"><a href="#1-3-Settings-readLPw" class="headerlink" title="1.3 Settings.readLPw"></a>1.3 Settings.readLPw</h3><p>读取保存的应用信息。<br><em>frameworks/base/services/core/java/com/android/server/pm/Settings.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">readLPw</span><span class="params">(PackageManagerService service, List&lt;UserInfo&gt; users, <span class="keyword">int</span> sdkVersion,</span></span></div><div class="line">            <span class="keyword">boolean</span> onlyCore) &#123;</div><div class="line">        FileInputStream str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (mBackupSettingsFilename.exists()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//获取/data/system/packages-backup.xml文件</span></div><div class="line">                str = <span class="keyword">new</span> FileInputStream(mBackupSettingsFilename);</div><div class="line">                <span class="comment">//如果backup不存在，则获取/data/system/packages.xml文件</span></div><div class="line">                <span class="comment">//...</span></div><div class="line">            &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</div><div class="line">                <span class="comment">// We'll try for the normal settings file.</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	<span class="comment">//...</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//...</span></div><div class="line">                str = <span class="keyword">new</span> FileInputStream(mSettingsFilename);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//用parser解析xml文件</span></div><div class="line">            XmlPullParser parser = Xml.newPullParser();</div><div class="line">            parser.setInput(str, StandardCharsets.UTF_8.name());</div><div class="line">            <span class="comment">//...</span></div><div class="line">            <span class="keyword">int</span> outerDepth = parser.getDepth();</div><div class="line">            <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</div><div class="line">                    &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; outerDepth)) &#123;</div><div class="line">                <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                 </div><div class="line">                <span class="comment">//获取应用的各项参数</span></div><div class="line">                String tagName = parser.getName();</div><div class="line">                <span class="keyword">if</span> (tagName.equals(<span class="string">"package"</span>)) &#123;</div><div class="line">                    <span class="comment">//获取上次分配给他的应用用户ID，见1.4</span></div><div class="line">                    readPackageLPw(parser);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">"permissions"</span>)) &#123;</div><div class="line">                    readPermissionsLPw(mPermissions, parser);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">"permission-trees"</span>)) &#123;</div><div class="line">                    readPermissionsLPw(mPermissionTrees, parser);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">"shared-user"</span>)) &#123;</div><div class="line">                    <span class="comment">//获取上次分配的共享用户ID，见1.6</span></div><div class="line">                    readSharedUserLPw(parser);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</div><div class="line">                  <span class="comment">//...</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Slog.w(PackageManagerService.TAG, <span class="string">"Unknown element under &lt;packages&gt;: "</span></div><div class="line">                            + parser.getName());</div><div class="line">                    XmlUtils.skipCurrentTag(parser);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            str.close();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</div><div class="line">           <span class="comment">//...</span></div><div class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</div><div class="line">           <span class="comment">//....</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-4-Settings-readPackageLPw"><a href="#1-4-Settings-readPackageLPw" class="headerlink" title="1.4 Settings.readPackageLPw"></a>1.4 Settings.readPackageLPw</h3><p>读取package信息。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/Settings.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readPackageLPw</span><span class="params">(XmlPullParser parser)</span> <span class="keyword">throws</span> XmlPullParserException, IOException </span>&#123;</div><div class="line">       String name = <span class="keyword">null</span>;</div><div class="line">       <span class="comment">//...</span></div><div class="line">       String idStr = <span class="keyword">null</span>;</div><div class="line">       String sharedIdStr = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//...</span></div><div class="line">    </div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           name = parser.getAttributeValue(<span class="keyword">null</span>, ATTR_NAME);</div><div class="line">           realName = parser.getAttributeValue(<span class="keyword">null</span>, <span class="string">"realName"</span>);</div><div class="line">           idStr = parser.getAttributeValue(<span class="keyword">null</span>, <span class="string">"userId"</span>);</div><div class="line">           <span class="comment">//...</span></div><div class="line">           <span class="comment">//名字不能为null</span></div><div class="line">           <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">               PackageManagerService.reportSettingsProblem(Log.WARN,</div><div class="line">                       <span class="string">"Error in package manager settings: &lt;package&gt; has no name at "</span></div><div class="line">                               + parser.getPositionDescription());</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codePathStr == <span class="keyword">null</span>) &#123;</div><div class="line">               PackageManagerService.reportSettingsProblem(Log.WARN,</div><div class="line">                       <span class="string">"Error in package manager settings: &lt;package&gt; has no codePath at "</span></div><div class="line">                               + parser.getPositionDescription());</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userId &gt; <span class="number">0</span>) &#123;</div><div class="line">               <span class="comment">//该应用上次已经分配过ID，所以这次还使用该id,见1.5</span></div><div class="line">               packageSetting = addPackageLPw(name.intern(), realName, <span class="keyword">new</span> File(codePathStr),</div><div class="line">                       <span class="keyword">new</span> File(resourcePathStr), legacyNativeLibraryPathStr, primaryCpuAbiString,</div><div class="line">                       secondaryCpuAbiString, cpuAbiOverrideString, userId, versionCode, pkgFlags,</div><div class="line">                       pkgPrivateFlags);</div><div class="line">               <span class="comment">//...</span></div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sharedIdStr != <span class="keyword">null</span>) &#123;</div><div class="line">               userId = sharedIdStr != <span class="keyword">null</span> ? Integer.parseInt(sharedIdStr) : <span class="number">0</span>;</div><div class="line">               <span class="keyword">if</span> (userId &gt; <span class="number">0</span>) &#123;</div><div class="line">                   <span class="comment">//如果上次使用的是共享id，则说明上次该app没有独立的id</span></div><div class="line">                   <span class="comment">//所以这次不能直接将该id分配给他，要先将其保存起来以后处理</span></div><div class="line">                   packageSetting = <span class="keyword">new</span> PendingPackage(name.intern(), realName, <span class="keyword">new</span> File(</div><div class="line">                           codePathStr), <span class="keyword">new</span> File(resourcePathStr), legacyNativeLibraryPathStr,</div><div class="line">                           primaryCpuAbiString, secondaryCpuAbiString, cpuAbiOverrideString,</div><div class="line">                           userId, versionCode, pkgFlags, pkgPrivateFlags);</div><div class="line">                   <span class="comment">//...</span></div><div class="line">                   mPendingPackages.add((PendingPackage) packageSetting);</div><div class="line">                  <span class="comment">//...</span></div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">//...</span></div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">//...</span></div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">           <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line">     <span class="comment">//...</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-5-Setttings-addPackageLPw"><a href="#1-5-Setttings-addPackageLPw" class="headerlink" title="1.5 Setttings.addPackageLPw"></a>1.5 Setttings.addPackageLPw</h3><p>为该package分配UID，创建保存package信息的PackageSetting对象。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/Settings.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function">PackageSetting <span class="title">addPackageLPw</span><span class="params">(String name, String realName, File codePath, File resourcePath,</span></span></div><div class="line">        String legacyNativeLibraryPathString, String primaryCpuAbiString, String secondaryCpuAbiString,</div><div class="line">        String cpuAbiOverrideString, <span class="keyword">int</span> uid, <span class="keyword">int</span> vc, <span class="keyword">int</span> pkgFlags, <span class="keyword">int</span> pkgPrivateFlags) &#123;</div><div class="line">    <span class="comment">//每一个app的信息都保存于一个PackageSetting对象中</span></div><div class="line">    PackageSetting p = mPackages.get(name);</div><div class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//该应用已经有对应的PackageSetting对象了，无需再次添加</span></div><div class="line">        <span class="keyword">if</span> (p.appId == uid) &#123;</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        &#125;</div><div class="line">        PackageManagerService.reportSettingsProblem(Log.ERROR,</div><div class="line">                <span class="string">"Adding duplicate package, keeping first: "</span> + name);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//为该app创建一个PackageSetting</span></div><div class="line">    p = <span class="keyword">new</span> PackageSetting(name, realName, codePath, resourcePath,</div><div class="line">            legacyNativeLibraryPathString, primaryCpuAbiString, secondaryCpuAbiString,</div><div class="line">            cpuAbiOverrideString, vc, pkgFlags, pkgPrivateFlags);</div><div class="line">    p.appId = uid;</div><div class="line">    <span class="comment">//在系统中保留值为uid的Linux用户ID，会在下面详解</span></div><div class="line">    <span class="keyword">if</span> (addUserIdLPw(uid, p, name)) &#123;</div><div class="line">        <span class="comment">//mPackages保存创建的app PackageSetting对象</span></div><div class="line">        mPackages.put(name, p);</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p>
<p>在系统中保留指定的UID。这里可以看出，一共可以分配10000个uid给应用程序，小于10000的uid是分配给特权用户的。这些特权用户的uid可以通过共享的形式给其它应用使用。例如，一个想修改系统时间的的应用可以共享”android.uid.system”的特权用户的uid，即在配置文件中将它的android:sharedUserId的属性设置为“android.uid.system”。uid不能重复，但是shareduid是可以共享的。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/Settings.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addUserIdLPw</span><span class="params">(<span class="keyword">int</span> uid, Object obj, Object name)</span> </span>&#123;</div><div class="line">    <span class="comment">//分配的uid不能超过LAST_APPLICATION_UID，19999</span></div><div class="line">    <span class="keyword">if</span> (uid &gt; Process.LAST_APPLICATION_UID) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//分配的uid应该大于等于FIRST_APPLICATION_UID，10000</span></div><div class="line">    <span class="keyword">if</span> (uid &gt;= Process.FIRST_APPLICATION_UID) &#123;</div><div class="line">        <span class="keyword">int</span> N = mUserIds.size();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = uid - Process.FIRST_APPLICATION_UID;</div><div class="line">        <span class="keyword">while</span> (index &gt;= N) &#123;</div><div class="line">            <span class="comment">//将中间没分配的uid先置为空</span></div><div class="line">            mUserIds.add(<span class="keyword">null</span>);</div><div class="line">            N++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mUserIds.get(index) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//该uid重复了，分配失败</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//正式分配uid，所有的uid被mUserIds管理</span></div><div class="line">        mUserIds.set(index, obj);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//这里是特权用户的uid</span></div><div class="line">        <span class="keyword">if</span> (mOtherUserIds.get(uid) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//uid已经分配过，返回失败</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        mOtherUserIds.put(uid, obj);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>到这里，应用的uid已经分配完成。下面回到1.3，看如何读取shareduid。</p>
<h3 id="1-6-Setttings-readSharedUserLPw"><a href="#1-6-Setttings-readSharedUserLPw" class="headerlink" title="1.6 Setttings.readSharedUserLPw"></a>1.6 Setttings.readSharedUserLPw</h3><p>读取共享uid。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/Settings.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readSharedUserLPw</span><span class="params">(XmlPullParser parser)</span> <span class="keyword">throws</span> XmlPullParserException,IOException </span>&#123;</div><div class="line">    String name = <span class="keyword">null</span>;</div><div class="line">    String idStr = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> pkgFlags = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pkgPrivateFlags = <span class="number">0</span>;</div><div class="line">    SharedUserSetting su = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        name = parser.getAttributeValue(<span class="keyword">null</span>, ATTR_NAME);</div><div class="line">        idStr = parser.getAttributeValue(<span class="keyword">null</span>, <span class="string">"userId"</span>);</div><div class="line">        <span class="keyword">int</span> userId = idStr != <span class="keyword">null</span> ? Integer.parseInt(idStr) : <span class="number">0</span>;</div><div class="line">        <span class="comment">//该共享id是系统应用还是用户类型的应用</span></div><div class="line">        <span class="keyword">if</span> (<span class="string">"true"</span>.equals(parser.getAttributeValue(<span class="keyword">null</span>, <span class="string">"system"</span>))) &#123;</div><div class="line">            pkgFlags |= ApplicationInfo.FLAG_SYSTEM;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userId == <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">//...</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//在系统中为该应用申请该userId，见1.7</span></div><div class="line">            <span class="keyword">if</span> ((su = addSharedUserLPw(name.intern(), userId, pkgFlags, pkgPrivateFlags))</div><div class="line">                    == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">//...</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line"> <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//....</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        XmlUtils.skipCurrentTag(parser);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-7-Settings-addSharedUserLPw"><a href="#1-7-Settings-addSharedUserLPw" class="headerlink" title="1.7 Settings.addSharedUserLPw"></a>1.7 Settings.addSharedUserLPw</h3><p>添加共享用户。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/Settings.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function">SharedUserSetting <span class="title">addSharedUserLPw</span><span class="params">(String name, <span class="keyword">int</span> uid, <span class="keyword">int</span> pkgFlags, <span class="keyword">int</span> pkgPrivateFlags)</span> </span>&#123;</div><div class="line">        SharedUserSetting s = mSharedUsers.get(name);</div><div class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (s.userId == uid) &#123;</div><div class="line">                <span class="keyword">return</span> s;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//添加uid和已经添加的不同，则失败返回</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//mSharedUsers中没有该共享用户id，则创建一个SharedUserSetting</span></div><div class="line">        s = <span class="keyword">new</span> SharedUserSetting(name, pkgFlags, pkgPrivateFlags);</div><div class="line">        s.userId = uid;</div><div class="line">        <span class="comment">//在系统中为它分配该uid，重复1.6</span></div><div class="line">        <span class="keyword">if</span> (addUserIdLPw(uid, s, name)) &#123;</div><div class="line">	    <span class="comment">//分配成功，记录下来</span></div><div class="line">            mSharedUsers.put(name, s);</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>   </p>
<p>在1.4中，mPendingPackages保存了一些使用共享用户id的package。现在已经解析完毕共享用户的信息，在1.3 readLPw函数中将会处理这些package了。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/Settings.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">final</span> PendingPackage pp = mPendingPackages.get(i);</div><div class="line">            Object idObj = getUserIdLPr(pp.sharedId);</div><div class="line">            <span class="keyword">if</span> (idObj != <span class="keyword">null</span> &amp;&amp; idObj <span class="keyword">instanceof</span> SharedUserSetting) &#123;</div><div class="line">                <span class="comment">//获得共享用户信息，说明该package使用的共享用户id是有效的，将在下面小节分析</span></div><div class="line">                PackageSetting p = getPackageLPw(pp.name, <span class="keyword">null</span>, pp.realName,</div><div class="line">                        (SharedUserSetting) idObj, pp.codePath, pp.resourcePath,</div><div class="line">                        pp.legacyNativeLibraryPathString, pp.primaryCpuAbiString,</div><div class="line">                        pp.secondaryCpuAbiString, pp.versionCode, pp.pkgFlags, pp.pkgPrivateFlags,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">true</span> <span class="comment">/* add */</span>, <span class="keyword">false</span> <span class="comment">/* allowInstall */</span>);</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//...</span></div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                p.copyFrom(pp);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idObj != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">//该package使用了一个非共享的id</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">//使用的共享id不存在</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mPendingPackages.clear();</div></pre></td></tr></table></figure>   </p>
<h3 id="1-8-PackageManagerService-scanDirLI"><a href="#1-8-PackageManagerService-scanDirLI" class="headerlink" title="1.8 PackageManagerService.scanDirLI"></a>1.8 PackageManagerService.scanDirLI</h3><p>到此，PackageManagerService已经将上一次保存的应用信息恢复完毕，在1.2中接下来需要进一步安装各个目录下的应用。</p>
<p><em>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanDirLI</span><span class="params">(File dir, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> File[] files = dir.listFiles();</div><div class="line">    <span class="comment">//依次访问文件夹中的每个apk文件</span></div><div class="line">    <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPackage = (isApkFile(file) || file.isDirectory())</div><div class="line">                &amp;&amp; !PackageInstallerService.isStageName(file.getName());</div><div class="line">        <span class="keyword">if</span> (!isPackage) &#123;</div><div class="line">            <span class="comment">// Ignore entries which are not packages</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            scanPackageLI(file, parseFlags | PackageParser.PARSE_MUST_BE_APK,</div><div class="line">                    scanFlags, currentTime, <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">            <span class="comment">//删除无效的文件</span></div><div class="line">            <span class="comment">// Delete invalid userdata apps</span></div><div class="line">            <span class="keyword">if</span> ((parseFlags &amp; PackageParser.PARSE_IS_SYSTEM) == <span class="number">0</span> &amp;&amp;</div><div class="line">                    e.error == PackageManager.INSTALL_FAILED_INVALID_APK) &#123;</div><div class="line">                <span class="keyword">if</span> (file.isDirectory()) &#123;</div><div class="line">                    mInstaller.rmPackageDir(file.getAbsolutePath());</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    file.delete();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-9-PackageManagerService-scanPackageLI"><a href="#1-9-PackageManagerService-scanPackageLI" class="headerlink" title="1.9 PackageManagerService.scanPackageLI"></a>1.9 PackageManagerService.scanPackageLI</h3><p><em>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">private</span> PackageParser.<span class="function">Package <span class="title">scanPackageLI</span><span class="params">(File scanFile, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags,</span></span></div><div class="line">           <span class="keyword">long</span> currentTime, UserHandle user) <span class="keyword">throws</span> PackageManagerException &#123;</div><div class="line">       <span class="comment">//...</span></div><div class="line">       PackageParser pp = <span class="keyword">new</span> PackageParser();</div><div class="line">       <span class="comment">//...</span></div><div class="line">       <span class="keyword">final</span> PackageParser.Package pkg;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//解析目标文件</span></div><div class="line">           pkg = pp.parsePackage(scanFile, parseFlags);</div><div class="line">       &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">           <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line">       <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-10-PackageParser-parsePackage"><a href="#1-10-PackageParser-parsePackage" class="headerlink" title="1.10 PackageParser.parsePackage"></a>1.10 PackageParser.parsePackage</h3><p><em>frameworks/base/core/java/android/content/pm/PackageParser.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Package <span class="title">parsePackage</span><span class="params">(File packageFile, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> PackageParserException </span>&#123;</div><div class="line">      <span class="keyword">if</span> (packageFile.isDirectory()) &#123;</div><div class="line">          <span class="comment">//一个目录下是一个应用</span></div><div class="line">          <span class="keyword">return</span> parseClusterPackage(packageFile, flags);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">//一个整体的应用</span></div><div class="line">          <span class="keyword">return</span> parseMonolithicPackage(packageFile, flags);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-11-PackageParser-parseMonolithicPackage"><a href="#1-11-PackageParser-parseMonolithicPackage" class="headerlink" title="1.11 PackageParser.parseMonolithicPackage"></a>1.11 PackageParser.parseMonolithicPackage</h3><p><em>frameworks/base/core/java/android/content/pm/PackageParser.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> Package <span class="title">parseMonolithicPackage</span><span class="params">(File apkFile, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> PackageParserException </span>&#123;</div><div class="line">      <span class="comment">//...</span></div><div class="line">      <span class="keyword">final</span> AssetManager assets = <span class="keyword">new</span> AssetManager();</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">final</span> Package pkg = parseBaseApk(apkFile, assets, flags);</div><div class="line">          pkg.codePath = apkFile.getAbsolutePath();</div><div class="line">          <span class="keyword">return</span> pkg;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          IoUtils.closeQuietly(assets);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-12-PackageParser-parseBaseApk"><a href="#1-12-PackageParser-parseBaseApk" class="headerlink" title="1.12 PackageParser.parseBaseApk"></a>1.12 PackageParser.parseBaseApk</h3><p><em>frameworks/base/core/java/android/content/pm/PackageParser.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Package <span class="title">parseBaseApk</span><span class="params">(File apkFile, AssetManager assets, <span class="keyword">int</span> flags)</span></span></div><div class="line">        <span class="keyword">throws</span> PackageParserException &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="keyword">final</span> String apkPath = apkFile.getAbsolutePath();</div><div class="line">    mArchiveSourcePath = apkFile.getAbsolutePath();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> cookie = loadApkIntoAssetManager(assets, apkPath, flags);</div><div class="line"></div><div class="line">    Resources res = <span class="keyword">null</span>;</div><div class="line">    XmlResourceParser parser = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        res = <span class="keyword">new</span> Resources(assets, mMetrics, <span class="keyword">null</span>);</div><div class="line">        assets.setConfiguration(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                Build.VERSION.RESOURCES_SDK_INT);</div><div class="line">        <span class="comment">//获取AndroidManifest.xml文件</span></div><div class="line">        parser = assets.openXmlResourceParser(cookie, ANDROID_MANIFEST_FILENAME);</div><div class="line"></div><div class="line">        <span class="comment">//解析AndroidManifest.xml文件</span></div><div class="line">        <span class="keyword">final</span> Package pkg = parseBaseApk(res, parser, flags, outError);</div><div class="line">       <span class="comment">//...</span></div><div class="line">        <span class="keyword">return</span> pkg;</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">       <span class="comment">//...</span></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        IoUtils.closeQuietly(parser);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><em>frameworks/base/core/java/android/content/pm/PackageParser.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> Package <span class="title">parseBaseApk</span><span class="params">(Resources res, XmlResourceParser parser, <span class="keyword">int</span> flags,</span></span></div><div class="line">           String[] outError) <span class="keyword">throws</span> XmlPullParserException, IOException &#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">boolean</span> trustedOverlay = (flags &amp; PARSE_TRUSTED_OVERLAY) != <span class="number">0</span>;</div><div class="line"></div><div class="line">       AttributeSet attrs = parser;</div><div class="line"></div><div class="line">       <span class="keyword">final</span> String pkgName;</div><div class="line">       <span class="keyword">final</span> String splitName;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Pair&lt;String, String&gt; packageSplit = parsePackageSplitNames(parser, attrs, flags);</div><div class="line">　　　　　　　　　　　 <span class="comment">//获取package名称</span></div><div class="line">           pkgName = packageSplit.first;</div><div class="line">           splitName = packageSplit.second;</div><div class="line">       &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">           <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">//创建Package对象</span></div><div class="line">       <span class="keyword">final</span> Package pkg = <span class="keyword">new</span> Package(pkgName);</div><div class="line">       <span class="keyword">boolean</span> foundApp = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">       TypedArray sa = res.obtainAttributes(attrs,</div><div class="line">               com.android.internal.R.styleable.AndroidManifest);</div><div class="line">　　　　　　　　<span class="comment">//应用版本信息</span></div><div class="line">       pkg.mVersionCode = pkg.applicationInfo.versionCode = sa.getInteger(</div><div class="line">               com.android.internal.R.styleable.AndroidManifest_versionCode, <span class="number">0</span>);</div><div class="line">       <span class="comment">//...</span></div><div class="line">　　　　　　　　<span class="comment">//用户共享id</span></div><div class="line">       String str = sa.getNonConfigurationString(</div><div class="line">               com.android.internal.R.styleable.AndroidManifest_sharedUserId, <span class="number">0</span>);</div><div class="line">       <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">           String nameError = validateName(str, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">           <span class="keyword">if</span> (nameError != <span class="keyword">null</span> &amp;&amp; !<span class="string">"android"</span>.equals(pkgName)) &#123;</div><div class="line">               outError[<span class="number">0</span>] = <span class="string">"&lt;manifest&gt; specifies bad sharedUserId name \""</span></div><div class="line">                   + str + <span class="string">"\": "</span> + nameError;</div><div class="line">               mParseError = PackageManager.INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//设置共享id后表示要和其它应用共享一个id</span></div><div class="line">           pkg.mSharedUserId = str.intern();</div><div class="line">           pkg.mSharedUserLabel = sa.getResourceId(</div><div class="line">                   com.android.internal.R.styleable.AndroidManifest_sharedUserLabel, <span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">//...</span></div><div class="line"></div><div class="line">       <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</div><div class="line">               &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; outerDepth)) &#123;</div><div class="line">           <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</div><div class="line">               <span class="keyword">continue</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           String tagName = parser.getName();</div><div class="line">           <span class="keyword">if</span> (tagName.equals(<span class="string">"application"</span>)) &#123;</div><div class="line">               <span class="comment">//...</span></div><div class="line">               <span class="comment">//进一步解析application项的内容</span></div><div class="line">               <span class="keyword">if</span> (!parseBaseApplication(pkg, res, parser, attrs, flags, outError)) &#123;</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">               &#125;</div><div class="line">	<span class="comment">//...</span></div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">"uses-permission"</span>)) &#123;</div><div class="line">               <span class="comment">//获取申请的权限</span></div><div class="line">               <span class="keyword">if</span> (!parseUsesPermission(pkg, res, parser, attrs)) &#123;</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">   <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line">       <span class="keyword">return</span> pkg;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br>一个应用可以申请多个权限，应用权限是和用户组ID对应的。应用申请权限就是获得该用户组id的过程。</p>
<h3 id="1-13"><a href="#1-13" class="headerlink" title="1.13"></a>1.13</h3><p><em>framework/base/core/java/android/content/pm/PackageParser.java</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parseBaseApplication</span><span class="params">(Package owner, Resources res,</span></span></div><div class="line">            XmlPullParser parser, AttributeSet attrs, <span class="keyword">int</span> flags, String[] outError)</div><div class="line">        <span class="keyword">throws</span> XmlPullParserException, IOException &#123;</div><div class="line">      </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> innerDepth = parser.getDepth();</div><div class="line">        <span class="keyword">int</span> type;</div><div class="line">        <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</div><div class="line">                &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; innerDepth)) &#123;</div><div class="line">            <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">         </div><div class="line">            String tagName = parser.getName();</div><div class="line">            <span class="comment">//解析出activity</span></div><div class="line">            <span class="keyword">if</span> (tagName.equals(<span class="string">"activity"</span>)) &#123;</div><div class="line">                Activity a = parseActivity(owner, res, parser, attrs, flags, outError, <span class="keyword">false</span>,</div><div class="line">                        owner.baseHardwareAccelerated);</div><div class="line">                <span class="keyword">if</span> (a == <span class="keyword">null</span>) &#123;</div><div class="line">                    mParseError = PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                owner.activities.add(a);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">"receiver"</span>)) &#123;</div><div class="line">                <span class="comment">//解析出receiver</span></div><div class="line">                Activity a = parseActivity(owner, res, parser, attrs, flags, outError, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">if</span> (a == <span class="keyword">null</span>) &#123;</div><div class="line">                    mParseError = PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                owner.receivers.add(a);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">"service"</span>)) &#123;</div><div class="line">                <span class="comment">//解析service</span></div><div class="line">                Service s = parseService(owner, res, parser, attrs, flags, outError);</div><div class="line">                <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">                    mParseError = PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                owner.services.add(s);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tagName.equals(<span class="string">"provider"</span>)) &#123;</div><div class="line">                <span class="comment">//解析provider</span></div><div class="line">                Provider p = parseProvider(owner, res, parser, attrs, flags, outError);</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</div><div class="line">                    mParseError = PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                owner.providers.add(p);</div><div class="line"></div><div class="line">            &#125; </div><div class="line">        &#125;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>   </p>
<h3 id="1-14-下面步骤笼统讲一下"><a href="#1-14-下面步骤笼统讲一下" class="headerlink" title="1.14 下面步骤笼统讲一下"></a>1.14 下面步骤笼统讲一下</h3><p>到这里，PackageManagerService已经解析完成一个apk文件。下面回到1.9 scanPackageLI中，继续下面的工作。1.9步中会调用重载函数scanPackageLI继续解析获得的package。重载函数会调用scanPackageDirtyLI来分析package。</p>
<p>这一步会为package分配id，当然该package可能使用的是一个共享id。首先，每个package信息会被保存在一个PackageSetting对象中，然后将其放到mPackages这个HashMap中。</p>
<p>因为在前面步骤中已经从上一次安装的应用信息中读取了一些package信息，所以需要先在HashMap中确定一下这个新解析的应用是否是已经在mPackages中。如果已经存在，说明这是一个老应用，就直接将PackageSetting 返回。如果不在，则新建一个PackageSetting，下面开始为它分配uid：       </p>
<pre><code>1. 使用共享id。将pkg的uid设置为想要共享的uid。
2. 使用原来的uid。禁用的系统程序使用它原来的uid。
3. 使用新的uid。创建一个新的uid给pkg。
4. 使用first application uid。所有应用使用同一个uid。
</code></pre><p>下面来看一下如何为新的应用分配新uid。mUserIds管理了所有的分配给用户的uid，这里会在规定的范围内找到一个uid分配。 </p>
<p>到此为止，所有的安装了应用都存在PackageManagerService的mPackages中，下面需要依次为这些应用分配权限。在设备<code>/system/etc/permissions/platform.xml</code>文件中，表述了该设备的资源访问权限列表。如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">"android.permission.BLUETOOTH"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">gid</span>=<span class="string">"net_bt"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">permission</span></span></div></pre></td></tr></table></figure>   
<p>gid指明了该资源权限所在的用户组，当然一个权限可以拥有多个用户组。应用获取权限就是加入相应的用户组。Package的申请的权限已经保存到它对应的PackageSetting对象中，如果当前package使用的是共享uid，则它获得权限与它共享的linux用户的资源权限相同。对于有自己独立uid的应用，它会首先获得一组默认的用户权限，这是所有应用都具有的基本权限。然后会一一验证应用申请的权限是否合法，如果合法，则会为其增加该项权限。</p>
<p>现在，应用已经被安装、分配uid和分配权限，接下来需要将这些应用的信息保存下来以备下次使用。保存的位置就是<code>/data/system/packages.xml</code>。注意，在保存uid时，userId和sharedUserId只能有一个。</p>
<p>Android系统就是通过用户id和用户组id来限制应用的资源访问权限，防止破坏其它应用的数据。分配的uid和gid会在创建应用进程时使用，是该进程在特定的用户组下运行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学到的才是自己的，干活都是扯淡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-应用的安装&quot;&gt;&lt;a href=&quot;#1-应用的安装&quot; class=&quot;headerlink&quot; title=&quot;1. 应用的安装&quot;&gt;&lt;/a&gt;1. 应用的安装&lt;/h2&gt;&lt;p&gt;PackageManagerService负责管理应用的安装。在第14章中讲到，SystemService会启动PackageManagerService，那么我们就从SystemService启动PackageManagerService开始分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(16):Android应用线程的消息循环模型</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-16-Android%E5%BA%94%E7%94%A8%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF%E6%A8%A1%E5%9E%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-16-Android应用线程的消息循环模型/</id>
    <published>2017-02-14T06:53:14.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>读书不宜拖沓</p>
</blockquote>
<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><p>Android应用的主线程为ActivityThread，在第（10）章已经讲过，它主要负责处理界面事件，所以开发者应该避免在主线程中处理耗时的任务。为了减轻主线程的负担，开发者应该启用多线程来处理耗时的任务。在Android中可以创建多种线程，有的线程可以有自己的消息循环，有的线程则可以向主线程发送消息来使得界面发生改变。</p>
<p>##1. 主线程的消息循环</p>
<p>应用程序的主线程创建过程如下：ActivityManagerService线程请求Zygote进程创建应用进程；Zygote通过fork来创建一个新进程，新进程将ActivityThread的main作为入口进入Looper循环；Looper会调用静态成员函数prepareMainLooper创建一个Looper对象，并且在该应用进程中，该方法只会调用一次，因为只有一个主线程。<br><a id="more"></a></p>
<h2 id="2-子线程HandlerThread"><a href="#2-子线程HandlerThread" class="headerlink" title="2. 子线程HandlerThread"></a>2. 子线程HandlerThread</h2><p>Android应用中，创建子线程可以和java桌面应用一样，创建一个Thread子类，实现run函数，然后start即可。但是这种方式是没有消息循环的，是一种比较简单的方法。</p>
<p>另一种则是使用Android定制版的Thread–HandlerThread。HanlderThre    ad的实现也很简单，完全可以模仿它实现一个自己的带有消息循环的Thread，或者实现一个集成HandlerThread的子类。</p>
<p><em>frameworks/base/core/java/android/os/HandlerThread.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Handy class for starting a new thread that has a looper. The looper can then be</div><div class="line"> * used to create handler classes. Note that start() must still be called.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mPriority;</div><div class="line">    <span class="keyword">int</span> mTid = -<span class="number">1</span>;</div><div class="line">    Looper mLooper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a HandlerThread.</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@param</span> priority The priority to run the thread at. The value supplied must be from</div><div class="line">     * &#123;<span class="doctag">@link</span> android.os.Process&#125; and not from java.lang.Thread.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name, <span class="keyword">int</span> priority)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">        mPriority = priority;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Call back method that can be explicitly overridden if needed to execute some</div><div class="line">     * setup before Looper loops.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTid = Process.myTid();</div><div class="line">        <span class="comment">//准备了looper</span></div><div class="line">        Looper.prepare();</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">//获得自己的looper</span></div><div class="line">            mLooper = Looper.myLooper();</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line">        Process.setThreadPriority(mPriority);</div><div class="line">        onLooperPrepared();</div><div class="line">        <span class="comment">//进入消息循环</span></div><div class="line">        Looper.loop();</div><div class="line">        mTid = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This method returns the Looper associated with this thread. If this thread not been started</div><div class="line">     * or for any reason is isAlive() returns false, this method will return null. If this thread</div><div class="line">     * has been started, this method will block until the looper has been initialized.</div><div class="line">     * <span class="doctag">@return</span> The looper.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// If the thread has been started, wait until the looper has been created.</span></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mLooper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Quits the handler thread's looper.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Causes the handler thread's looper to terminate without processing any</div><div class="line">     * more messages in the message queue.</div><div class="line">     * &lt;/p&gt;&lt;p&gt;</div><div class="line">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class="line">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class="line">     * &lt;/p&gt;&lt;p class="note"&gt;</div><div class="line">     * Using this method may be unsafe because some messages may not be delivered</div><div class="line">     * before the looper terminates.  Consider using &#123;<span class="doctag">@link</span> #quitSafely&#125; instead to ensure</div><div class="line">     * that all pending work is completed in an orderly manner.</div><div class="line">     * &lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</div><div class="line">     * thread had not yet started running.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #quitSafely</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</div><div class="line">        Looper looper = getLooper();</div><div class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</div><div class="line">            looper.quit();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Quits the handler thread's looper safely.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Causes the handler thread's looper to terminate as soon as all remaining messages</div><div class="line">     * in the message queue that are already due to be delivered have been handled.</div><div class="line">     * Pending delayed messages with due times in the future will not be delivered.</div><div class="line">     * &lt;/p&gt;&lt;p&gt;</div><div class="line">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class="line">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class="line">     * &lt;/p&gt;&lt;p&gt;</div><div class="line">     * If the thread has not been started or has finished (that is if</div><div class="line">     * &#123;<span class="doctag">@link</span> #getLooper&#125; returns null), then false is returned.</div><div class="line">     * Otherwise the looper is asked to quit and true is returned.</div><div class="line">     * &lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</div><div class="line">     * thread had not yet started running.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</div><div class="line">        Looper looper = getLooper();</div><div class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</div><div class="line">            looper.quitSafely();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the identifier of this thread. See Process.myTid().</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThreadId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mTid;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>   </p>
<p>从HandlerThread的源码可以看出它提供了基本的开关功能，使用起来也很简单方便。具体如何使用如下：</p>
<p>首先实例化一个HandlerThread对象，然后启动这个thread。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HandlerThread handleThread = <span class="keyword">new</span> HandlerThread(<span class="string">"Handler Thread"</span>);</div><div class="line"><span class="comment">//然后启动它，因为HandlerThread是Thread的子类，所以启动方法并无差异</span></div><div class="line">handleThread.start();</div></pre></td></tr></table></figure></p>
<p>然后创建一个实现了Runnable接口的类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ThreadTask</span><span class="params">()</span></span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//重写该方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">	   <span class="comment">//你的任务</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个Runnable的实例对象，然后丢给HandleThread来处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ThreadTask threadTask = <span class="keyword">new</span> ThreadTask();</div><div class="line"><span class="comment">//为HandlerThread的Looper创建一个Handler</span></div><div class="line">Handler handler = <span class="keyword">new</span> Handler(handlerThread.getLooper);</div><div class="line"><span class="comment">//通过Handler将任务给HandlerThread来执行</span></div><div class="line">handler.post(threadTask);</div></pre></td></tr></table></figure>
<p>在消息队列处理到该任务时，threadTask的run函数就会被调用执行。</p>
<h2 id="3-异步任务AsyncTask"><a href="#3-异步任务AsyncTask" class="headerlink" title="3. 异步任务AsyncTask"></a>3. 异步任务AsyncTask</h2><p>一个AsyncTask的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//这一步是在主线程中被调用的  </span></div><div class="line">    <span class="comment">//onPreExecute方法用于在执行后台任务前做一些UI操作  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"onPreExecute() called"</span>);  </div><div class="line">        textView.setText(<span class="string">"loading..."</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//这一步是异步线程的主要过程</span></div><div class="line">    <span class="comment">//doInBackground方法内部执行后台任务,不可在此方法内修改UI  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"doInBackground(Params... params) called"</span>);  </div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(baos.toByteArray(), <span class="string">"gb2312"</span>);  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    <span class="comment">//这一步是在主线程中调用</span></div><div class="line">    <span class="comment">//onProgressUpdate方法用于更新进度信息  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progresses)</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"onProgressUpdate(Progress... progresses) called"</span>);  </div><div class="line">        progressBar.setProgress(progresses[<span class="number">0</span>]);  </div><div class="line">        textView.setText(<span class="string">"loading..."</span> + progresses[<span class="number">0</span>] + <span class="string">"%"</span>);  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    <span class="comment">//主线程调用</span></div><div class="line">    <span class="comment">//onPostExecute方法用于在执行完后台任务后更新UI,显示结果  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"onPostExecute(Result result) called"</span>);  </div><div class="line">        textView.setText(result);  </div><div class="line">  </div><div class="line">        execute.setEnabled(<span class="keyword">true</span>);  </div><div class="line">        cancel.setEnabled(<span class="keyword">false</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//主线程调用</span></div><div class="line">    <span class="comment">//onCancelled方法用于在取消执行中的任务时更改UI  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Log.i(TAG, <span class="string">"onCancelled() called"</span>);  </div><div class="line">        textView.setText(<span class="string">"cancelled"</span>);  </div><div class="line">        progressBar.setProgress(<span class="number">0</span>);  </div><div class="line">  </div><div class="line">        execute.setEnabled(<span class="keyword">true</span>);  </div><div class="line">        cancel.setEnabled(<span class="keyword">false</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div></pre></td></tr></table></figure></p>
<p>子线程如果想向主线程发送消息，则需要通过主线程的Handler。这里AsyncTask运行于子线程，但是无需Handler也可以向主线程发送消息。AsyncTask类的具体实现如下。</p>
<p><em>frameworks/base/core/java/android/os/AsyncTask.java</em>  :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="comment">//负责创建线程，放入sPoolWorkQueue中</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//任务队列</span></div><div class="line">    <span class="comment">//如果队列已空，则试图获取任务的线程则会阻塞</span></div><div class="line">    <span class="comment">//如果队列已满，试图向其中加入任务的线程也会阻塞</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</div><div class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</div><div class="line">     * 一个线程池，用来执行sPoolWorkQueue中的任务，下面看其如何执行线程</div><div class="line">     * 这里设置了核心线程数，最大线程数等参数</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">            = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</div><div class="line">                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * An &#123;<span class="doctag">@link</span> Executor&#125; that executes tasks one at a time in serial</div><div class="line">     * order.  This serialization is global to a particular process.</div><div class="line">     * 该线程执行器是顺序执行</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_POST_RESULT = <span class="number">0x1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_POST_PROGRESS = <span class="number">0x2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div><div class="line">    <span class="comment">//创建当前线程的一个handler，如主线程</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WorkerRunnable&lt;Params, Result&gt; mWorker;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FutureTask&lt;Result&gt; mFuture;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>sThreadFactory，sPoolWorkQueue和THREAD_POOL_EXECUTOR都是全局静态变量。在一个App进程中，因此，所有使用AsyncTask的异步线程使用的是同一个线程池，这样可以避免创建多个线程池占用资源。</p>
<p>ThreadPoolExecutor在执行任务时，会根据实际情况选择是否创建线程，具体如下：   </p>
<ol>
<li>线程池中的线程数量小于核心线程数，则会创建新的线程来执行新添加的任务。</li>
<li>如果大于核心线程数，小于最大线程数，则<ul>
<li>sPoolWorkQueue未满，则将新任务保存在队列中</li>
<li>如果已满，则创建一个新的线程来执行新的任务</li>
</ul>
</li>
<li>如果线程池中线程数已经大于/等于最大线程数，如果队列不满，则放入队列；如果已满，则拒绝新任务。</li>
</ol>
<p>InternalHandler类的实例对象sHandler是创建AsyncTask的线程的Handler，这里假设是主线程。</p>
<p><em>frameworks/base/core/java/android/os/AsyncTask.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="comment">//这个函数是运行在主线程中</span></div><div class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                    <span class="comment">// There is only one result</span></div><div class="line">                    <span class="comment">//异步任务执行结束后发送结果，这里处理这个结果</span></div><div class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                    <span class="comment">//异步任务实行过程中，会使用publishProgress来发布中间结果</span></div><div class="line">                    <span class="comment">//这一步就是主线程处理该中间结果</span></div><div class="line">                    result.mTask.onProgressUpdate(result.mData);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>其中result是一个AsyncTaskResult，里面保存了结果信息和其对应的AsyncTask。</p>
<p><em>frameworks/base/core/java/android/os/AsyncTask.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskResult</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> AsyncTask mTask;</div><div class="line">    <span class="keyword">final</span> Data[] mData;</div><div class="line"></div><div class="line">    AsyncTaskResult(AsyncTask task, Data... data) &#123;</div><div class="line">        mTask = task;</div><div class="line">        mData = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>WorkerRunnable类的实例mWorker实现如下，保存了异步任务的输入数据：</p>
<p><em>frameworks/base/core/java/android/os/AsyncTask.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</div><div class="line">    Params[] mParams;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>了解了AsyncTask的成员变量后，下面看一个异步任务创建的完整过程。</p>
<h3 id="3-1-AsyncTask的构造函数"><a href="#3-1-AsyncTask的构造函数" class="headerlink" title="3.1 AsyncTask的构造函数"></a>3.1 AsyncTask的构造函数</h3><p><em>frameworks/base/core/java/android/os/AsyncTask.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates a new asynchronous task. This constructor must be invoked on the UI thread.</div><div class="line"> * 看来AsyncTask只能在主线程中创建啊！</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//这里实现了一个WorkerRunnable的匿名类，同时实例化了一个对象mWorker</span></div><div class="line">    <span class="comment">//这里面封装了所要执行的任务</span></div><div class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">        <span class="comment">//异步线程里执行的任务</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">            <span class="comment">//noinspection unchecked</span></div><div class="line">            <span class="comment">//这里有用户定义的所要执行的任务</span></div><div class="line">            Result result = doInBackground(mParams);</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">            <span class="keyword">return</span> postResult(result);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//又将mWorker封装如FutureTask，同样封装了要执行的任务</span></div><div class="line">    mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                postResultIfNotInvoked(get());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                android.util.Log.w(LOG_TAG, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</div><div class="line">                        e.getCause());</div><div class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure> </p>
<h3 id="3-2-AsyncTask的执行"><a href="#3-2-AsyncTask的执行" class="headerlink" title="3.2 AsyncTask的执行"></a>3.2 AsyncTask的执行</h3><p>在主线程中运行AsyncTask时，需要调用execute来执行该任务，该方法又会调用如下函数来执行任务。这里需要注意的是execute函数是运行在主线程中的，异步任务还没开始。</p>
<p><em>frameworks/base/core/java/android/os/AsyncTask.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MainThread</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></div><div class="line">          Params... params) &#123;</div><div class="line">      <span class="comment">//...</span></div><div class="line">      mStatus = Status.RUNNING;</div><div class="line">      <span class="comment">//在主线程里运行执行前的任务</span></div><div class="line">      onPreExecute();</div><div class="line"></div><div class="line">      mWorker.mParams = params;</div><div class="line">      <span class="comment">//exec是一个SerialExecute</span></div><div class="line">      exec.execute(mFuture);</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>SerialExecutor执行器的执行过程。<br><em>frameworks/base/core/java/android/os/AsyncTask.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">        Runnable mActive;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">            <span class="comment">//把mFuture封装入Runnable，然后放在队列mTasks中</span></div><div class="line">            mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        r.run();</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        <span class="comment">//在结束该任务之前，把队列的下一个任务放入线程池</span></div><div class="line">                        scheduleNext();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//开始执行队列中的第一个任务</span></div><div class="line">                scheduleNext();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//第一个任务放入线程池执行</span></div><div class="line">                THREAD_POOL_EXECUTOR.execute(mActive);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><br>到这里已经将任务交给线程池来启动，用户定义的doInBackground已经开始运行。</p>
<h3 id="3-3-异步线程发送消息"><a href="#3-3-异步线程发送消息" class="headerlink" title="3.3 异步线程发送消息"></a>3.3 异步线程发送消息</h3><p>异步线程可以通过publishProgress发送消息，具体实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WorkerThread</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">            <span class="comment">//获得主线程的handler--sHandler，通过它向主线程发送消息</span></div><div class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>主线程通过sHandler的handleMessage函数来处理该消息，然后调用用户自己实现的onProgressUpdate函数来实现UI的更新。</p>
<h3 id="3-4-异步任务结束"><a href="#3-4-异步任务结束" class="headerlink" title="3.4 异步任务结束"></a>3.4 异步任务结束</h3><p>在异步线程执行完任务后，会调用FutureTask的done函数来处理结束事件。这里主要处理的就是异步任务处理完成后，最后的返回值。最后的结果通过如下函数发送给主线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">       Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">               <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">       message.sendToTarget();</div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>前面已经讲过，主线程会调用handler里的result.mTask.finish(result.mData[0])来处理结果。finish函数实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">            <span class="comment">//这些都是用户可以重写的</span></div><div class="line">            <span class="comment">//来实现自己的功能</span></div><div class="line">            onCancelled(result);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">            onPostExecute(result);</div><div class="line">      &#125;</div><div class="line">      mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>这里主要介绍了android应用里的几种线程的运行机制。</p>
<p>普通java线程Thread是最简单的一种方法，但是比较难管理，与主线程通信主要靠handler。而且，该中线程只能向主线程发消息，而主线程无法向子线程发消息。</p>
<p>HandlerThread则是可以有自己的looper和消息队列，将任务发送入消息队列来实现异步任务的处理，同时还方便管理。主线程和子线程可以通过对方的Handler相互发送消息。</p>
<p>AsyncTask是比较适用于Android应用的一种异步任务实现方式。虽然归根结底还是通过handler来向主进程发消息，但是整个异步任务执行过程的划分和管理更为科学，屏蔽了内部实现的复杂，为用户提供了更为简单实用的接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;读书不宜拖沓&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0. 背景&quot;&gt;&lt;/a&gt;0. 背景&lt;/h2&gt;&lt;p&gt;Android应用的主线程为ActivityThread，在第（10）章已经讲过，它主要负责处理界面事件，所以开发者应该避免在主线程中处理耗时的任务。为了减轻主线程的负担，开发者应该启用多线程来处理耗时的任务。在Android中可以创建多种线程，有的线程可以有自己的消息循环，有的线程则可以向主线程发送消息来使得界面发生改变。&lt;/p&gt;
&lt;p&gt;##1. 主线程的消息循环&lt;/p&gt;
&lt;p&gt;应用程序的主线程创建过程如下：ActivityManagerService线程请求Zygote进程创建应用进程；Zygote通过fork来创建一个新进程，新进程将ActivityThread的main作为入口进入Looper循环；Looper会调用静态成员函数prepareMainLooper创建一个Looper对象，并且在该应用进程中，该方法只会调用一次，因为只有一个主线程。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(15):Android应用进程的启动</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-15-Android%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%AF%E5%8A%A8/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-15-Android应用进程的启动/</id>
    <published>2017-02-14T06:46:42.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>自己开心就好，何必管他人烦恼</p>
</blockquote>
<h2 id="1-应用进程创建"><a href="#1-应用进程创建" class="headerlink" title="1. 应用进程创建"></a>1. 应用进程创建</h2><p>ActivityManagerService负责管理应用进程的创建。这一节会讲述如何从ActivityManagerService申请创建一个app进程，然后从zygote克隆一个进程的过程。</p>
<p><img src="http://img.blog.csdn.net/20161202144012631" alt="这里写图片描述"><br><a id="more"></a></p>
<h3 id="1-1-ActivityManagerService-startProcessLocked"><a href="#1-1-ActivityManagerService-startProcessLocked" class="headerlink" title="1.1 ActivityManagerService.startProcessLocked"></a>1.1 ActivityManagerService.startProcessLocked</h3><p><em>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startProcessLocked</span><span class="params">(ProcessRecord app, String hostingType, String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs)</span> </span>&#123;</div><div class="line"><span class="comment">//...        </span></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//...</span></div><div class="line">           <span class="keyword">int</span> uid = app.uid;</div><div class="line">           <span class="keyword">int</span>[] gids = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">int</span> mountExternal = Zygote.MOUNT_EXTERNAL_NONE;</div><div class="line">           <span class="comment">//...</span></div><div class="line">           app.gids = gids;</div><div class="line">           app.requiredAbi = requiredAbi;</div><div class="line">           app.instructionSet = instructionSet;</div><div class="line"></div><div class="line">           <span class="comment">// Start the process.  It will either succeed and return a result containing</span></div><div class="line">           <span class="comment">// the PID of the new process, or else throw a RuntimeException.</span></div><div class="line">           <span class="keyword">boolean</span> isActivityProcess = (entryPoint == <span class="keyword">null</span>);</div><div class="line">           <span class="comment">//Android应用的进程入口android.app.ActivityThread</span></div><div class="line">           <span class="keyword">if</span> (entryPoint == <span class="keyword">null</span>) entryPoint = <span class="string">"android.app.ActivityThread"</span>;</div><div class="line">    <span class="comment">//启动app进程</span></div><div class="line">           Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class="line">                   app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class="line">                   app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class="line">                   app.info.dataDir, entryPointArgs);</div><div class="line">           <span class="comment">//...</span></div><div class="line">       &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">           <span class="comment">// XXX do better error recovery.</span></div><div class="line">           <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-2-Process-start"><a href="#1-2-Process-start" class="headerlink" title="1.2 Process.start"></a>1.2 Process.start</h3><p>这一步直接交给下一步来处理。</p>
<h3 id="1-3-Process-startViaZygote"><a href="#1-3-Process-startViaZygote" class="headerlink" title="1.3 Process.startViaZygote"></a>1.3 Process.startViaZygote</h3><p><em>frameworks/base/core/java/android/os/Process.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Starts a new process via the zygote mechanism.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> processClass Class name whose static main() to run</div><div class="line"> * <span class="doctag">@param</span> niceName 'nice' process name to appear in ps</div><div class="line"> * <span class="doctag">@param</span> uid a POSIX uid that the new process should setuid() to</div><div class="line"> * <span class="doctag">@param</span> gid a POSIX gid that the new process shuold setgid() to</div><div class="line"> * <span class="doctag">@param</span> gids null-ok; a list of supplementary group IDs that the</div><div class="line"> * new process should setgroup() to.</div><div class="line"> * <span class="doctag">@param</span> debugFlags Additional flags.</div><div class="line"> * <span class="doctag">@param</span> targetSdkVersion The target SDK version for the app.</div><div class="line"> * <span class="doctag">@param</span> seInfo null-ok SELinux information for the new process.</div><div class="line"> * <span class="doctag">@param</span> abi the ABI the process should use.</div><div class="line"> * <span class="doctag">@param</span> instructionSet null-ok the instruction set to use.</div><div class="line"> * <span class="doctag">@param</span> appDataDir null-ok the data directory of the app.</div><div class="line"> * <span class="doctag">@param</span> extraArgs Additional arguments to supply to the zygote process.</div><div class="line"> * <span class="doctag">@return</span> An object that describes the result of the attempt to start the process.</div><div class="line"> * <span class="doctag">@throws</span> ZygoteStartFailedEx if process start failed for any reason</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessStartResult <span class="title">startViaZygote</span><span class="params">(<span class="keyword">final</span> String processClass,</span></span></div><div class="line">                              <span class="keyword">final</span> String niceName,</div><div class="line">                              <span class="keyword">final</span> <span class="keyword">int</span> uid, <span class="keyword">final</span> <span class="keyword">int</span> gid,</div><div class="line">                              <span class="keyword">final</span> <span class="keyword">int</span>[] gids,</div><div class="line">                              <span class="keyword">int</span> debugFlags, <span class="keyword">int</span> mountExternal,</div><div class="line">                              <span class="keyword">int</span> targetSdkVersion,</div><div class="line">                              String seInfo,</div><div class="line">                              String abi,</div><div class="line">                              String instructionSet,</div><div class="line">                              String appDataDir,</div><div class="line">                              String[] extraArgs)</div><div class="line">                              <span class="keyword">throws</span> ZygoteStartFailedEx &#123;</div><div class="line">    <span class="keyword">synchronized</span>(Process.class) &#123;</div><div class="line">        ArrayList&lt;String&gt; argsForZygote = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		</div><div class="line">        <span class="comment">//设置一些基本参数</span></div><div class="line">        <span class="comment">// --runtime-args, --setuid=, --setgid=,</span></div><div class="line">        <span class="comment">// and --setgroups= must go first</span></div><div class="line">        argsForZygote.add(<span class="string">"--runtime-args"</span>);</div><div class="line">        argsForZygote.add(<span class="string">"--setuid="</span> + uid);</div><div class="line">        argsForZygote.add(<span class="string">"--setgid="</span> + gid);</div><div class="line"> <span class="comment">//...</span></div><div class="line">        argsForZygote.add(<span class="string">"--target-sdk-version="</span> + targetSdkVersion);</div><div class="line"></div><div class="line">        <span class="comment">// --setgroups is a comma-separated list</span></div><div class="line">        <span class="keyword">if</span> (gids != <span class="keyword">null</span> &amp;&amp; gids.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            sb.append(<span class="string">"--setgroups="</span>);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> sz = gids.length;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</div><div class="line">                    sb.append(<span class="string">','</span>);</div><div class="line">                &#125;</div><div class="line">                sb.append(gids[i]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            argsForZygote.add(sb.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (niceName != <span class="keyword">null</span>) &#123;</div><div class="line">            argsForZygote.add(<span class="string">"--nice-name="</span> + niceName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (seInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            argsForZygote.add(<span class="string">"--seinfo="</span> + seInfo);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (instructionSet != <span class="keyword">null</span>) &#123;</div><div class="line">            argsForZygote.add(<span class="string">"--instruction-set="</span> + instructionSet);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (appDataDir != <span class="keyword">null</span>) &#123;</div><div class="line">            argsForZygote.add(<span class="string">"--app-data-dir="</span> + appDataDir);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        argsForZygote.add(processClass);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (extraArgs != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String arg : extraArgs) &#123;</div><div class="line">                argsForZygote.add(arg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//继续交给下一步处理，这里通过函数openZygoteSocketIfNeeded和Zygote建立了连接</span></div><div class="line">        <span class="keyword">return</span> zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数openZygoteSocketIfNeeded会在zygote地址上建立一个socket连接，然后创建一个input stream和output stream。</p>
<h3 id="1-4-Process-zygoteSendArgsAndGetResult"><a href="#1-4-Process-zygoteSendArgsAndGetResult" class="headerlink" title="1.4 Process.zygoteSendArgsAndGetResult"></a>1.4 Process.zygoteSendArgsAndGetResult</h3><p><em>frameworks/base/core/java/android/os/Process.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sends an argument list to the zygote process, which starts a new child</div><div class="line"> * and returns the child's pid. Please note: the present implementation</div><div class="line"> * replaces newlines in the argument list with spaces.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@throws</span> ZygoteStartFailedEx if process start failed for any reason</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ProcessStartResult <span class="title">zygoteSendArgsAndGetResult</span><span class="params">(</span></span></div><div class="line">        ZygoteState zygoteState, ArrayList&lt;String&gt; args)</div><div class="line">        <span class="keyword">throws</span> ZygoteStartFailedEx &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * See com.android.internal.os.ZygoteInit.readArgumentList()</div><div class="line">         * Presently the wire format to the zygote process is:</div><div class="line">         * a) a count of arguments (argc, in essence)</div><div class="line">         * b) a number of newline-separated argument strings equal to count</div><div class="line">         *</div><div class="line">         * After the zygote process reads these it will write the pid of</div><div class="line">         * the child or -1 on failure, followed by boolean to</div><div class="line">         * indicate whether a wrapper process was used.</div><div class="line">         */</div><div class="line">        <span class="keyword">final</span> BufferedWriter writer = zygoteState.writer;</div><div class="line">        <span class="keyword">final</span> DataInputStream inputStream = zygoteState.inputStream;</div><div class="line"> <span class="comment">//直接用已经建立好的input stream</span></div><div class="line">        writer.write(Integer.toString(args.size()));</div><div class="line">        writer.newLine();</div><div class="line">        <span class="comment">//依次写入每个参数</span></div><div class="line">        <span class="keyword">int</span> sz = args.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</div><div class="line">            String arg = args.get(i);</div><div class="line">            <span class="keyword">if</span> (arg.indexOf(<span class="string">'\n'</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ZygoteStartFailedEx(</div><div class="line">                        <span class="string">"embedded newlines not allowed"</span>);</div><div class="line">            &#125;</div><div class="line">            writer.write(arg);</div><div class="line">            writer.newLine();</div><div class="line">        &#125;</div><div class="line">        writer.flush();</div><div class="line"> <span class="comment">//获取创建进程的结果，如果进程pid小于0，则说明没有创建成功</span></div><div class="line">        <span class="comment">// Should there be a timeout on this?</span></div><div class="line">        ProcessStartResult result = <span class="keyword">new</span> ProcessStartResult();</div><div class="line">        result.pid = inputStream.readInt();</div><div class="line">        <span class="keyword">if</span> (result.pid &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ZygoteStartFailedEx(<span class="string">"fork() failed"</span>);</div><div class="line">        &#125;</div><div class="line">        result.usingWrapper = inputStream.readBoolean();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">        zygoteState.close();</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZygoteStartFailedEx(ex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###1.5 ZygoteInit.runSelectLoop<br>ActivityManagerService通过socket将参数传递给zygote进程后，创建app进程的任务就交给zygote继续实现了。让我们再次回到zygote的循环中。</p>
<p><em>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</em> ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runSelectLoop</span><span class="params">(String abiList)</span> <span class="keyword">throws</span> MethodAndArgsCaller </span>&#123;</div><div class="line">    ArrayList&lt;FileDescriptor&gt; fds = <span class="keyword">new</span> ArrayList&lt;FileDescriptor&gt;();</div><div class="line">    ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> ArrayList&lt;ZygoteConnection&gt;();</div><div class="line"></div><div class="line">    fds.add(sServerSocket.getFileDescriptor());</div><div class="line">    peers.add(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        StructPollfd[] pollFds = <span class="keyword">new</span> StructPollfd[fds.size()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pollFds.length; ++i) &#123;</div><div class="line">            pollFds[i] = <span class="keyword">new</span> StructPollfd();</div><div class="line">            pollFds[i].fd = fds.get(i);</div><div class="line">            pollFds[i].events = (<span class="keyword">short</span>) POLLIN;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Os.poll(pollFds, -<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"poll failed"</span>, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pollFds.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">            <span class="keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//ActivityManagerService和我建立连接</span></div><div class="line">                ZygoteConnection newPeer = acceptCommandPeer(abiList);</div><div class="line">                peers.add(newPeer);</div><div class="line">                fds.add(newPeer.getFileDesciptor());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//处理ActivityManagerService发送的请求</span></div><div class="line">                <span class="keyword">boolean</span> done = peers.get(i).runOnce();</div><div class="line">                <span class="keyword">if</span> (done) &#123;</div><div class="line">                    peers.remove(i);</div><div class="line">                    fds.remove(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-6-ZygoteConnection-runOnce"><a href="#1-6-ZygoteConnection-runOnce" class="headerlink" title="1.6 ZygoteConnection.runOnce"></a>1.6 ZygoteConnection.runOnce</h3><p><em>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Reads one start command from the command socket. If successful,</div><div class="line"> * a child is forked and a &#123;<span class="doctag">@link</span> ZygoteInit.MethodAndArgsCaller&#125;</div><div class="line"> * exception is thrown in that child while in the parent process,</div><div class="line"> * the method returns normally. On failure, the child is not</div><div class="line"> * spawned and messages are printed to the log and stderr. Returns</div><div class="line"> * a boolean status value indicating whether an end-of-file on the command</div><div class="line"> * socket has been encountered.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> false if command socket should continue to be read from, or</div><div class="line"> * true if an end-of-file has been encountered.</div><div class="line"> * <span class="doctag">@throws</span> ZygoteInit.MethodAndArgsCaller trampoline to invoke main()</div><div class="line"> * method in child process</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">runOnce</span><span class="params">()</span> <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</div><div class="line"></div><div class="line">    String args[];</div><div class="line">    Arguments parsedArgs = <span class="keyword">null</span>;</div><div class="line">    FileDescriptor[] descriptors;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"> <span class="comment">//读取传入的参数</span></div><div class="line">        args = readArgumentList();</div><div class="line">        descriptors = mSocket.getAncillaryFileDescriptors();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">      <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// EOF reached.</span></div><div class="line">        closeSocket();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** the stderr of the most recent request, if avail */</span></div><div class="line">    PrintStream newStderr = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (descriptors != <span class="keyword">null</span> &amp;&amp; descriptors.length &gt;= <span class="number">3</span>) &#123;</div><div class="line">        newStderr = <span class="keyword">new</span> PrintStream(</div><div class="line">                <span class="keyword">new</span> FileOutputStream(descriptors[<span class="number">2</span>]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> pid = -<span class="number">1</span>;</div><div class="line">    FileDescriptor childPipeFd = <span class="keyword">null</span>;</div><div class="line">    FileDescriptor serverPipeFd = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="comment">//fork一个进程</span></div><div class="line">        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</div><div class="line">                parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,</div><div class="line">                parsedArgs.niceName, fdsToClose, parsedArgs.instructionSet,</div><div class="line">                parsedArgs.appDataDir);</div><div class="line">    &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</div><div class="line">     <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// in child</span></div><div class="line">            IoUtils.closeQuietly(serverPipeFd);</div><div class="line">            serverPipeFd = <span class="keyword">null</span>;</div><div class="line">            <span class="comment">//在子进程中进一步处理</span></div><div class="line">            handleChildProc(parsedArgs, descriptors, childPipeFd, newStderr);</div><div class="line">            <span class="comment">// should never get here, the child is expected to either</span></div><div class="line">            <span class="comment">// throw ZygoteInit.MethodAndArgsCaller or exec().</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// in parent...pid of &lt; 0 means failure</span></div><div class="line">            IoUtils.closeQuietly(childPipeFd);</div><div class="line">            childPipeFd = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> handleParentProc(pid, descriptors, serverPipeFd, parsedArgs);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        IoUtils.closeQuietly(childPipeFd);</div><div class="line">        IoUtils.closeQuietly(serverPipeFd);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-7-ZygoteConnection-handleChildProc"><a href="#1-7-ZygoteConnection-handleChildProc" class="headerlink" title="1.7 ZygoteConnection.handleChildProc"></a>1.7 ZygoteConnection.handleChildProc</h3><p><em>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Handles post-fork setup of child proc, closing sockets as appropriate,</div><div class="line">    * reopen stdio as appropriate, and ultimately throwing MethodAndArgsCaller</div><div class="line">    * if successful or returning if failed.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> parsedArgs non-null; zygote args</div><div class="line">    * <span class="doctag">@param</span> descriptors null-ok; new file descriptors for stdio if available.</div><div class="line">    * <span class="doctag">@param</span> pipeFd null-ok; pipe for communication back to Zygote.</div><div class="line">    * <span class="doctag">@param</span> newStderr null-ok; stream to use for stderr until stdio</div><div class="line">    * is reopened.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@throws</span> ZygoteInit.MethodAndArgsCaller on success to</div><div class="line">    * trampoline to code that invokes static main.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleChildProc</span><span class="params">(Arguments parsedArgs,</span></span></div><div class="line">           FileDescriptor[] descriptors, FileDescriptor pipeFd, PrintStream newStderr)</div><div class="line">           <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller &#123;</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * By the time we get here, the native code has closed the two actual Zygote</div><div class="line">        * socket connections, and substituted /dev/null in their place.  The LocalSocket</div><div class="line">        * objects still need to be closed properly.</div><div class="line">        */</div><div class="line"></div><div class="line">       closeSocket();</div><div class="line">       ZygoteInit.closeServerSocket();</div><div class="line"></div><div class="line">       </div><div class="line"></div><div class="line">       <span class="keyword">if</span> (parsedArgs.niceName != <span class="keyword">null</span>) &#123;</div><div class="line">           Process.setArgV0(parsedArgs.niceName);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// End of the postFork event.</span></div><div class="line"><span class="comment">//...</span></div><div class="line">       <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="keyword">null</span>) &#123;</div><div class="line">           WrapperInit.execApplication(parsedArgs.invokeWith,</div><div class="line">                   parsedArgs.niceName, parsedArgs.targetSdkVersion,</div><div class="line">                   VMRuntime.getCurrentInstructionSet(),</div><div class="line">                   pipeFd, parsedArgs.remainingArgs);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">//继续初始化进程</span></div><div class="line">           RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,</div><div class="line">                   parsedArgs.remainingArgs, <span class="keyword">null</span> <span class="comment">/* classLoader */</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-8-RuntimeInit-zygoteInit"><a href="#1-8-RuntimeInit-zygoteInit" class="headerlink" title="1.8 RuntimeInit.zygoteInit"></a>1.8 RuntimeInit.zygoteInit</h3><p>这里开始调用android.app.ActivityThread的main函数。</p>
<p><em>frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">zygoteInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></div><div class="line">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller &#123;</div><div class="line">    <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"RuntimeInit: Starting application from zygote"</span>);</div><div class="line"></div><div class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"RuntimeInit"</span>);</div><div class="line">    redirectLogStreams();</div><div class="line"></div><div class="line">    commonInit();</div><div class="line">    <span class="comment">//启动Binder线程池，将在下面详细分析native部分</span></div><div class="line">    nativeZygoteInit();</div><div class="line">    <span class="comment">//这里调用的不再是system的main函数了，而是ActivityThread的main函数，将在下面章节分析</span></div><div class="line">    applicationInit(targetSdkVersion, argv, classLoader);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>到这里一个Android app的进程就已经创建好了。</p>
<h2 id="2-Binder线程池的启动"><a href="#2-Binder线程池的启动" class="headerlink" title="2. Binder线程池的启动"></a>2. Binder线程池的启动</h2><p>App进程创建过程中会建立一个Binder线程池，用来处理进程间的Binder通信。</p>
<p><img src="http://img.blog.csdn.net/20161202144038070" alt="这里写图片描述"></p>
<h3 id="2-1-RuntimeInit-nativeZygoteInit"><a href="#2-1-RuntimeInit-nativeZygoteInit" class="headerlink" title="2.1 RuntimeInit.nativeZygoteInit"></a>2.1 RuntimeInit.nativeZygoteInit</h3><p><em>frameworks/base/core/jni/AndroidRuntime.cpp</em> :</p>
<p>这里直接调用了一个AndroidRuntime全局对象gCurRuntime的onZygoteInit函数。这个全局对象是在zygote进程中创建了，这里是通过复制zygote的进程获得的该对象。</p>
<h3 id="2-2-AppRuntime-onZygoteInit"><a href="#2-2-AppRuntime-onZygoteInit" class="headerlink" title="2.2 AppRuntime.onZygoteInit"></a>2.2 AppRuntime.onZygoteInit</h3><p><em>frameworks/base/cmds/app_main.cpp</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">virtual <span class="keyword">void</span> <span class="title">onZygoteInit</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      sp&lt;ProcessState&gt; proc = ProcessState::self();</div><div class="line">      ALOGV(<span class="string">"App process: starting thread pool.\n"</span>);</div><div class="line">      proc-&gt;startThreadPool();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-3-ProcessState-startThreadPool"><a href="#2-3-ProcessState-startThreadPool" class="headerlink" title="2.3 ProcessState.startThreadPool"></a>2.3 ProcessState.startThreadPool</h3><p>启动Binder线程池线程， app进程从而具有进程间binder通信的能力。<br><em>frameworks/native/libs/binder/PorcessState.cpp</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ProcessState::startThreadPool()</div><div class="line">&#123;</div><div class="line">    <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</div><div class="line">    <span class="keyword">if</span> (!mThreadPoolStarted) &#123;</div><div class="line">        mThreadPoolStarted = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//启动一个Binder线程池的线程，从而可以支持Binder进程间通信了</span></div><div class="line">        spawnPooledThread(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-App进程消息循环的创建"><a href="#3-App进程消息循环的创建" class="headerlink" title="3. App进程消息循环的创建"></a>3. App进程消息循环的创建</h2><p>在1.8中，RuntimeInit调用函数applicationInit来启动ActivityThread的main函数。<br><img src="http://img.blog.csdn.net/20161202144053195" alt="这里写图片描述"></p>
<h3 id="3-1-RuntimeInit-applicationInit"><a href="#3-1-RuntimeInit-applicationInit" class="headerlink" title="3.1 RuntimeInit.applicationInit"></a>3.1 RuntimeInit.applicationInit</h3><p>设置了heap的目标使用率，然后调用了下一步的静态函数。</p>
<h3 id="3-2-RuntimeInit-invokeStaticMain"><a href="#3-2-RuntimeInit-invokeStaticMain" class="headerlink" title="3.2 RuntimeInit.invokeStaticMain"></a>3.2 RuntimeInit.invokeStaticMain</h3><p>这一步终于开始从这个创建的新进程中调用ActivityThread的main函数了。不过调用的方式有点奇怪，这里是通过抛出一个异常的形式，来清空当前栈中的积压的函数，直到回退到ZygoteInit.main函数中。因为该app进程是从zygote进程中fork出来的，所以栈的内容也是相同的，所以可以会退到ZygoteInit.main函数。</p>
<p><em>frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Invokes a static "main(argv[]) method on class "className".</div><div class="line">    * Converts various failing exceptions into RuntimeExceptions, with</div><div class="line">    * the assumption that they will then cause the VM instance to exit.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> className Fully-qualified class name</div><div class="line">    * <span class="doctag">@param</span> argv Argument vector for main()</div><div class="line">    * <span class="doctag">@param</span> classLoader the classLoader to load &#123;<span class="doctag">@className</span>&#125; with</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeStaticMain</span><span class="params">(String className, String[] argv, ClassLoader classLoader)</span></span></div><div class="line">           <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller &#123;</div><div class="line">       Class&lt;?&gt; cl;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//通过类名加载该类，这里就是ActivityThread类</span></div><div class="line">           cl = Class.forName(className, <span class="keyword">true</span>, classLoader);</div><div class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">         <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Method m;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//获得ActivityThread的main方法</span></div><div class="line">           m = cl.getMethod(<span class="string">"main"</span>, <span class="keyword">new</span> Class[] &#123; String[].class &#125;);</div><div class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</div><div class="line">          <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line"><span class="comment">//...</span></div><div class="line">       <span class="comment">/*</span></div><div class="line">        * This throw gets caught in ZygoteInit.main(), which responds</div><div class="line">        * by invoking the exception's run() method. This arrangement</div><div class="line">        * clears up all the stack frames that were required in setting</div><div class="line">        * up the process.</div><div class="line">        * 这里通过抛出异常来回到stack中的某一个函数的做法还真是头一次见</div><div class="line">        */</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> ZygoteInit.MethodAndArgsCaller(m, argv);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-3-ZygoteInit-main"><a href="#3-3-ZygoteInit-main" class="headerlink" title="3.3 ZygoteInit.main"></a>3.3 ZygoteInit.main</h3><p>在Zygote进程里，会进入无限的循环。但是，在app进程里，进入这个循环是没有作用，所以需要跳出循环，继续前进。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        Log.i(TAG, <span class="string">"Accepting command socket connections"</span>);</div><div class="line">        <span class="comment">//Zygote进程会一直在循环中</span></div><div class="line">        <span class="comment">//虽然app进程在这个循环里创建，但是它需要跳出这个循环，才能继续执行</span></div><div class="line">        runSelectLoop(abiList);</div><div class="line"></div><div class="line">        closeServerSocket();</div><div class="line">    &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</div><div class="line">        <span class="comment">//所以app进程就跳到了这里</span></div><div class="line">        caller.run();</div><div class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Zygote died with exception"</span>, ex);</div><div class="line">        closeServerSocket();</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-4-MethodAndArgsCaller-run"><a href="#3-4-MethodAndArgsCaller-run" class="headerlink" title="3.4 MethodAndArgsCaller.run"></a>3.4 MethodAndArgsCaller.run</h3><p>这里就是回到ZygoteInit.main里调用ActivityThread的main函数，目的就是清理准备app进程中形成的调用堆栈。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         <span class="comment">//就是调用了ActivityThread的main函数</span></div><div class="line">         mMethod.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; mArgs &#125;);</div><div class="line">     &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</div><div class="line">      <span class="comment">//...</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ActivityThread-main"><a href="#ActivityThread-main" class="headerlink" title="ActivityThread.main"></a>ActivityThread.main</h3><p>这里就是回到我们熟悉的剧情了，不再赘述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自己开心就好，何必管他人烦恼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-应用进程创建&quot;&gt;&lt;a href=&quot;#1-应用进程创建&quot; class=&quot;headerlink&quot; title=&quot;1. 应用进程创建&quot;&gt;&lt;/a&gt;1. 应用进程创建&lt;/h2&gt;&lt;p&gt;ActivityManagerService负责管理应用进程的创建。这一节会讲述如何从ActivityManagerService申请创建一个app进程，然后从zygote克隆一个进程的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161202144012631&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(14):Zygote和System进程的启动</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-14-Zygote%E5%92%8CSystem%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%AF%E5%8A%A8/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-14-Zygote和System进程的启动/</id>
    <published>2017-02-14T06:33:16.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>再不学习我们就老了</p>
</blockquote>
<h2 id="0-Zygote有什么卵用？"><a href="#0-Zygote有什么卵用？" class="headerlink" title="0. Zygote有什么卵用？"></a>0. Zygote有什么卵用？</h2><p>Zygote是进程孵化器，Android系统中其他服务进程都是拷贝于它。Zygote在设计模式中对应于<code>prototype</code>，这样做的好处是可以通过拷贝Zygote来快速创建一个进程。</p>
<h2 id="1-Zygote脚本启动"><a href="#1-Zygote脚本启动" class="headerlink" title="1. Zygote脚本启动"></a>1. Zygote脚本启动</h2><p>在开机时，init进程会调用如下脚本启动进程。</p>
<p><em>system/core/rootdir/init.zygote32_64.rc</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">service zygote /system/bin/app_process32 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">main</span></span></div><div class="line">    <span class="title">socket</span> <span class="title">zygote</span> <span class="title">stream</span> 660 <span class="title">root</span> <span class="title">system</span></div><div class="line">    <span class="title">onrestart</span> <span class="title">write</span> /<span class="title">sys</span>/<span class="title">android_power</span>/<span class="title">request_state</span> <span class="title">wake</span></div><div class="line">    <span class="title">onrestart</span> <span class="title">write</span> /<span class="title">sys</span>/<span class="title">power</span>/<span class="title">state</span> <span class="title">on</span></div><div class="line">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">media</span></div><div class="line">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">netd</span></div><div class="line">    <span class="title">writepid</span> /<span class="title">dev</span>/<span class="title">cpuset</span>/<span class="title">foreground</span>/<span class="title">tasks</span></div></pre></td></tr></table></figure></p>
<p><code>service</code>表明该进程是作为一个服务来启动的，<code>--start-system-server</code>指明了该进程启动后，需要启动system服务。该进程对应的端口权限660，名字为zygote，其它进程可以通过该端口和它进行通信。</p>
<a id="more"></a>
<h3 id="1-1-init进程创建新的app-process"><a href="#1-1-init进程创建新的app-process" class="headerlink" title="1.1 init进程创建新的app_process"></a>1.1 init进程创建新的app_process</h3><p>在init进程中，启动service进程的过程如下。</p>
<p><em>system/core/init/init.cpp</em> :<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">service_start</span><span class="params">(<span class="keyword">struct</span> service *svc, <span class="keyword">const</span> <span class="keyword">char</span> *dynamic_args)</span></span></div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="title">NOTICE</span><span class="params">(<span class="string">"Starting service '%s'...\n"</span>, svc-&gt;name)</span>;</div><div class="line">    <span class="comment">//创建新进程</span></div><div class="line">    <span class="keyword">pid_t</span> pid = fork();</div><div class="line">    <span class="comment">//在新建的进程中</span></div><div class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">struct</span> socketinfo *si;</div><div class="line">        <span class="keyword">struct</span> svcenvinfo *ei;</div><div class="line">        <span class="keyword">char</span> tmp[<span class="number">32</span>];</div><div class="line">        <span class="keyword">int</span> fd, sz;</div><div class="line">        <span class="comment">//依次创建service中的socket</span></div><div class="line">        <span class="keyword">for</span> (si = svc-&gt;sockets; si; si = si-&gt;next) &#123;</div><div class="line">            <span class="keyword">int</span> socket_type = (</div><div class="line">                    !<span class="built_in">strcmp</span>(si-&gt;type, <span class="string">"stream"</span>) ? SOCK_STREAM :</div><div class="line">                        (!<span class="built_in">strcmp</span>(si-&gt;type, <span class="string">"dgram"</span>) ? SOCK_DGRAM : SOCK_SEQPACKET));</div><div class="line">            <span class="comment">//创建socket</span></div><div class="line">            <span class="keyword">int</span> s = create_socket(si-&gt;name, socket_type,</div><div class="line">                                  si-&gt;perm, si-&gt;uid, si-&gt;gid, si-&gt;socketcon ?: scon);</div><div class="line">            <span class="keyword">if</span> (s &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//发布socket</span></div><div class="line">                publish_socket(si-&gt;name, s);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">	<span class="comment">//...</span></div><div class="line">	<span class="comment">//将参数拷贝进svc结构体中</span></div><div class="line">        <span class="keyword">if</span> (!dynamic_args) &#123;</div><div class="line">            <span class="comment">//没有参数的情况</span></div><div class="line">            <span class="comment">//svc-&gt;args[0]对应于/system/bin/app_process32</span></div><div class="line">            <span class="comment">//下一步会加载该程序，并且传入参数</span></div><div class="line">            <span class="keyword">if</span> (execve(svc-&gt;args[<span class="number">0</span>], (<span class="keyword">char</span>**) svc-&gt;args, (<span class="keyword">char</span>**) ENV) &lt; <span class="number">0</span>) &#123;</div><div class="line">                ERROR(<span class="string">"cannot execve('%s'): %s\n"</span>, svc-&gt;args[<span class="number">0</span>], strerror(errno));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">char</span> *arg_ptrs[INIT_PARSER_MAXARGS+<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> arg_idx = svc-&gt;nargs;</div><div class="line">            <span class="keyword">char</span> *tmp = strdup(dynamic_args);</div><div class="line">            <span class="keyword">char</span> *next = tmp;</div><div class="line">            <span class="keyword">char</span> *bword;</div><div class="line"></div><div class="line">            <span class="comment">/* Copy the static arguments */</span></div><div class="line">            <span class="built_in">memcpy</span>(arg_ptrs, svc-&gt;args, (svc-&gt;nargs * <span class="keyword">sizeof</span>(<span class="keyword">char</span> *)));</div><div class="line"></div><div class="line">            <span class="keyword">while</span>((bword = strsep(&amp;next, <span class="string">" "</span>))) &#123;</div><div class="line">                arg_ptrs[arg_idx++] = bword;</div><div class="line">                <span class="keyword">if</span> (arg_idx == INIT_PARSER_MAXARGS)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            arg_ptrs[arg_idx] = <span class="literal">NULL</span>;</div><div class="line">            execve(svc-&gt;args[<span class="number">0</span>], (<span class="keyword">char</span>**) arg_ptrs, (<span class="keyword">char</span>**) ENV);</div><div class="line">        &#125;</div><div class="line">        _exit(<span class="number">127</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-2-socket创建和发布"><a href="#1-2-socket创建和发布" class="headerlink" title="1.2 socket创建和发布"></a>1.2 socket创建和发布</h3><p>下面主要分析一下<code>create_socket</code>和<code>publish_socket</code>两个函数，来说明zygote的socket如何创建的。</p>
<p>创建socket。<br><em>system/core/init/util.cpp</em> :<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * create_socket - creates a Unix domain socket in ANDROID_SOCKET_DIR</div><div class="line"> * ("/dev/socket") as dictated in init.rc. This socket is inherited by the</div><div class="line"> * daemon. We communicate the file descriptor's value via the environment</div><div class="line"> * variable ANDROID_SOCKET_ENV_PREFIX&lt;name&gt; ("ANDROID_SOCKET_foo").</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_socket</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> type, <span class="keyword">mode_t</span> perm, <span class="keyword">uid_t</span> uid,</span></span></div><div class="line">                  <span class="keyword">gid_t</span> gid, <span class="keyword">const</span> <span class="keyword">char</span> *socketcon)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> sockaddr_un addr;</div><div class="line">    <span class="keyword">int</span> fd, ret;</div><div class="line">    <span class="keyword">char</span> *filecon;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (socketcon)</div><div class="line">        setsockcreatecon(socketcon);</div><div class="line">    <span class="comment">//创建一个socket</span></div><div class="line">    fd = socket(PF_UNIX, type, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        ERROR(<span class="string">"Failed to open socket '%s': %s\n"</span>, name, strerror(errno));</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (socketcon)</div><div class="line">        setsockcreatecon(<span class="literal">NULL</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//创建一个socket地址addr</span></div><div class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span> , <span class="keyword">sizeof</span>(addr));</div><div class="line">    addr.sun_family = AF_UNIX;</div><div class="line">    <span class="comment">//设置地址的文件位置，这里就是/dev/socket/zygote</span></div><div class="line">    <span class="built_in">snprintf</span>(addr.sun_path, <span class="keyword">sizeof</span>(addr.sun_path), ANDROID_SOCKET_DI<span class="string">R"/%s"</span>,</div><div class="line">             name);</div><div class="line"></div><div class="line">    ret = unlink(addr.sun_path);</div><div class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span> &amp;&amp; errno != ENOENT) &#123;</div><div class="line">        ERROR(<span class="string">"Failed to unlink old socket '%s': %s\n"</span>, name, strerror(errno));</div><div class="line">        <span class="keyword">goto</span> out_close;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    filecon = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span> (sehandle) &#123;</div><div class="line">        ret = selabel_lookup(sehandle, &amp;filecon, addr.sun_path, S_IFSOCK);</div><div class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>)</div><div class="line">            setfscreatecon(filecon);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">//将想要存储socket的文件地址addr和socket文件描述符fd绑定起来</span></div><div class="line">    ret = bind(fd, (<span class="keyword">struct</span> sockaddr *) &amp;addr, <span class="keyword">sizeof</span> (addr));</div><div class="line">    <span class="keyword">if</span> (ret) &#123;</div><div class="line">        ERROR(<span class="string">"Failed to bind socket '%s': %s\n"</span>, name, strerror(errno));</div><div class="line">        <span class="keyword">goto</span> out_unlink;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setfscreatecon(<span class="literal">NULL</span>);</div><div class="line">    freecon(filecon);</div><div class="line"></div><div class="line">    <span class="comment">//设置用户组root system</span></div><div class="line">    chown(addr.sun_path, uid, gid);</div><div class="line">    <span class="comment">//设置权限660</span></div><div class="line">    chmod(addr.sun_path, perm);</div><div class="line"></div><div class="line">    INFO(<span class="string">"Created socket '%s' with mode '%o', user '%d', group '%d'\n"</span>,</div><div class="line">         addr.sun_path, perm, uid, gid);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line"></div><div class="line">out_unlink:</div><div class="line">    unlink(addr.sun_path);</div><div class="line">out_close:</div><div class="line">    close(fd);</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发布socket。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publish_socket</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> fd)</span></span></div><div class="line">&#123;    </div><div class="line">    <span class="comment">//前缀为ANDROID_SOCKET_</span></div><div class="line">    <span class="keyword">char</span> key[<span class="number">64</span>] = ANDROID_SOCKET_ENV_PREFIX;</div><div class="line">    <span class="keyword">char</span> val[<span class="number">64</span>];</div><div class="line">    <span class="comment">//拼接出key</span></div><div class="line">    strlcpy(key + <span class="keyword">sizeof</span>(ANDROID_SOCKET_ENV_PREFIX) - <span class="number">1</span>,</div><div class="line">            name,</div><div class="line">            <span class="keyword">sizeof</span>(key) - <span class="keyword">sizeof</span>(ANDROID_SOCKET_ENV_PREFIX));</div><div class="line">    <span class="comment">//将fd写入val</span></div><div class="line">    <span class="built_in">snprintf</span>(val, <span class="keyword">sizeof</span>(val), <span class="string">"%d"</span>, fd);</div><div class="line">    <span class="comment">//将key，value写入环境变量中，以便其他进程访问</span></div><div class="line">    add_environment(key, val);</div><div class="line"></div><div class="line">    <span class="comment">/* make sure we don't close-on-exec */</span></div><div class="line">    fcntl(fd, F_SETFD, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-Zygote进程启动过程"><a href="#2-Zygote进程启动过程" class="headerlink" title="2. Zygote进程启动过程"></a>2. Zygote进程启动过程</h2><p>Zygote 进程的启动从app_process的main函数开始。</p>
<p><img src="http://img.blog.csdn.net/20161129224041801" alt="这里写图片描述"></p>
<h3 id="2-1-app-process-main"><a href="#2-1-app-process-main" class="headerlink" title="2.1 app_process.main"></a>2.1 app_process.main</h3><p>判断需要启动的进程的种类。</p>
<p><em>frameworks/base/cmds/app_process/app_main.cpp</em> :<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char* const argv[])</div><div class="line">&#123;</div><div class="line">    //针对旧内核做的处理...</div><div class="line"></div><div class="line">    //创建AppRuntime对象</div><div class="line">    AppRuntime runtime(argv[0], computeArgBlockSize(argc, argv));</div><div class="line">    // Process command line arguments</div><div class="line">    // ignore argv[0]</div><div class="line">    argc--;</div><div class="line">    argv++;</div><div class="line"></div><div class="line">    // Everything up to '--' or first non '-' arg goes to the vm.</div><div class="line">    //</div><div class="line">    // The first argument after the VM args is the "parent dir", which</div><div class="line">    // is currently unused.</div><div class="line">    //</div><div class="line">    // After the parent dir, we expect one or more the following internal</div><div class="line">    // arguments :</div><div class="line">    // 不同的进程类型</div><div class="line">    // --zygote : Start in zygote mode</div><div class="line">    // --start-system-server : Start the system server.</div><div class="line">    // --application : Start in application (stand alone, non zygote) mode.</div><div class="line">    // --nice-name : The nice name for this process.</div><div class="line">    //</div><div class="line">    // For non zygote starts, these arguments will be followed by</div><div class="line">    // the main class name. All remaining arguments are passed to</div><div class="line">    // the main method of this class.</div><div class="line">    //</div><div class="line">    // For zygote starts, all remaining arguments are passed to the zygote.</div><div class="line">    // main function.</div><div class="line">    //</div><div class="line">    // Note that we must copy argument string values since we will rewrite the</div><div class="line">    // entire argument block when we apply the nice name to argv0.</div><div class="line"></div><div class="line">    int i;</div><div class="line">    for (i = 0; i &lt; argc; i++) &#123;</div><div class="line">        if (argv[i][0] != '-') &#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        if (argv[i][1] == '-' &amp;&amp; argv[i][2] == 0) &#123;</div><div class="line">            ++i; // Skip --.</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        runtime.addOption(strdup(argv[i]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Parse runtime arguments.  Stop at first unrecognized option.</div><div class="line">    bool zygote = false;</div><div class="line">    bool startSystemServer = false;</div><div class="line">    bool application = false;</div><div class="line">    String8 niceName;</div><div class="line">    String8 className;</div><div class="line">   </div><div class="line">    //判断需要创建何种类型的进程</div><div class="line">    ++i;  // Skip unused "parent dir" argument.</div><div class="line">    while (i &lt; argc) &#123;</div><div class="line">        const char* arg = argv[i++];</div><div class="line">        if (strcmp(arg, "--zygote") == 0) &#123;</div><div class="line">	    //这里是Zygote进程</div><div class="line">            zygote = true;</div><div class="line">            niceName = ZYGOTE_NICE_NAME;</div><div class="line">        &#125; else if (strcmp(arg, "--start-system-server") == 0) &#123;</div><div class="line">            //同时需要开启SystemServer</div><div class="line">            startSystemServer = true;</div><div class="line">        &#125; else if (strcmp(arg, "--application") == 0) &#123;</div><div class="line">            application = true;</div><div class="line">        &#125; else if (strncmp(arg, "--nice-name=", 12) == 0) &#123;</div><div class="line">            niceName.setTo(arg + 12);</div><div class="line">        &#125; else if (strncmp(arg, "--", 2) != 0) &#123;</div><div class="line">            className.setTo(arg);</div><div class="line">            break;</div><div class="line">        &#125; else &#123;</div><div class="line">            --i;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Vector&lt;String8&gt; args;</div><div class="line">    if (!className.isEmpty()) &#123;</div><div class="line">        // We're not in zygote mode, the only argument we need to pass</div><div class="line">        // to RuntimeInit is the application argument.</div><div class="line">        //</div><div class="line">        // The Remainder of args get passed to startup class main(). Make</div><div class="line">        // copies of them before we overwrite them with the process name.</div><div class="line">        args.add(application ? String8("application") : String8("tool"));</div><div class="line">        runtime.setClassNameAndArgs(className, argc - i, argv + i);</div><div class="line">    &#125; else &#123;</div><div class="line">        // We're in zygote mode.</div><div class="line">        maybeCreateDalvikCache();</div><div class="line">	</div><div class="line">        if (startSystemServer) &#123;</div><div class="line">	    //作为参数传递给Zygote进程</div><div class="line">            args.add(String8("start-system-server"));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">	//... </div><div class="line">	</div><div class="line">        String8 abiFlag("--abi-list=");</div><div class="line">        abiFlag.append(prop);</div><div class="line">        args.add(abiFlag);</div><div class="line"></div><div class="line">        // In zygote mode, pass all remaining arguments to the zygote</div><div class="line">        // main() method.</div><div class="line">        for (; i &lt; argc; ++i) &#123;</div><div class="line">            args.add(String8(argv[i]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (!niceName.isEmpty()) &#123;</div><div class="line">	//这里进程名字就是zygote</div><div class="line">        runtime.setArgv0(niceName.string());</div><div class="line">        set_process_name(niceName.string());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (zygote) &#123;</div><div class="line">        //启动Zygote，接下来会主要分析start函数</div><div class="line">        runtime.start("com.android.internal.os.ZygoteInit", args, zygote);</div><div class="line">    &#125; else if (className) &#123;</div><div class="line">        runtime.start("com.android.internal.os.RuntimeInit", args, zygote);</div><div class="line">    &#125; else &#123;</div><div class="line">        fprintf(stderr, "Error: no class name or --zygote supplied.\n");</div><div class="line">        app_usage();</div><div class="line">        LOG_ALWAYS_FATAL("app_process: no class name or --zygote supplied.");</div><div class="line">        return 10;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-AndroidRuntime-start"><a href="#2-2-AndroidRuntime-start" class="headerlink" title="2.2 AndroidRuntime.start"></a>2.2 AndroidRuntime.start</h3><p>创建虚拟机，运行java函数。</p>
<p><em>frameworks/base/core/jni/AndroidRuntime.cpp</em> :<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Start the Android runtime.  This involves starting the virtual machine</div><div class="line"> * and calling the "static void main(String[] args)" method in the class</div><div class="line"> * named by "className".</div><div class="line"> *</div><div class="line"> * Passes the main function two arguments, the class name and the specified</div><div class="line"> * options string.</div><div class="line"> */</div><div class="line"><span class="keyword">void</span> AndroidRuntime::start(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> Vector&lt;String8&gt;&amp; options, <span class="keyword">bool</span> zygote)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//创建一个虚拟机实例</span></div><div class="line">    <span class="comment">/* start the virtual machine */</span></div><div class="line">    JniInvocation jni_invocation;</div><div class="line">    jni_invocation.Init(<span class="literal">NULL</span>);</div><div class="line">    JNIEnv* env;</div><div class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env, zygote) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    onVmCreated(env);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Register android functions.</div><div class="line">     */</div><div class="line">    <span class="comment">//注册JNI方法</span></div><div class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"Unable to register all android natives\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 将参数转化为java对象</div><div class="line">     * We want to call main() with a String array with arguments in it.</div><div class="line">     * At present we have two arguments, the class name and an option string.</div><div class="line">     * Create an array to hold them.</div><div class="line">     */</div><div class="line">    jclass stringClass;</div><div class="line">    jobjectArray strArray;</div><div class="line">    jstring classNameStr;</div><div class="line"></div><div class="line">    stringClass = env-&gt;FindClass(<span class="string">"java/lang/String"</span>);</div><div class="line">    assert(stringClass != <span class="literal">NULL</span>);</div><div class="line">    strArray = env-&gt;NewObjectArray(options.size() + <span class="number">1</span>, stringClass, <span class="literal">NULL</span>);</div><div class="line">    assert(strArray != <span class="literal">NULL</span>);</div><div class="line">    classNameStr = env-&gt;NewStringUTF(className);</div><div class="line">    assert(classNameStr != <span class="literal">NULL</span>);</div><div class="line">    env-&gt;SetObjectArrayElement(strArray, <span class="number">0</span>, classNameStr);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; options.size(); ++i) &#123;</div><div class="line">        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).<span class="built_in">string</span>());</div><div class="line">        assert(optionsStr != <span class="literal">NULL</span>);</div><div class="line">        env-&gt;SetObjectArrayElement(strArray, i + <span class="number">1</span>, optionsStr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Start VM.  This thread becomes the main thread of the VM, and will</div><div class="line">     * not return until the VM exits.</div><div class="line">     */</div><div class="line">    <span class="keyword">char</span>* slashClassName = toSlashClassName(className);</div><div class="line">    jclass startClass = env-&gt;FindClass(slashClassName);</div><div class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"JavaVM unable to locate class '%s'\n"</span>, slashClassName);</div><div class="line">        <span class="comment">/* keep going */</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//找到main函数</span></div><div class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">"main"</span>,</div><div class="line">            <span class="string">"([Ljava/lang/String;)V"</span>);</div><div class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</div><div class="line">            ALOGE(<span class="string">"JavaVM unable to find main() in '%s'\n"</span>, className);</div><div class="line">            <span class="comment">/* keep going */</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//调用com.android.internal.os.ZygoteInit类的main函数</span></div><div class="line">            <span class="comment">//参数放在strArray里</span></div><div class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">            <span class="keyword">if</span> (env-&gt;ExceptionCheck())</div><div class="line">                threadExitUncaughtException(env);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">free</span>(slashClassName);</div><div class="line"></div><div class="line">    ALOGD(<span class="string">"Shutting down VM\n"</span>);</div><div class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DetachCurrentThread() != JNI_OK)</div><div class="line">        ALOGW(<span class="string">"Warning: unable to detach main thread\n"</span>);</div><div class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DestroyJavaVM() != <span class="number">0</span>)</div><div class="line">        ALOGW(<span class="string">"Warning: VM did not shut down cleanly\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-3-ZygoteInit-main"><a href="#2-3-ZygoteInit-main" class="headerlink" title="2.3 ZygoteInit.main"></a>2.3 ZygoteInit.main</h3><p><em>frameworks/base/core/java/com/android/internal/os/Zygoteinit.java</em> :<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//解析参数</span></div><div class="line">           RuntimeInit.enableDdms();</div><div class="line">           <span class="comment">// Start profiling the zygote initialization.</span></div><div class="line">           SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">           boolean startSystemServer = <span class="literal">false</span>;</div><div class="line">           String socketName = <span class="string">"zygote"</span>;</div><div class="line">           String abiList = null;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argv.length; i++) &#123;</div><div class="line">               <span class="keyword">if</span> (<span class="string">"start-system-server"</span>.equals(argv[i])) &#123;</div><div class="line">                   startSystemServer = <span class="literal">true</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;</div><div class="line">                   abiList = argv[i].substring(ABI_LIST_ARG.length());</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</div><div class="line">                   socketName = argv[i].substring(SOCKET_NAME_ARG.length());</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unknown command line argument: "</span> + argv[i]);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (abiList == null) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No ABI list supplied."</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//注册Socket，创建一个socket服务端</span></div><div class="line">           registerZygoteSocket(socketName);</div><div class="line">           <span class="comment">//...</span></div><div class="line"></div><div class="line">           <span class="comment">// Do an initial gc to clean up after startup</span></div><div class="line">           gcAndFinalize();</div><div class="line"></div><div class="line">           <span class="comment">// Disable tracing so that forked processes do not inherit stale tracing tags from</span></div><div class="line">           <span class="comment">// Zygote.</span></div><div class="line">           Trace.setTracingEnabled(<span class="literal">false</span>);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (startSystemServer) &#123;</div><div class="line">               <span class="comment">//启动系统服务</span></div><div class="line">               startSystemServer(abiList, socketName);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           Log.i(TAG, <span class="string">"Accepting command socket connections"</span>);</div><div class="line">           <span class="comment">//循环等待其他服务向zygote socket发送请求</span></div><div class="line">           runSelectLoop(abiList);</div><div class="line"></div><div class="line">           closeServerSocket();</div><div class="line">       &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</div><div class="line">           caller.run();</div><div class="line">       &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">           Log.e(TAG, <span class="string">"Zygote died with exception"</span>, ex);</div><div class="line">           closeServerSocket();</div><div class="line">           <span class="keyword">throw</span> ex;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-4-ZygoteInit-registerZygoteSocket"><a href="#2-4-ZygoteInit-registerZygoteSocket" class="headerlink" title="2.4 ZygoteInit.registerZygoteSocket"></a>2.4 ZygoteInit.registerZygoteSocket</h3><p>创建了zygote socket的server端。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Registers a server socket for zygote command connections</div><div class="line">  *</div><div class="line">  * <span class="doctag">@throws</span> RuntimeException when open fails</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerZygoteSocket</span><span class="params">(String socketName)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (sServerSocket == <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">int</span> fileDesc;</div><div class="line">         <span class="comment">//拼接出socket名称ANDROID_SOCKET_zygote</span></div><div class="line">         <span class="keyword">final</span> String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;</div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">             <span class="comment">//环境变量中在上面存储了该key下对应的value</span></div><div class="line">             String env = System.getenv(fullSocketName);</div><div class="line">             <span class="comment">//获取socket的文件描述符</span></div><div class="line">             fileDesc = Integer.parseInt(env);</div><div class="line">         &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(fullSocketName + <span class="string">" unset or invalid"</span>, ex);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">             FileDescriptor fd = <span class="keyword">new</span> FileDescriptor();</div><div class="line">             fd.setInt$(fileDesc);</div><div class="line">             <span class="comment">//创建socket server，并且保留在一个静态变量sServerSocket中</span></div><div class="line">             sServerSocket = <span class="keyword">new</span> LocalServerSocket(fd);</div><div class="line">         &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                     <span class="string">"Error binding to local socket '"</span> + fileDesc + <span class="string">"'"</span>, ex);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="2-5-ZygoteInit-startSystemServer"><a href="#2-5-ZygoteInit-startSystemServer" class="headerlink" title="2.5  ZygoteInit.startSystemServer"></a>2.5  ZygoteInit.startSystemServer</h3><p>从zygote中fork一个新的进程来单独处理system server。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">    * Prepare the arguments and fork for the system server process.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startSystemServer</span><span class="params">(String abiList, String socketName)</span></span></div><div class="line">           <span class="keyword">throws</span> MethodAndArgsCaller, RuntimeException &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">       <span class="comment">/* Hardcoded command line to start the system server */</span></div><div class="line">       String args[] = &#123;</div><div class="line">           <span class="string">"--setuid=1000"</span>,</div><div class="line">           <span class="string">"--setgid=1000"</span>,</div><div class="line">           <span class="string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1032,3001,3002,3003,3006,3007"</span>,</div><div class="line">           <span class="string">"--capabilities="</span> + capabilities + <span class="string">","</span> + capabilities,</div><div class="line">           <span class="string">"--nice-name=system_server"</span>,</div><div class="line">           <span class="string">"--runtime-args"</span>,</div><div class="line">           <span class="string">"com.android.server.SystemServer"</span>, <span class="comment">//这就是System server的类名</span></div><div class="line">       &#125;;</div><div class="line">       ZygoteConnection.Arguments parsedArgs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> pid;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           parsedArgs = <span class="keyword">new</span> ZygoteConnection.Arguments(args);</div><div class="line">           ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</div><div class="line">           ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</div><div class="line">           <span class="comment">//从zygote中fork出一个进程</span></div><div class="line">           <span class="comment">/* Request to fork the system server process */</span></div><div class="line">           pid = Zygote.forkSystemServer(</div><div class="line">                   parsedArgs.uid, parsedArgs.gid,</div><div class="line">                   parsedArgs.gids,</div><div class="line">                   parsedArgs.debugFlags,</div><div class="line">                   <span class="keyword">null</span>,</div><div class="line">                   parsedArgs.permittedCapabilities,</div><div class="line">                   parsedArgs.effectiveCapabilities);</div><div class="line">       &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">/* For child process */</span></div><div class="line">       <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</div><div class="line">               waitForSecondaryZygote(socketName);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//在子进程中启动System server,在第3节中详细分析</span></div><div class="line">           handleSystemServerProcess(parsedArgs);</div><div class="line">       &#125;</div><div class="line"><span class="comment">//父进程返回</span></div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="2-6-ZygoteInit-runSelectLoop"><a href="#2-6-ZygoteInit-runSelectLoop" class="headerlink" title="2.6 ZygoteInit.runSelectLoop"></a>2.6 ZygoteInit.runSelectLoop</h3><p>Zygote启动无限循环，等待请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">    * Runs the zygote process's select loop. Accepts new connections as</div><div class="line">    * they happen, and reads commands from connections one spawn-request's</div><div class="line">    * worth at a time.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@throws</span> MethodAndArgsCaller in a child process when a main() should</div><div class="line">    * be executed.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runSelectLoop</span><span class="params">(String abiList)</span> <span class="keyword">throws</span> MethodAndArgsCaller </span>&#123;</div><div class="line">       ArrayList&lt;FileDescriptor&gt; fds = <span class="keyword">new</span> ArrayList&lt;FileDescriptor&gt;();</div><div class="line">       ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> ArrayList&lt;ZygoteConnection&gt;();</div><div class="line"><span class="comment">//一个zygote socket文件描述符</span></div><div class="line">       fds.add(sServerSocket.getFileDescriptor());</div><div class="line">       peers.add(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    <span class="comment">//将现有的fd先存入pollFds</span></div><div class="line">           StructPollfd[] pollFds = <span class="keyword">new</span> StructPollfd[fds.size()];</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pollFds.length; ++i) &#123;</div><div class="line">               pollFds[i] = <span class="keyword">new</span> StructPollfd();</div><div class="line">               pollFds[i].fd = fds.get(i);</div><div class="line">               pollFds[i].events = (<span class="keyword">short</span>) POLLIN;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               Os.poll(pollFds, -<span class="number">1</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"poll failed"</span>, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//一次循环最多让一个peer接入，但是可能会处理多个peer的请求</span></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = pollFds.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">               <span class="keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</div><div class="line">                   <span class="comment">//是否有请求写入，没有就继续</span></div><div class="line">                   <span class="keyword">continue</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                   <span class="comment">//有人在zygote上写入请求，获得该peer</span></div><div class="line">                   <span class="comment">//这一步只是peer和zygote建立连接，peer还未发送具体请求</span></div><div class="line">                   ZygoteConnection newPeer = acceptCommandPeer(abiList);</div><div class="line">                   peers.add(newPeer);</div><div class="line">                   <span class="comment">//将其加入文件描述符fds中，该peer会向其对应的fd写入请求</span></div><div class="line">                   <span class="comment">//这一步不会处理，因为该peer没有在pollFds中</span></div><div class="line">                   fds.add(newPeer.getFileDesciptor());</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="comment">//有peer向其fd写入请求,这里开始处理这个请求，处理完毕后删除</span></div><div class="line">                   <span class="keyword">boolean</span> done = peers.get(i).runOnce();</div><div class="line">                   <span class="keyword">if</span> (done) &#123;</div><div class="line">                       peers.remove(i);</div><div class="line">                       fds.remove(i);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-System进程的启动"><a href="#3-System进程的启动" class="headerlink" title="3. System进程的启动"></a>3. System进程的启动</h2><p>接着2.5，Zygote fork出一个新的进程来启动System server。接下来看在这个新进程中如何启动的System server。</p>
<p><img src="http://img.blog.csdn.net/20161129224216177" alt="这里写图片描述"></p>
<h3 id="3-1-ZygoteInit-handleSystemServerProcess"><a href="#3-1-ZygoteInit-handleSystemServerProcess" class="headerlink" title="3.1 ZygoteInit.handleSystemServerProcess"></a>3.1 ZygoteInit.handleSystemServerProcess</h3><p><em>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">    * Finish remaining work for the newly forked system server process.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleSystemServerProcess</span><span class="params">(</span></span></div><div class="line">           ZygoteConnection.Arguments parsedArgs)</div><div class="line">           <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller &#123;</div><div class="line">       <span class="comment">//因为fork了Zygote的进程，所以会复制它的socket</span></div><div class="line">       <span class="comment">//SystemServer用不着这个socket，先关了再说</span></div><div class="line">       closeServerSocket();</div><div class="line"></div><div class="line">       <span class="comment">// set umask to 0077 so new files and directories will default to owner-only permissions.</span></div><div class="line">       Os.umask(S_IRWXG | S_IRWXO);</div><div class="line"></div><div class="line"><span class="comment">//设置进程名</span></div><div class="line">       <span class="keyword">if</span> (parsedArgs.niceName != <span class="keyword">null</span>) &#123;</div><div class="line">           Process.setArgV0(parsedArgs.niceName);</div><div class="line">       &#125;</div><div class="line"></div><div class="line"><span class="comment">//获取system server类的路径</span></div><div class="line">       <span class="keyword">final</span> String systemServerClasspath = Os.getenv(<span class="string">"SYSTEMSERVERCLASSPATH"</span>);</div><div class="line">       <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</div><div class="line">           performSystemServerDexOpt(systemServerClasspath);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="keyword">null</span>) &#123;</div><div class="line">           String[] args = parsedArgs.remainingArgs;</div><div class="line">           <span class="comment">// If we have a non-null system server class path, we'll have to duplicate the</span></div><div class="line">           <span class="comment">// existing arguments and append the classpath to it. ART will handle the classpath</span></div><div class="line">           <span class="comment">// correctly when we exec a new process.</span></div><div class="line">           <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</div><div class="line">               String[] amendedArgs = <span class="keyword">new</span> String[args.length + <span class="number">2</span>];</div><div class="line">               amendedArgs[<span class="number">0</span>] = <span class="string">"-cp"</span>;</div><div class="line">               amendedArgs[<span class="number">1</span>] = systemServerClasspath;</div><div class="line">               System.arraycopy(parsedArgs.remainingArgs, <span class="number">0</span>, amendedArgs, <span class="number">2</span>, parsedArgs.remainingArgs.length);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           WrapperInit.execApplication(parsedArgs.invokeWith,</div><div class="line">                   parsedArgs.niceName, parsedArgs.targetSdkVersion,</div><div class="line">                   VMRuntime.getCurrentInstructionSet(), <span class="keyword">null</span>, args);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           ClassLoader cl = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</div><div class="line">               cl = <span class="keyword">new</span> PathClassLoader(systemServerClasspath, ClassLoader.getSystemClassLoader());</div><div class="line">               Thread.currentThread().setContextClassLoader(cl);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">/*</span></div><div class="line">            * 进一步启动System server</div><div class="line">            * Pass the remaining arguments to SystemServer.</div><div class="line">            */</div><div class="line">           RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">/* should never reach here */</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-2-RuntimeInit-zygoteInit"><a href="#3-2-RuntimeInit-zygoteInit" class="headerlink" title="3.2 RuntimeInit.zygoteInit"></a>3.2 RuntimeInit.zygoteInit</h3><p><em>frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The main function called when started through the zygote process. This</div><div class="line"> * could be unified with main(), if the native code in nativeFinishInit()</div><div class="line"> * were rationalized with Zygote startup.&lt;p&gt;</div><div class="line"> *</div><div class="line"> * Current recognized args:</div><div class="line"> * &lt;ul&gt;</div><div class="line"> *   &lt;li&gt; &lt;code&gt; [--] &amp;lt;start class name&amp;gt;  &amp;lt;args&amp;gt;</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> targetSdkVersion target SDK version</div><div class="line"> * <span class="doctag">@param</span> argv arg strings</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">zygoteInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></div><div class="line">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller &#123;</div><div class="line">    <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"RuntimeInit: Starting application from zygote"</span>);</div><div class="line"></div><div class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"RuntimeInit"</span>);</div><div class="line">    redirectLogStreams();</div><div class="line">    </div><div class="line">    <span class="comment">//做一些基本的初始化，比如时间、log等</span></div><div class="line">    commonInit();</div><div class="line">    <span class="comment">//进入native部分，将来章节再讲</span></div><div class="line">    nativeZygoteInit();</div><div class="line">    <span class="comment">//进一步启动system</span></div><div class="line">    applicationInit(targetSdkVersion, argv, classLoader);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-3-RuntimeInit-applicationInit"><a href="#3-3-RuntimeInit-applicationInit" class="headerlink" title="3.3 RuntimeInit.applicationInit"></a>3.3 RuntimeInit.applicationInit</h3><p>这一步开始调用SystemServer的main函数。</p>
<p><em>frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applicationInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></div><div class="line">           <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller &#123;</div><div class="line">       <span class="comment">// If the application calls System.exit(), terminate the process</span></div><div class="line">       <span class="comment">// immediately without running any shutdown hooks.  It is not possible to</span></div><div class="line">       <span class="comment">// shutdown an Android application gracefully.  Among other things, the</span></div><div class="line">       <span class="comment">// Android runtime shutdown hooks close the Binder driver, which can cause</span></div><div class="line">       <span class="comment">// leftover running threads to crash before the process actually exits.</span></div><div class="line">       nativeSetExitWithoutCleanup(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">       <span class="comment">// We want to be fairly aggressive about heap utilization, to avoid</span></div><div class="line">       <span class="comment">// holding on to a lot of memory that isn't needed.</span></div><div class="line">       VMRuntime.getRuntime().setTargetHeapUtilization(<span class="number">0.75f</span>);</div><div class="line">       VMRuntime.getRuntime().setTargetSdkVersion(targetSdkVersion);</div><div class="line"></div><div class="line">       <span class="keyword">final</span> Arguments args;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           args = <span class="keyword">new</span> Arguments(argv);</div><div class="line">       &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">           Slog.e(TAG, ex.getMessage());</div><div class="line">           <span class="comment">// let the process exit</span></div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// The end of of the RuntimeInit event (see #zygoteInit).</span></div><div class="line">       Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line"></div><div class="line"><span class="comment">//启动需要启动的类的main函数，这里就是com.android.server.SystemServer</span></div><div class="line">       <span class="comment">// Remaining arguments are passed to the start class's static main</span></div><div class="line">       invokeStaticMain(args.startClass, args.startArgs, classLoader);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-4-SystemServer-main"><a href="#3-4-SystemServer-main" class="headerlink" title="3.4 SystemServer.main"></a>3.4 SystemServer.main</h3><p>这里直接new了一个SystemServer，然后调用它的run函数。</p>
<h3 id="3-5-SystemService-run"><a href="#3-5-SystemService-run" class="headerlink" title="3.5 SystemService.run"></a>3.5 SystemService.run</h3><p>这一步开始依次启动各种service。</p>
<p><em>frameworks/base/services/java/com/android/server/SystemServer.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//...</span></div><div class="line">       <span class="comment">//设置系统时间、语言等</span></div><div class="line">       <span class="keyword">if</span> (!SystemProperties.get(<span class="string">"persist.sys.language"</span>).isEmpty()) &#123;</div><div class="line">           <span class="keyword">final</span> String languageTag = Locale.getDefault().toLanguageTag();</div><div class="line"></div><div class="line">           SystemProperties.set(<span class="string">"persist.sys.locale"</span>, languageTag);</div><div class="line">           SystemProperties.set(<span class="string">"persist.sys.language"</span>, <span class="string">""</span>);</div><div class="line">           SystemProperties.set(<span class="string">"persist.sys.country"</span>, <span class="string">""</span>);</div><div class="line">           SystemProperties.set(<span class="string">"persist.sys.localevar"</span>, <span class="string">""</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line"><span class="comment">//... </span></div><div class="line"><span class="comment">//一些虚拟机内存，堆栈的设置</span></div><div class="line"> </div><div class="line"><span class="comment">//该线程就是主线程</span></div><div class="line">       <span class="comment">// Prepare the main looper thread (this thread).</span></div><div class="line">       android.os.Process.setThreadPriority(</div><div class="line">               android.os.Process.THREAD_PRIORITY_FOREGROUND);</div><div class="line">       android.os.Process.setCanSelfBackground(<span class="keyword">false</span>);</div><div class="line">       Looper.prepareMainLooper();</div><div class="line"></div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//创建SystemServiceManager</span></div><div class="line">       <span class="comment">// Create the system service manager.</span></div><div class="line">       mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</div><div class="line">       LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</div><div class="line"></div><div class="line">       <span class="comment">// Start services.</span></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//开始依次启动各种服务，下一节详细解释</span></div><div class="line">           startBootstrapServices();</div><div class="line">           startCoreServices();</div><div class="line">           startOtherServices();</div><div class="line">       &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">         <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line">       <span class="comment">//永远的循环..</span></div><div class="line">       <span class="comment">// Loop forever.</span></div><div class="line">       Looper.loop();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-6-各种service启动"><a href="#3-6-各种service启动" class="headerlink" title="3.6 各种service启动"></a>3.6 各种service启动</h3><h4 id="startBootstrapServices"><a href="#startBootstrapServices" class="headerlink" title="startBootstrapServices"></a>startBootstrapServices</h4><p>这里面启动的服务有：<code>Installer</code>，<code>ActivityManagerService</code>，<code>PowerManagerService</code>，<code>LightsService</code>，<code>DisplayManagerService</code>，<code>PackageManagerService</code>，<code>SensorService</code>（非具体）。</p>
<p>这些service有的会创建自己独立的ServiceThread，是HandlerThread的子类，它们有着自己的looper循环。<code>startService</code>函数将所有的service的启动过程统一管理，抽象为注册、启动两步骤。</p>
<p><em>frameworks/base/services/java/com/android/server/SystemServer.java</em> :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Starts the small tangle of critical services that are needed to get</div><div class="line">     * the system off the ground.  These services have complex mutual dependencies</div><div class="line">     * which is why we initialize them all in one place here.  Unless your service</div><div class="line">     * is also entwined in these dependencies, it should be initialized in one of</div><div class="line">     * the other functions.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Wait for installd to finish starting up so that it has a chance to</span></div><div class="line">        <span class="comment">// create critical directories such as /data/user with the appropriate</span></div><div class="line">        <span class="comment">// permissions.  We need this to complete before we initialize other services.</span></div><div class="line">        Installer installer = mSystemServiceManager.startService(Installer.class);</div><div class="line"></div><div class="line">        <span class="comment">// Activity manager runs the show.</span></div><div class="line">        mActivityManagerService = mSystemServiceManager.startService(</div><div class="line">                ActivityManagerService.Lifecycle.class).getService();</div><div class="line">        mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</div><div class="line">        mActivityManagerService.setInstaller(installer);</div><div class="line"></div><div class="line">        <span class="comment">// Power manager needs to be started early because other services need it.</span></div><div class="line">        <span class="comment">// Native daemons may be watching for it to be registered so it must be ready</span></div><div class="line">        <span class="comment">// to handle incoming binder calls immediately (including being able to verify</span></div><div class="line">        <span class="comment">// the permissions for those calls).</span></div><div class="line">        mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</div><div class="line"></div><div class="line">        <span class="comment">// Now that the power manager has been started, let the activity manager</span></div><div class="line">        <span class="comment">// initialize power management features.</span></div><div class="line">        mActivityManagerService.initPowerManagement();</div><div class="line"></div><div class="line">        <span class="comment">// Manages LEDs and display backlight so we need it to bring up the display.</span></div><div class="line">        mSystemServiceManager.startService(LightsService.class);</div><div class="line"></div><div class="line">        <span class="comment">// Display manager is needed to provide display metrics before package manager</span></div><div class="line">        <span class="comment">// starts up.</span></div><div class="line">        mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class);</div><div class="line"></div><div class="line">        <span class="comment">// We need the default display before we can initialize the package manager.</span></div><div class="line">        mSystemServiceManager.startBootPhase(SystemService.PHASE_WAIT_FOR_DEFAULT_DISPLAY);</div><div class="line"></div><div class="line">        <span class="comment">// Only run "core" apps if we're encrypting the device.</span></div><div class="line">        String cryptState = SystemProperties.get(<span class="string">"vold.decrypt"</span>);</div><div class="line">        <span class="keyword">if</span> (ENCRYPTING_STATE.equals(cryptState)) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Detected encryption in progress - only parsing core apps"</span>);</div><div class="line">            mOnlyCore = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPTED_STATE.equals(cryptState)) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Device encrypted - only parsing core apps"</span>);</div><div class="line">            mOnlyCore = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Start the package manager.</span></div><div class="line">        Slog.i(TAG, <span class="string">"Package Manager"</span>);</div><div class="line">        mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</div><div class="line">                mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</div><div class="line">        mFirstBoot = mPackageManagerService.isFirstBoot();</div><div class="line">        mPackageManager = mSystemContext.getPackageManager();</div><div class="line"></div><div class="line">        Slog.i(TAG, <span class="string">"User Service"</span>);</div><div class="line">        ServiceManager.addService(Context.USER_SERVICE, UserManagerService.getInstance());</div><div class="line"></div><div class="line">        <span class="comment">// Initialize attribute cache used to cache resources from packages.</span></div><div class="line">        AttributeCache.init(mSystemContext);</div><div class="line"></div><div class="line">        <span class="comment">// Set up the Application instance for the system process and get started.</span></div><div class="line">        mActivityManagerService.setSystemProcess();</div><div class="line"></div><div class="line">        <span class="comment">// The sensor service needs access to package manager service, app ops</span></div><div class="line">        <span class="comment">// service, and permissions service, therefore we start it after them.</span></div><div class="line">        startSensorService();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="startCoreServices"><a href="#startCoreServices" class="headerlink" title="startCoreServices"></a>startCoreServices</h4><p>这一步启动的serivce有：BatteryService，UsageStatsService，WebViewUpdateService。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Starts some essential services that are not tangled up in the bootstrap process.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCoreServices</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Tracks the battery level.  Requires LightService.</span></div><div class="line">    mSystemServiceManager.startService(BatteryService.class);</div><div class="line"></div><div class="line">    <span class="comment">// Tracks application usage stats.</span></div><div class="line">    mSystemServiceManager.startService(UsageStatsService.class);</div><div class="line">    mActivityManagerService.setUsageStatsManager(</div><div class="line">            LocalServices.getService(UsageStatsManagerInternal.class));</div><div class="line">    <span class="comment">// Update after UsageStatsService is available, needed before performBootDexOpt.</span></div><div class="line">    mPackageManagerService.getUsageStatsIfNoPackageUsageInfo();</div><div class="line"></div><div class="line">    <span class="comment">// Tracks whether the updatable WebView is in a ready state and watches for update installs.</span></div><div class="line">    mSystemServiceManager.startService(WebViewUpdateService.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="startOtherService"><a href="#startOtherService" class="headerlink" title="startOtherService"></a>startOtherService</h4><p>这一步启动service又多又杂，主要有如下这些，其它还有不再一一列举。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">AccountManagerService accountManager = <span class="keyword">null</span>;</div><div class="line">       ContentService contentService = <span class="keyword">null</span>;</div><div class="line">       VibratorService vibrator = <span class="keyword">null</span>;</div><div class="line">       IAlarmManager alarm = <span class="keyword">null</span>;</div><div class="line">       IMountService mountService = <span class="keyword">null</span>;</div><div class="line">       NetworkManagementService networkManagement = <span class="keyword">null</span>;</div><div class="line">       NetworkStatsService networkStats = <span class="keyword">null</span>;</div><div class="line">       NetworkPolicyManagerService networkPolicy = <span class="keyword">null</span>;</div><div class="line">       ConnectivityService connectivity = <span class="keyword">null</span>;</div><div class="line">       NetworkScoreService networkScore = <span class="keyword">null</span>;</div><div class="line">       NsdService serviceDiscovery= <span class="keyword">null</span>;</div><div class="line">       WindowManagerService wm = <span class="keyword">null</span>;</div><div class="line">       UsbService usb = <span class="keyword">null</span>;</div><div class="line">       SerialService serial = <span class="keyword">null</span>;</div><div class="line">       NetworkTimeUpdateService networkTimeUpdater = <span class="keyword">null</span>;</div><div class="line">       CommonTimeManagementService commonTimeMgmtService = <span class="keyword">null</span>;</div><div class="line">       InputManagerService inputManager = <span class="keyword">null</span>;</div><div class="line">       TelephonyRegistry telephonyRegistry = <span class="keyword">null</span>;</div><div class="line">       ConsumerIrService consumerIr = <span class="keyword">null</span>;</div><div class="line">       AudioService audioService = <span class="keyword">null</span>;</div><div class="line">       MmsServiceBroker mmsService = <span class="keyword">null</span>;</div><div class="line">       EntropyMixer entropyMixer = <span class="keyword">null</span>;</div><div class="line">       CameraService cameraService = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>写到这里，有点凌乱，太多的进程和线程在这一过程中被创建。我用下图来梳理这部分进程之间的关系，希望让你一目了然吧。</p>
<p><img src="http://img.blog.csdn.net/20161129224233704" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;再不学习我们就老了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0-Zygote有什么卵用？&quot;&gt;&lt;a href=&quot;#0-Zygote有什么卵用？&quot; class=&quot;headerlink&quot; title=&quot;0. Zygote有什么卵用？&quot;&gt;&lt;/a&gt;0. Zygote有什么卵用？&lt;/h2&gt;&lt;p&gt;Zygote是进程孵化器，Android系统中其他服务进程都是拷贝于它。Zygote在设计模式中对应于&lt;code&gt;prototype&lt;/code&gt;，这样做的好处是可以通过拷贝Zygote来快速创建一个进程。&lt;/p&gt;
&lt;h2 id=&quot;1-Zygote脚本启动&quot;&gt;&lt;a href=&quot;#1-Zygote脚本启动&quot; class=&quot;headerlink&quot; title=&quot;1. Zygote脚本启动&quot;&gt;&lt;/a&gt;1. Zygote脚本启动&lt;/h2&gt;&lt;p&gt;在开机时，init进程会调用如下脚本启动进程。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;system/core/rootdir/init.zygote32_64.rc&lt;/em&gt; :&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;service zygote /system/bin/app_process32 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zygote&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stream&lt;/span&gt; 660 &lt;span class=&quot;title&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;system&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt; /&lt;span class=&quot;title&quot;&gt;sys&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;android_power&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;request_state&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wake&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt; /&lt;span class=&quot;title&quot;&gt;sys&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;power&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;on&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;media&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;netd&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;writepid&lt;/span&gt; /&lt;span class=&quot;title&quot;&gt;dev&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;cpuset&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;foreground&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;tasks&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;service&lt;/code&gt;表明该进程是作为一个服务来启动的，&lt;code&gt;--start-system-server&lt;/code&gt;指明了该进程启动后，需要启动system服务。该进程对应的端口权限660，名字为zygote，其它进程可以通过该端口和它进行通信。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(13):Input消息的分发过程</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-13-Input%E6%B6%88%E6%81%AF%E7%9A%84%E5%88%86%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-13-Input消息的分发过程/</id>
    <published>2017-02-14T06:29:02.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android系统源码阅读（13）：Input消息的分发过程"><a href="#Android系统源码阅读（13）：Input消息的分发过程" class="headerlink" title="Android系统源码阅读（13）：Input消息的分发过程"></a>Android系统源码阅读（13）：Input消息的分发过程</h1><blockquote>
<p>请对照AOSP版本：6.0.1_r50。学校电脑好渣，看源码时卡半天</p>
</blockquote>
<hr>
<p>先回顾一下前两篇文章。在设备没有事件输入的时候，InputReader和InputDispatcher都处于睡眠状态。当输入事件发生，InputReader首先被激活，然后发送读取消息，激活Dispatcher。Dispatcher被激活以后，将消息发送给当前激活窗口的主线程，然后睡眠等待主线程处理完这个事件。主线程被激活后，会处理相应的消息，处理完毕后反馈给Dispatcher，从而Dispatcher可以继续发送消息。</p>
<h2 id="1-InputReader获取事件"><a href="#1-InputReader获取事件" class="headerlink" title="1. InputReader获取事件"></a>1. InputReader获取事件</h2><p>回顾一下第11章4.2中，InputReader线程在获取事件以后，会调用<code>processEventsLocked(mEventBuffer, count);</code>处理事件。</p>
<p><img src="http://img.blog.csdn.net/20160927222615741" alt="这里写图片描述"></p>
<a id="more"></a>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>这里先根据event的种类进行分门别类的处理。</p>
<p><em>frameworks/native/services/inputflinger/InputReader.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputReader::processEventsLocked(<span class="keyword">const</span> RawEvent* rawEvents, <span class="keyword">size_t</span> count) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> RawEvent* rawEvent = rawEvents; count;) &#123;</div><div class="line">        <span class="keyword">int32_t</span> type = rawEvent-&gt;type;</div><div class="line">        <span class="keyword">size_t</span> batchSize = <span class="number">1</span>;</div><div class="line">      </div><div class="line">        <span class="keyword">if</span> (type &lt; EventHubInterface::FIRST_SYNTHETIC_EVENT) &#123;</div><div class="line">            <span class="comment">//如果这里获得是合成事件</span></div><div class="line">            <span class="comment">//这里一次要将该输入设备中的一组事件都获取出来</span></div><div class="line">            <span class="keyword">int32_t</span> deviceId = rawEvent-&gt;deviceId;</div><div class="line">            <span class="keyword">while</span> (batchSize &lt; count) &#123;</div><div class="line">                <span class="keyword">if</span> (rawEvent[batchSize].type &gt;= EventHubInterface::FIRST_SYNTHETIC_EVENT</div><div class="line">                        || rawEvent[batchSize].deviceId != deviceId) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                batchSize += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//处理这些事件</span></div><div class="line">            processEventsForDeviceLocked(deviceId, rawEvent, batchSize);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//这些是一些设备状况的事件，没必要将这些消息发送出去，留给自己处理就可以了</span></div><div class="line">            <span class="keyword">switch</span> (rawEvent-&gt;type) &#123;</div><div class="line">            <span class="keyword">case</span> EventHubInterface::DEVICE_ADDED:</div><div class="line">                addDeviceLocked(rawEvent-&gt;when, rawEvent-&gt;deviceId);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> EventHubInterface::DEVICE_REMOVED:</div><div class="line">                removeDeviceLocked(rawEvent-&gt;when, rawEvent-&gt;deviceId);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> EventHubInterface::FINISHED_DEVICE_SCAN:</div><div class="line">                handleConfigurationChangedLocked(rawEvent-&gt;when);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                ALOG_ASSERT(<span class="literal">false</span>); <span class="comment">// can't happen</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        count -= batchSize;</div><div class="line">        rawEvent += batchSize;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>准备将事件交给设备进行处理。</p>
<p><em>frameworks/native/services/inputflinger/InputReader.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputReader::processEventsForDeviceLocked(<span class="keyword">int32_t</span> deviceId,</div><div class="line">        <span class="keyword">const</span> RawEvent* rawEvents, <span class="keyword">size_t</span> count) &#123;  </div><div class="line">    <span class="comment">//判断设备是否是已知的</span></div><div class="line">    <span class="keyword">ssize_t</span> deviceIndex = mDevices.indexOfKey(deviceId);</div><div class="line">    <span class="keyword">if</span> (deviceIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGW(<span class="string">"Discarding event for unknown deviceId %d."</span>, deviceId);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获得设备</span></div><div class="line">    InputDevice* device = mDevices.valueAt(deviceIndex);</div><div class="line">    <span class="keyword">if</span> (device-&gt;isIgnored()) &#123;</div><div class="line">        <span class="comment">//ALOGD("Discarding event for ignored deviceId %d.", deviceId);</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//交给设备进行处理</span></div><div class="line">    device-&gt;process(rawEvents, count);</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><p>用device中的mapper去映射传入的事件，然后再处理。</p>
<p><em>frameworks/native/services/inputflinger/InputReader.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputDevice::process(<span class="keyword">const</span> RawEvent* rawEvents, <span class="keyword">size_t</span> count) &#123;</div><div class="line">    <span class="comment">// Process all of the events in order for each mapper.</span></div><div class="line">    <span class="comment">// We cannot simply ask each mapper to process them in bulk because mappers may</span></div><div class="line">    <span class="comment">// have side-effects that must be interleaved.  For example, joystick movement events and</span></div><div class="line">    <span class="comment">// gamepad button presses are handled by different mappers but they should be dispatched</span></div><div class="line">    <span class="comment">// in the order received.</span></div><div class="line">    <span class="comment">//一个设备可能有多种类型的event，所有有多个mapper，但是需要保持event的顺序性</span></div><div class="line">    <span class="comment">//所以这里采用先循环event，再循环mapper的方式</span></div><div class="line">    <span class="keyword">size_t</span> numMappers = mMappers.size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> RawEvent* rawEvent = rawEvents; count--; rawEvent++) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mDropUntilNextSync) &#123;</div><div class="line">            <span class="keyword">if</span> (rawEvent-&gt;type == EV_SYN &amp;&amp; rawEvent-&gt;code == SYN_REPORT) &#123;</div><div class="line">                mDropUntilNextSync = <span class="literal">false</span>;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawEvent-&gt;type == EV_SYN &amp;&amp; rawEvent-&gt;code == SYN_DROPPED) &#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">            mDropUntilNextSync = <span class="literal">true</span>;</div><div class="line">            reset(rawEvent-&gt;when);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; numMappers; i++) &#123;</div><div class="line">                InputMapper* mapper = mMappers[i];</div><div class="line">                <span class="comment">//用每一种mapper尝试处理event</span></div><div class="line">                mapper-&gt;process(rawEvent);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h3><p>这里InputMapper种类很多，每个事件处理方法各不相同，所以在这里不再详述。其中有如下的InputMapper：</p>
<blockquote>
<p>SwitchInputMapper, VibratorInputMapper, KeyboardInputMapper,  CursorInputMapper, TouchInputMapper, SingleTouchInputMapper, MultiTouchInputMapper, JoystickInputMapper</p>
</blockquote>
<p>这些方法处理到最后，会调用<code>getListener()-&gt;notifyXXX(&amp;args)</code>，让Dispatcher进行分发，XXX根据不同的Mapper有相应的名字。在创建InputReader时，将InputDispatcher作为参数传入，同时建立了QueuedInputListener来存放这个InputDispatcher，估计是准备将来处理多个InputDispatcher。所以这里getListener获取的就是当初建立的InputDispatcher对象。</p>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h3><p>这里虽然已经开始调用InputDispatcher的函数，但是还是在InputReader线程中。这里开始向InputDispatcher的队列中插入事件，并且把InputDispatcher唤醒了。因为notifyXXX函数同样是针对不同的输入有着不同的处理，所以不再详述，截取一段MotionEvent的代码片段。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//针对每种event，都会想将其封装成一个EventEntry</span></div><div class="line"> <span class="comment">// Just enqueue a new motion event.</span></div><div class="line"> MotionEntry* newEntry = <span class="keyword">new</span> MotionEntry(args-&gt;eventTime,</div><div class="line">              args-&gt;deviceId, args-&gt;source, policyFlags,</div><div class="line">              args-&gt;action, args-&gt;actionButton, args-&gt;flags,</div><div class="line">              args-&gt;metaState, args-&gt;buttonState,</div><div class="line">              args-&gt;edgeFlags, args-&gt;xPrecision, args-&gt;yPrecision, args-&gt;downTime,</div><div class="line">              args-&gt;displayId,</div><div class="line">              args-&gt;pointerCount, args-&gt;pointerProperties, args-&gt;pointerCoords, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="comment">//然后加入队列</span></div><div class="line">needWake = enqueueInboundEventLocked(newEntry);</div><div class="line"></div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//唤醒Looper线程</span></div><div class="line"><span class="keyword">if</span> (needWake) &#123;</div><div class="line">      mLooper-&gt;wake();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>将一个事件放入队列之后，会根据needWake参数决定是否要唤醒线程。如果要唤醒，则调用Looper的wake函数就可以了，和原来道理一样。在有些时候，有事件添加进去，不一定要唤醒线程，比如线程正在等待应用反馈事件处理完毕的消息。</p>
<h3 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h3><p>实实在在的将这个EventEntry放入队列mInboundQueue中了。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> InputDispatcher::enqueueInboundEventLocked(EventEntry* entry) &#123;</div><div class="line">    <span class="comment">//如果队列空了，需要唤醒</span></div><div class="line">    <span class="keyword">bool</span> needWake = mInboundQueue.isEmpty();</div><div class="line">    <span class="comment">//将事件加入队列</span></div><div class="line">    mInboundQueue.enqueueAtTail(entry);</div><div class="line">    traceInboundQueueLengthLocked();</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (entry-&gt;type) &#123;</div><div class="line">    <span class="comment">//这里会优化App切换的事件，如果上一个App还有事件没处理完，也没反馈事件处理完毕消息</span></div><div class="line">    <span class="comment">//则清空之前的事件，切换下一个应用</span></div><div class="line">    <span class="keyword">case</span> EventEntry::TYPE_KEY: &#123;</div><div class="line">        <span class="comment">// Optimize app switch latency.</span></div><div class="line">        <span class="comment">// If the application takes too long to catch up then we drop all events preceding</span></div><div class="line">        <span class="comment">// the app switch key.</span></div><div class="line">        KeyEntry* keyEntry = <span class="keyword">static_cast</span>&lt;KeyEntry*&gt;(entry);</div><div class="line">        <span class="keyword">if</span> (isAppSwitchKeyEventLocked(keyEntry)) &#123;</div><div class="line">            <span class="keyword">if</span> (keyEntry-&gt;action == AKEY_EVENT_ACTION_DOWN) &#123;</div><div class="line">                mAppSwitchSawKeyDown = <span class="literal">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyEntry-&gt;action == AKEY_EVENT_ACTION_UP) &#123;</div><div class="line">                <span class="keyword">if</span> (mAppSwitchSawKeyDown) &#123;</div><div class="line">#<span class="keyword">if</span> DEBUG_APP_SWITCH</div><div class="line">                    ALOGD(<span class="string">"App switch is pending!"</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">                    mAppSwitchDueTime = keyEntry-&gt;eventTime + APP_SWITCH_TIMEOUT;</div><div class="line">                    mAppSwitchSawKeyDown = <span class="literal">false</span>;</div><div class="line">                    needWake = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//当一个非当前激活app的点击事件发生，会清空之前的事件</span></div><div class="line">    <span class="comment">//从这个新的点击事件开始</span></div><div class="line">    <span class="keyword">case</span> EventEntry::TYPE_MOTION: &#123;</div><div class="line">        <span class="comment">// Optimize case where the current application is unresponsive and the user</span></div><div class="line">        <span class="comment">// decides to touch a window in a different application.</span></div><div class="line">        <span class="comment">// If the application takes too long to catch up then we drop all events preceding</span></div><div class="line">        <span class="comment">// the touch into the other window.</span></div><div class="line">        MotionEntry* motionEntry = <span class="keyword">static_cast</span>&lt;MotionEntry*&gt;(entry);</div><div class="line">        <span class="keyword">if</span> (motionEntry-&gt;action == AMOTION_EVENT_ACTION_DOWN</div><div class="line">                &amp;&amp; (motionEntry-&gt;source &amp; AINPUT_SOURCE_CLASS_POINTER)</div><div class="line">                &amp;&amp; mInputTargetWaitCause == INPUT_TARGET_WAIT_CAUSE_APPLICATION_NOT_READY</div><div class="line">                &amp;&amp; mInputTargetWaitApplicationHandle != <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">int32_t</span> displayId = motionEntry-&gt;displayId;</div><div class="line">            <span class="keyword">int32_t</span> x = <span class="keyword">int32_t</span>(motionEntry-&gt;pointerCoords[<span class="number">0</span>].</div><div class="line">                    getAxisValue(AMOTION_EVENT_AXIS_X));</div><div class="line">            <span class="keyword">int32_t</span> y = <span class="keyword">int32_t</span>(motionEntry-&gt;pointerCoords[<span class="number">0</span>].</div><div class="line">                    getAxisValue(AMOTION_EVENT_AXIS_Y));</div><div class="line">            sp&lt;InputWindowHandle&gt; touchedWindowHandle = findTouchedWindowAtLocked(displayId, x, y);</div><div class="line">            <span class="keyword">if</span> (touchedWindowHandle != <span class="literal">NULL</span></div><div class="line">                    &amp;&amp; touchedWindowHandle-&gt;inputApplicationHandle</div><div class="line">                            != mInputTargetWaitApplicationHandle) &#123;</div><div class="line">                <span class="comment">// User touched a different application than the one we are waiting on.</span></div><div class="line">                <span class="comment">// Flag the event, and start pruning the input queue.</span></div><div class="line">                mNextUnblockedEvent = motionEntry;</div><div class="line">                needWake = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> needWake;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这里做了两种优化，主要是在当前App窗口处理事件过慢，同时你又触发其他App的事件时，Dispatcher就会丢弃先前的事件，从这个开始唤醒Dispatcher。这样做很合情合理，用户在使用时，会遇到App由于开发者水平有限导致处理事件过慢情况，这时用户等的不耐烦，则应该让用户轻松的切换到其它App，而不是阻塞在那。所以，事件无法响应只会发生在App内部，而不会影响应用的切换，从而提升用户体验。App的质量问题不会影响系统的运转，Android在这点上做的很人性。</p>
<h2 id="2-InputDispatcher分发事件"><a href="#2-InputDispatcher分发事件" class="headerlink" title="2. InputDispatcher分发事件"></a>2. InputDispatcher分发事件</h2><p>在第11章中3.2中，Dispatcher调用函数<code>dispatchOnceInnerLocked(&amp;nextWakeupTime);</code>来分配队列中的事件。</p>
<p><img src="http://img.blog.csdn.net/20160927223056508" alt="这里写图片描述"></p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p>从队列中获取event，然后准备处理。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputDispatcher::dispatchOnceInnerLocked(<span class="keyword">nsecs_t</span>* nextWakeupTime) &#123;</div><div class="line">    <span class="keyword">nsecs_t</span> currentTime = now();</div><div class="line"></div><div class="line">    <span class="comment">// Reset the key repeat timer whenever normal dispatch is suspended while the</span></div><div class="line">    <span class="comment">// device is in a non-interactive state.  This is to ensure that we abort a key</span></div><div class="line">    <span class="comment">// repeat if the device is just coming out of sleep.</span></div><div class="line">    <span class="keyword">if</span> (!mDispatchEnabled) &#123;</div><div class="line">        resetKeyRepeatLocked();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If dispatching is frozen, do not process timeouts or try to deliver any new events.</span></div><div class="line">    <span class="keyword">if</span> (mDispatchFrozen) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//对App切换的情况的优化</span></div><div class="line">    <span class="comment">// Optimize latency of app switches.</span></div><div class="line">    <span class="comment">// Essentially we start a short timeout when an app switch key (HOME / ENDCALL) has</span></div><div class="line">    <span class="comment">// been pressed.  When it expires, we preempt dispatch and drop all other pending events.</span></div><div class="line">    <span class="keyword">bool</span> isAppSwitchDue = mAppSwitchDueTime &lt;= currentTime;</div><div class="line">    <span class="keyword">if</span> (mAppSwitchDueTime &lt; *nextWakeupTime) &#123;</div><div class="line">        <span class="comment">//如果有切换App的event，且时间小于设定的时间</span></div><div class="line">        <span class="comment">//则将等待事件设为小者</span></div><div class="line">        *nextWakeupTime = mAppSwitchDueTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Ready to start a new event.</span></div><div class="line">    <span class="comment">// If we don't already have a pending event, go grab one.</span></div><div class="line">    <span class="keyword">if</span> (! mPendingEvent) &#123;</div><div class="line">        <span class="keyword">if</span> (mInboundQueue.isEmpty()) &#123;</div><div class="line">            <span class="comment">//队列是空的情况</span></div><div class="line">            <span class="keyword">if</span> (isAppSwitchDue) &#123;</div><div class="line">                <span class="comment">// The inbound queue is empty so the app switch key we were waiting</span></div><div class="line">                <span class="comment">// for will never arrive.  Stop waiting for it.</span></div><div class="line">                resetPendingAppSwitchLocked(<span class="literal">false</span>);</div><div class="line">                isAppSwitchDue = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Synthesize a key repeat if appropriate.</span></div><div class="line">            <span class="comment">//如果有连续重复事件发生，则制造重复事件</span></div><div class="line">            <span class="keyword">if</span> (mKeyRepeatState.lastKeyEntry) &#123;</div><div class="line">                <span class="keyword">if</span> (currentTime &gt;= mKeyRepeatState.nextRepeatTime) &#123;</div><div class="line">                    mPendingEvent = synthesizeKeyRepeatLocked(currentTime);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (mKeyRepeatState.nextRepeatTime &lt; *nextWakeupTime) &#123;</div><div class="line">                        *nextWakeupTime = mKeyRepeatState.nextRepeatTime;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Nothing to do if there is no pending event.</span></div><div class="line">            <span class="comment">//如果真无事可做，下次睡眠可能比较久</span></div><div class="line">            <span class="keyword">if</span> (!mPendingEvent) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Inbound queue has at least one entry.</span></div><div class="line">            <span class="comment">//从队列中获取一个Event</span></div><div class="line">            mPendingEvent = mInboundQueue.dequeueAtHead();</div><div class="line">            traceInboundQueueLengthLocked();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Poke user activity for this event.</span></div><div class="line">        <span class="keyword">if</span> (mPendingEvent-&gt;policyFlags &amp; POLICY_FLAG_PASS_TO_USER) &#123;</div><div class="line">            pokeUserActivityLocked(mPendingEvent);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//重置ANRT</span></div><div class="line">        <span class="comment">// Get ready to dispatch the event.</span></div><div class="line">        resetANRTimeoutsLocked();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Now we have an event to dispatch.</span></div><div class="line">    <span class="comment">// All events are eventually dequeued and processed this way, even if we intend to drop them.</span></div><div class="line">    <span class="keyword">bool</span> done = <span class="literal">false</span>;</div><div class="line">    DropReason dropReason = DROP_REASON_NOT_DROPPED;</div><div class="line">    <span class="keyword">if</span> (!(mPendingEvent-&gt;policyFlags &amp; POLICY_FLAG_PASS_TO_USER)) &#123;</div><div class="line">        dropReason = DROP_REASON_POLICY;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mDispatchEnabled) &#123;</div><div class="line">        dropReason = DROP_REASON_DISABLED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mNextUnblockedEvent == mPendingEvent) &#123;</div><div class="line">        mNextUnblockedEvent = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//分类处理Event</span></div><div class="line">    <span class="keyword">switch</span> (mPendingEvent-&gt;type) &#123;</div><div class="line">    <span class="keyword">case</span> EventEntry::TYPE_CONFIGURATION_CHANGED: &#123;</div><div class="line">        ConfigurationChangedEntry* typedEntry =</div><div class="line">                <span class="keyword">static_cast</span>&lt;ConfigurationChangedEntry*&gt;(mPendingEvent);</div><div class="line">        done = dispatchConfigurationChangedLocked(currentTime, typedEntry);</div><div class="line">        dropReason = DROP_REASON_NOT_DROPPED; <span class="comment">// configuration changes are never dropped</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> EventEntry::TYPE_DEVICE_RESET: &#123;</div><div class="line">        DeviceResetEntry* typedEntry =</div><div class="line">                <span class="keyword">static_cast</span>&lt;DeviceResetEntry*&gt;(mPendingEvent);</div><div class="line">        done = dispatchDeviceResetLocked(currentTime, typedEntry);</div><div class="line">        dropReason = DROP_REASON_NOT_DROPPED; <span class="comment">// device resets are never dropped</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> EventEntry::TYPE_KEY: &#123;</div><div class="line">        KeyEntry* typedEntry = <span class="keyword">static_cast</span>&lt;KeyEntry*&gt;(mPendingEvent);</div><div class="line">        <span class="keyword">if</span> (isAppSwitchDue) &#123;</div><div class="line">            <span class="keyword">if</span> (isAppSwitchKeyEventLocked(typedEntry)) &#123;</div><div class="line">                <span class="comment">//这个Event就是SwitchEvent，我已经处理</span></div><div class="line">                <span class="comment">//重置App切换的状态为false</span></div><div class="line">                resetPendingAppSwitchLocked(<span class="literal">true</span>);</div><div class="line">                isAppSwitchDue = <span class="literal">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED) &#123;</div><div class="line">                <span class="comment">//如果是其他事件，则丢弃，因为正在switch</span></div><div class="line">                dropReason = DROP_REASON_APP_SWITCH;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED</div><div class="line">                &amp;&amp; isStaleEventLocked(currentTime, typedEntry)) &#123;</div><div class="line">            dropReason = DROP_REASON_STALE;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED &amp;&amp; mNextUnblockedEvent) &#123;</div><div class="line">            dropReason = DROP_REASON_BLOCKED;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//分发KeyEvent</span></div><div class="line">        done = dispatchKeyLocked(currentTime, typedEntry, &amp;dropReason, nextWakeupTime);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> EventEntry::TYPE_MOTION: &#123;</div><div class="line">        MotionEntry* typedEntry = <span class="keyword">static_cast</span>&lt;MotionEntry*&gt;(mPendingEvent);</div><div class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED &amp;&amp; isAppSwitchDue) &#123;</div><div class="line">            dropReason = DROP_REASON_APP_SWITCH;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED</div><div class="line">                &amp;&amp; isStaleEventLocked(currentTime, typedEntry)) &#123;</div><div class="line">            dropReason = DROP_REASON_STALE;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED &amp;&amp; mNextUnblockedEvent) &#123;</div><div class="line">            dropReason = DROP_REASON_BLOCKED;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//分发Motion Event</span></div><div class="line">        done = dispatchMotionLocked(currentTime, typedEntry,</div><div class="line">                &amp;dropReason, nextWakeupTime);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        ALOG_ASSERT(<span class="literal">false</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (done) &#123;</div><div class="line">        <span class="keyword">if</span> (dropReason != DROP_REASON_NOT_DROPPED) &#123;</div><div class="line">            dropInboundEventLocked(mPendingEvent, dropReason);</div><div class="line">        &#125;</div><div class="line">        mLastDropReason = dropReason;</div><div class="line">        <span class="comment">//将mPendingEvent置为null</span></div><div class="line">        releasePendingEventLocked();</div><div class="line">        <span class="comment">//我已经处理的event，所以需要将睡眠设置时间小一点</span></div><div class="line">        *nextWakeupTime = LONG_LONG_MIN;  <span class="comment">// force next poll to wake up immediately</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p>这一步根据Event的种类，略有不同。有<code>dispatchMotionLocked</code>和<code>dispatchKeyLocked</code>等。主要过程类似，首先判断是否需要丢弃该event，然后获得目标Window，再向目标window发送event。代码片如下：</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//..</span></div><div class="line"><span class="comment">// Identify targets.</span></div><div class="line">Vector&lt;InputTarget&gt; inputTargets;</div><div class="line"><span class="comment">//..</span></div><div class="line">injectionResult = findTouchedWindowTargetsLocked(currentTime, entry, inputTargets, nextWakeupTime, &amp;conflictingPointerActions);</div><div class="line"><span class="comment">//..</span></div><div class="line">dispatchEventLocked(currentTime, entry, inputTargets);</div></pre></td></tr></table></figure></p>
<p>这里调用<code>findTouchedWindowTargetsLocked()</code>来获取目标Window。在前面12章3.6中，将mFocusedWindowHandle参数设置为了当前激活的Window，所以目前返回的inputTargets就是将mFocusedWindowHandle封装后的结果。</p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><p>向每一个目标发送event。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputDispatcher::dispatchEventLocked(<span class="keyword">nsecs_t</span> currentTime,</div><div class="line">        EventEntry* eventEntry, <span class="keyword">const</span> Vector&lt;InputTarget&gt;&amp; inputTargets) &#123;</div><div class="line"></div><div class="line">    pokeUserActivityLocked(eventEntry);</div><div class="line">    <span class="comment">//向每一个目标发送event</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; inputTargets.size(); i++) &#123;</div><div class="line">        <span class="keyword">const</span> InputTarget&amp; inputTarget = inputTargets.itemAt(i);</div><div class="line">        <span class="comment">//获取目标的connection</span></div><div class="line">        <span class="keyword">ssize_t</span> connectionIndex = getConnectionIndexLocked(inputTarget.inputChannel);</div><div class="line">        <span class="keyword">if</span> (connectionIndex &gt;= <span class="number">0</span>) &#123;</div><div class="line">            sp&lt;Connection&gt; connection = mConnectionsByFd.valueAt(connectionIndex);</div><div class="line">            prepareDispatchCycleLocked(currentTime, connection, eventEntry, &amp;inputTarget);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">//..</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputDispatcher::prepareDispatchCycleLocked(<span class="keyword">nsecs_t</span> currentTime,</div><div class="line">        <span class="keyword">const</span> sp&lt;Connection&gt;&amp; connection, EventEntry* eventEntry, <span class="keyword">const</span> InputTarget* inputTarget) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Skip this event if the connection status is not normal.</span></div><div class="line">    <span class="comment">// We don't want to enqueue additional outbound events if the connection is broken.</span></div><div class="line">    <span class="keyword">if</span> (connection-&gt;status != Connection::STATUS_NORMAL) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="comment">// Split a motion event if needed.</span></div><div class="line">    <span class="keyword">if</span> (inputTarget-&gt;flags &amp; InputTarget::FLAG_SPLIT) &#123;</div><div class="line">        <span class="comment">//Motion event一般为连续的基本event组合而成</span></div><div class="line">        <span class="comment">//所以可以分割</span></div><div class="line">        MotionEntry* originalMotionEntry = <span class="keyword">static_cast</span>&lt;MotionEntry*&gt;(eventEntry);</div><div class="line">        <span class="keyword">if</span> (inputTarget-&gt;pointerIds.count() != originalMotionEntry-&gt;pointerCount) &#123;</div><div class="line">            MotionEntry* splitMotionEntry = splitMotionEvent(</div><div class="line">                    originalMotionEntry, inputTarget-&gt;pointerIds);</div><div class="line">            <span class="keyword">if</span> (!splitMotionEntry) &#123;</div><div class="line">                <span class="keyword">return</span>; <span class="comment">// split event was dropped</span></div><div class="line">            &#125;</div><div class="line">            enqueueDispatchEntriesLocked(currentTime, connection,</div><div class="line">                    splitMotionEntry, inputTarget);</div><div class="line">            splitMotionEntry-&gt;release();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Not splitting.  Enqueue dispatch entries for the event as is.</span></div><div class="line">    enqueueDispatchEntriesLocked(currentTime, connection, eventEntry, inputTarget);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h3><p>这一步先判断目标Connection是否空，然后向其队列加入event。如果原来队列为空，说明可以进一步分发event；如果不为空，说明旧event还没有处理完毕，则不进一步分发。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> wasEmpty = connection-&gt;outboundQueue.isEmpty();</div><div class="line"></div><div class="line"><span class="comment">// Enqueue dispatch entries for the requested modes.</span></div><div class="line"><span class="comment">//将event放入outboundQueue中，省略..</span></div><div class="line"></div><div class="line"><span class="comment">// If the outbound queue was previously empty, start the dispatch cycle going.</span></div><div class="line"><span class="keyword">if</span> (wasEmpty &amp;&amp; !connection-&gt;outboundQueue.isEmpty()) &#123;</div><div class="line">    startDispatchCycleLocked(currentTime, connection);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-6"><a href="#2-6" class="headerlink" title="2.6"></a>2.6</h3><p>循环的取出队列中的event，然后交给connection发送。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputDispatcher::startDispatchCycleLocked(<span class="keyword">nsecs_t</span> currentTime,</div><div class="line">        <span class="keyword">const</span> sp&lt;Connection&gt;&amp; connection) &#123;</div><div class="line"></div><div class="line">    <span class="comment">//将outboundQueue中的entry一一进行处理</span></div><div class="line">    <span class="keyword">while</span> (connection-&gt;status == Connection::STATUS_NORMAL</div><div class="line">            &amp;&amp; !connection-&gt;outboundQueue.isEmpty()) &#123;</div><div class="line">        <span class="comment">//获取首部的entry</span></div><div class="line">        DispatchEntry* dispatchEntry = connection-&gt;outboundQueue.head;</div><div class="line">        dispatchEntry-&gt;deliveryTime = currentTime;</div><div class="line"></div><div class="line">        <span class="comment">// Publish the event.</span></div><div class="line">        <span class="keyword">status_t</span> status;</div><div class="line">        EventEntry* eventEntry = dispatchEntry-&gt;eventEntry;</div><div class="line">        <span class="keyword">switch</span> (eventEntry-&gt;type) &#123;</div><div class="line">        <span class="keyword">case</span> EventEntry::TYPE_KEY: &#123;</div><div class="line">            KeyEntry* keyEntry = <span class="keyword">static_cast</span>&lt;KeyEntry*&gt;(eventEntry);</div><div class="line">            <span class="comment">//..</span></div><div class="line">            </div><div class="line">            <span class="comment">// Publish the key event.</span></div><div class="line">            status = connection-&gt;inputPublisher.publishKeyEvent(dispatchEntry-&gt;seq,</div><div class="line">                    keyEntry-&gt;deviceId, keyEntry-&gt;source,</div><div class="line">                    dispatchEntry-&gt;resolvedAction, dispatchEntry-&gt;resolvedFlags,</div><div class="line">                    keyEntry-&gt;keyCode, keyEntry-&gt;scanCode,</div><div class="line">                    keyEntry-&gt;metaState, keyEntry-&gt;repeatCount, keyEntry-&gt;downTime,</div><div class="line">                    keyEntry-&gt;eventTime);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> EventEntry::TYPE_MOTION: &#123;</div><div class="line">            MotionEntry* motionEntry = <span class="keyword">static_cast</span>&lt;MotionEntry*&gt;(eventEntry);</div><div class="line"></div><div class="line">            <span class="comment">// Set the X and Y offset depending on the input source.</span></div><div class="line">            <span class="comment">//..</span></div><div class="line">            </div><div class="line">            <span class="comment">// Publish the motion event.</span></div><div class="line">            status = connection-&gt;inputPublisher.publishMotionEvent(dispatchEntry-&gt;seq,</div><div class="line">                    motionEntry-&gt;deviceId, motionEntry-&gt;source,</div><div class="line">                    dispatchEntry-&gt;resolvedAction, motionEntry-&gt;actionButton,</div><div class="line">                    dispatchEntry-&gt;resolvedFlags, motionEntry-&gt;edgeFlags,</div><div class="line">                    motionEntry-&gt;metaState, motionEntry-&gt;buttonState,</div><div class="line">                    xOffset, yOffset, motionEntry-&gt;xPrecision, motionEntry-&gt;yPrecision,</div><div class="line">                    motionEntry-&gt;downTime, motionEntry-&gt;eventTime,</div><div class="line">                    motionEntry-&gt;pointerCount, motionEntry-&gt;pointerProperties,</div><div class="line">                    usingCoords);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Check the result.</span></div><div class="line">    </div><div class="line">        <span class="comment">// Re-enqueue the event on the wait queue.</span></div><div class="line">        <span class="comment">//从outboundQueue中移除</span></div><div class="line">        connection-&gt;outboundQueue.dequeue(dispatchEntry);</div><div class="line">        traceOutboundQueueLengthLocked(connection);</div><div class="line">        <span class="comment">//加入waitQueue</span></div><div class="line">        connection-&gt;waitQueue.enqueueAtTail(dispatchEntry);</div><div class="line">        traceWaitQueueLengthLocked(connection);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a>2.7</h3><p>这一步同样有多种情况，有publishMotionEvent和publishKeyEvent。基本思路相近。先封装成message，最后都调用了<code>mChannel-&gt;sendMessage(&amp;msg)</code>。<br><em>frameworks/native/libs/input/InputTransport.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">InputMessage msg;</div><div class="line">msg.header.type = InputMessage::TYPE_MOTION;</div><div class="line">msg.body.motion.seq = seq;</div><div class="line">msg.body.motion.deviceId = deviceId;</div><div class="line">msg.body.motion.source = source;</div><div class="line">msg.body.motion.action = action;</div><div class="line">msg.body.motion.actionButton = actionButton;</div><div class="line">msg.body.motion.flags = flags;</div><div class="line">msg.body.motion.edgeFlags = edgeFlags;</div><div class="line">msg.body.motion.metaState = metaState;</div><div class="line">msg.body.motion.buttonState = buttonState;</div><div class="line">msg.body.motion.xOffset = xOffset;</div><div class="line">msg.body.motion.yOffset = yOffset;</div><div class="line">msg.body.motion.xPrecision = xPrecision;</div><div class="line">msg.body.motion.yPrecision = yPrecision;</div><div class="line">msg.body.motion.downTime = downTime;</div><div class="line">msg.body.motion.eventTime = eventTime;</div><div class="line">msg.body.motion.pointerCount = pointerCount;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</div><div class="line">    msg.body.motion.pointers[i].properties.copyFrom(pointerProperties[i]);</div><div class="line">    msg.body.motion.pointers[i].coords.copyFrom(pointerCoords[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mChannel-&gt;sendMessage(&amp;msg);</div></pre></td></tr></table></figure></p>
<h3 id="2-8"><a href="#2-8" class="headerlink" title="2.8"></a>2.8</h3><p>这一步就要像保存的文件描述符<code>mFd</code>中写入数据了。</p>
<p><em>frameworks/native/libs/input/InputTransport.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">size_t</span> msgLength = msg-&gt;size();</div><div class="line"><span class="keyword">ssize_t</span> nWrite;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    nWrite = ::send(mFd, msg, msgLength, MSG_DONTWAIT | MSG_NOSIGNAL);</div><div class="line">&#125; <span class="keyword">while</span> (nWrite == <span class="number">-1</span> &amp;&amp; errno == EINTR);</div></pre></td></tr></table></figure><br>到这里，Dispatcher终于把event通过当初建立的Channel pair发送给了应用window。这里和旧版本很不同，当初需要先将event放入共享内存，然后发送一个信号进行通知。</p>
<h2 id="3-当前激活Window获得消息"><a href="#3-当前激活Window获得消息" class="headerlink" title="3. 当前激活Window获得消息"></a>3. 当前激活Window获得消息</h2><p>这一节比较复杂，需要回忆大量的前面几章的细节和一定的逻辑推理（连蒙带猜）能力。</p>
<p>先来回忆一下第12章4.5节，在InputChannel注册到Client时，最后一步做了什么。</p>
<p><em>frameworks/base/core/jni/android_view_InputEventReceiver.cpp ：</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mMessageQueue-&gt;getLooper()-&gt;addFd(fd, <span class="number">0</span>, events, <span class="keyword">this</span>, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure><br>这里给主线程的Looper添加的一个需要监听fd，这个fd是Client端的InputChannel的文件描述符。<code>addFd</code>函数的第4个参数是一个回调函数，这里this指NativeInputEventReceiver对象，它是LooperCallback的子类。<code>addFd</code>函数新建了一个Request对象，如下：</p>
<p><em>system/core/libutils/Looper.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Request request;</div><div class="line">request.fd = fd;</div><div class="line">request.ident = ident;</div><div class="line">request.events = events;</div><div class="line">request.seq = mNextRequestSeq++;</div><div class="line"><span class="comment">//回调函数指明是上一步传入的NativeInputEventReceiver对象</span></div><div class="line">request.callback = callback;</div><div class="line">request.data = data;</div><div class="line"><span class="comment">//..</span></div><div class="line"><span class="comment">//将request以fd为关键字加入mRequests</span></div><div class="line">mRequests.add(fd, request);</div></pre></td></tr></table></figure></p>
<p>再次回忆第10章1.6，也就是主线程被阻塞的地方。代码如下：<br><em>system/core/libutils/Looper.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> Looper::pollInner(<span class="keyword">int</span> timeoutMillis) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Adjust the timeout based on when the next message is due.</span></div><div class="line">    <span class="comment">//..</span></div><div class="line">    <span class="comment">//清空mResponses数组</span></div><div class="line">    <span class="comment">// Poll.</span></div><div class="line">    <span class="keyword">int</span> result = POLL_WAKE;</div><div class="line">    mResponses.clear();</div><div class="line">    mResponseIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// We are about to idle.</span></div><div class="line">    mPolling = <span class="literal">true</span>;</div><div class="line">    <span class="comment">//等待epoll监测到IO事件</span></div><div class="line">    <span class="keyword">struct</span> epoll_event eventItems[EPOLL_MAX_EVENTS];</div><div class="line">    <span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</div><div class="line"></div><div class="line">    <span class="comment">//..</span></div><div class="line"></div><div class="line">    <span class="comment">// Handle all events.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</div><div class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;</div><div class="line">        <span class="keyword">uint32_t</span> epollEvents = eventItems[i].events;</div><div class="line">        <span class="keyword">if</span> (fd == mWakeEventFd) &#123;</div><div class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</div><div class="line">                <span class="comment">//这里处理的唤醒事件</span></div><div class="line">                awoken();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ALOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span>, epollEvents);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">	    <span class="comment">//这里处理的是input事件</span></div><div class="line">            <span class="keyword">ssize_t</span> requestIndex = mRequests.indexOfKey(fd);</div><div class="line">            <span class="keyword">if</span> (requestIndex &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> events = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) events |= EVENT_INPUT;</div><div class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLOUT) events |= EVENT_OUTPUT;</div><div class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLERR) events |= EVENT_ERROR;</div><div class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLHUP) events |= EVENT_HANGUP;</div><div class="line">                <span class="comment">//将event加入mResponses</span></div><div class="line">                pushResponse(events, mRequests.valueAt(requestIndex));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">Done: ;</div><div class="line"></div><div class="line">    <span class="comment">//遍历每一个存在mResponses的event</span></div><div class="line">    <span class="comment">// Invoke all response callbacks.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mResponses.size(); i++) &#123;</div><div class="line">        Response&amp; response = mResponses.editItemAt(i);</div><div class="line">        <span class="keyword">if</span> (response.request.ident == POLL_CALLBACK) &#123;</div><div class="line">            <span class="keyword">int</span> fd = response.request.fd;</div><div class="line">            <span class="keyword">int</span> events = response.events;</div><div class="line">            <span class="keyword">void</span>* data = response.request.data;</div><div class="line">            <span class="comment">// Invoke the callback.  Note that the file descriptor may be closed by</span></div><div class="line">            <span class="comment">// the callback (and potentially even reused) before the function returns so</span></div><div class="line">            <span class="comment">// we need to be a little careful when removing the file descriptor afterwards.</span></div><div class="line">            <span class="comment">//这一步开始调用回调函数，说明该文件描述符下有人输入的event</span></div><div class="line">            <span class="keyword">int</span> callbackResult = response.request.callback-&gt;handleEvent(fd, events, data);</div><div class="line">            <span class="keyword">if</span> (callbackResult == <span class="number">0</span>) &#123;</div><div class="line">                removeFd(fd, response.request.seq);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Clear the callback reference in the response structure promptly because we</span></div><div class="line">            <span class="comment">// will not clear the response vector itself until the next poll.</span></div><div class="line">            response.request.callback.clear();</div><div class="line">            result = POLL_CALLBACK;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这一步处理wake事件已经在第10章第1节讲述过了，这里需要处理的另一种事件input event。对input event，先将其放入mResponses数组，然后依次调用他们的回调函数。这里就是NativeInputEventReceiver的handleEvent函数了。</p>
<p><img src="http://img.blog.csdn.net/20160930132531316" alt="这里写图片描述"></p>
<h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>Event分为Input和Output，这里是事件输入，所以先看Input分支。</p>
<p><em>frameworks/base/core/jni/android_view_InputEventReceiver.cpp ：</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> NativeInputEventReceiver::handleEvent(<span class="keyword">int</span> receiveFd, <span class="keyword">int</span> events, <span class="keyword">void</span>* data) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (events &amp; ALOOPER_EVENT_INPUT) &#123;</div><div class="line">        JNIEnv* env = AndroidRuntime::getJNIEnv();</div><div class="line">        <span class="keyword">status_t</span> status = consumeEvents(env, <span class="literal">false</span> <span class="comment">/*consumeBatches*/</span>, <span class="number">-1</span>, <span class="literal">NULL</span>);</div><div class="line">        mMessageQueue-&gt;raiseAndClearException(env, <span class="string">"handleReceiveCallback"</span>);</div><div class="line">        <span class="keyword">return</span> status == OK || status == NO_MEMORY ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (events &amp; ALOOPER_EVENT_OUTPUT) &#123;</div><div class="line">      <span class="comment">//..</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>开始从目标Channel中读出event，然后包装成java层的对象，开始调用java函数进行处理。</p>
<p><em>frameworks/base/core/jni/android_view_InputEventReceiver.cpp ：</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> NativeInputEventReceiver::consumeEvents(JNIEnv* env,</div><div class="line">        <span class="keyword">bool</span> consumeBatches, <span class="keyword">nsecs_t</span> frameTime, <span class="keyword">bool</span>* outConsumedBatch) &#123;</div><div class="line"></div><div class="line">    ScopedLocalRef&lt;jobject&gt; receiverObj(env, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">bool</span> skipCallbacks = <span class="literal">false</span>;</div><div class="line">    <span class="comment">//循环从Channel中读出event</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">uint32_t</span> seq;</div><div class="line">        InputEvent* inputEvent;</div><div class="line">        <span class="comment">//这一步开始从Channel中读取event，存入inputEvent中</span></div><div class="line">        <span class="keyword">status_t</span> status = mInputConsumer.consume(&amp;mInputEventFactory,</div><div class="line">                consumeBatches, frameTime, &amp;seq, &amp;inputEvent);</div><div class="line">        <span class="keyword">if</span> (status) &#123;</div><div class="line">            <span class="keyword">if</span> (status == WOULD_BLOCK) &#123;</div><div class="line">                <span class="keyword">if</span> (!skipCallbacks &amp;&amp; !mBatchedInputEventPending</div><div class="line">                        &amp;&amp; mInputConsumer.hasPendingBatch()) &#123;</div><div class="line">                    <span class="comment">// There is a pending batch.  Come back later.</span></div><div class="line">                    <span class="comment">//..</span></div><div class="line">                <span class="keyword">return</span> OK;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> status;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!skipCallbacks) &#123;</div><div class="line">            <span class="keyword">if</span> (!receiverObj.get()) &#123;</div><div class="line">                <span class="comment">//这里的mReceiverWeakGlobal是java层的InputEventReceiver</span></div><div class="line">                receiverObj.reset(jniGetReferent(env, mReceiverWeakGlobal));</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//根据不同的InputEvent种类，将其转化为java层的inputEventObj</span></div><div class="line">            jobject inputEventObj;</div><div class="line">            <span class="keyword">switch</span> (inputEvent-&gt;getType()) &#123;</div><div class="line">            <span class="keyword">case</span> AINPUT_EVENT_TYPE_KEY:</div><div class="line">                inputEventObj = android_view_KeyEvent_fromNative(env,</div><div class="line">                        <span class="keyword">static_cast</span>&lt;KeyEvent*&gt;(inputEvent));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> AINPUT_EVENT_TYPE_MOTION: &#123;</div><div class="line">                MotionEvent* motionEvent = <span class="keyword">static_cast</span>&lt;MotionEvent*&gt;(inputEvent);</div><div class="line">                <span class="keyword">if</span> ((motionEvent-&gt;getAction() &amp; AMOTION_EVENT_ACTION_MOVE) &amp;&amp; outConsumedBatch) &#123;</div><div class="line">                    *outConsumedBatch = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">                inputEventObj = android_view_MotionEvent_obtainAsCopy(env, motionEvent);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                assert(<span class="literal">false</span>); <span class="comment">// InputConsumer should prevent this from ever happening</span></div><div class="line">                inputEventObj = <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (inputEventObj) &#123;</div><div class="line">                <span class="comment">//开始调用java层的dispatchInputEvent函数</span></div><div class="line">                env-&gt;CallVoidMethod(receiverObj.get(),</div><div class="line">                        gInputEventReceiverClassInfo.dispatchInputEvent, seq, inputEventObj);</div><div class="line">                env-&gt;DeleteLocalRef(inputEventObj);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (skipCallbacks) &#123;</div><div class="line">            <span class="comment">//不需要调用回调函数，则可以直接反馈完成信号</span></div><div class="line">            mInputConsumer.sendFinishedSignal(seq, <span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>我们先看如何从Channel中获取event的，3.3。然后讲解java层的分发过程，3.4。</p>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>从Chuannel中读取一个（一组）event。</p>
<p><em>frameworks/native/libs/input/InputTransport.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> InputConsumer::consume(InputEventFactoryInterface* factory,</div><div class="line">        <span class="keyword">bool</span> consumeBatches, <span class="keyword">nsecs_t</span> frameTime, <span class="keyword">uint32_t</span>* outSeq, InputEvent** outEvent) &#123;</div><div class="line"></div><div class="line">    *outSeq = <span class="number">0</span>;</div><div class="line">    *outEvent = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Fetch the next input message.</span></div><div class="line">    <span class="comment">// Loop until an event can be returned or no additional events are received.</span></div><div class="line">    <span class="keyword">while</span> (!*outEvent) &#123;</div><div class="line">        <span class="keyword">if</span> (mMsgDeferred) &#123;</div><div class="line">            <span class="comment">// mMsg contains a valid input message from the previous call to consume</span></div><div class="line">            <span class="comment">// that has not yet been processed.</span></div><div class="line">            mMsgDeferred = <span class="literal">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Receive a fresh message.</span></div><div class="line">            <span class="comment">//从Channel中读取一个Message</span></div><div class="line">            <span class="keyword">status_t</span> result = mChannel-&gt;receiveMessage(&amp;mMsg);</div><div class="line">            <span class="keyword">if</span> (result) &#123;</div><div class="line">                <span class="comment">// Consume the next batched event unless batches are being held for later.</span></div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//根据message种类构造event</span></div><div class="line">        <span class="keyword">switch</span> (mMsg.header.type) &#123;</div><div class="line">        <span class="keyword">case</span> InputMessage::TYPE_KEY: &#123;</div><div class="line">            KeyEvent* keyEvent = factory-&gt;createKeyEvent();</div><div class="line">            <span class="keyword">if</span> (!keyEvent) <span class="keyword">return</span> NO_MEMORY;</div><div class="line">            </div><div class="line">            initializeKeyEvent(keyEvent, &amp;mMsg);</div><div class="line">            *outSeq = mMsg.body.key.seq;</div><div class="line">            *outEvent = keyEvent;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> AINPUT_EVENT_TYPE_MOTION: &#123;</div><div class="line">            <span class="comment">//对Motion event，需要处理成批的event事件</span></div><div class="line">            <span class="comment">//..</span></div><div class="line">            MotionEvent* motionEvent = factory-&gt;createMotionEvent();</div><div class="line">            <span class="keyword">if</span> (! motionEvent) <span class="keyword">return</span> NO_MEMORY;</div><div class="line"></div><div class="line">            updateTouchState(&amp;mMsg);</div><div class="line">            initializeMotionEvent(motionEvent, &amp;mMsg);</div><div class="line">            *outSeq = mMsg.body.motion.seq;</div><div class="line">            *outEvent = motionEvent;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> UNKNOWN_ERROR;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>mChannel-&gt;receiveMessage(&amp;mMsg)</code>函数在InputChannel中主要如下实现，调用socket函数recv从mFd中读出数据。</p>
<p><em>frameworks/native/libs/input/InputTransport.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nRead = ::recv(mFd, msg, <span class="keyword">sizeof</span>(InputMessage), MSG_DONTWAIT);</div></pre></td></tr></table></figure></p>
<h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><p>回到java层，在获得event后，就需要进行分发了。receiverObj指向的是一个InputEventReceiver对象，这里其实是它的子类WindowInputEventReceiver对象，见第12章第4节。<code>dispatchInputEvent</code>函数还是继承的父类的，没有重写。</p>
<h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3><p>这一步直接调用了下一步。</p>
<h3 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h3><p>将event插入等待事件队列的尾部，然后开始调度这些消息。</p>
<p><em>frameworks/base/core/java/android/view/ViewRootImpl.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueInputEvent</span><span class="params">(InputEvent event,</span></span></div><div class="line">          InputEventReceiver receiver, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> processImmediately) &#123;</div><div class="line">      adjustInputEventForCompatibility(event);</div><div class="line">      <span class="comment">//将event和receiver封装在一起</span></div><div class="line">      QueuedInputEvent q = obtainQueuedInputEvent(event, receiver, flags);</div><div class="line"></div><div class="line">      <span class="comment">// Always enqueue the input event in order, regardless of its time stamp.</span></div><div class="line">      <span class="comment">// We do this because the application or the IME may inject key events</span></div><div class="line">      <span class="comment">// in response to touch events and we want to ensure that the injected keys</span></div><div class="line">      <span class="comment">// are processed in the order they were received and we cannot trust that</span></div><div class="line">      <span class="comment">// the time stamp of injected events are monotonic.</span></div><div class="line">      <span class="comment">//找到尾部插入</span></div><div class="line">      QueuedInputEvent last = mPendingInputEventTail;</div><div class="line">      <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</div><div class="line">          mPendingInputEventHead = q;</div><div class="line">          mPendingInputEventTail = q;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          last.mNext = q;</div><div class="line">          mPendingInputEventTail = q;</div><div class="line">      &#125;</div><div class="line">      mPendingInputEventCount += <span class="number">1</span>;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (processImmediately) &#123;</div><div class="line">          <span class="comment">//立即处理所有的InputEvent</span></div><div class="line">          doProcessInputEvents();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">//发送一个提醒消息</span></div><div class="line">          scheduleProcessInputEvents();</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><br>这里会有两种不同的处理event的方式，一个是立即处理；另一种是向主线程Looper发送<code>MSG_PROCESS_INPUT_EVENTS</code>消息。这里选择立即处理。</p>
<h3 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a>3.7</h3><p>这里会把等待在队列中的event，一口气全处理了。这一步会循环拿出队列中的每一个event，然后调用下一步进行处理。</p>
<h3 id="3-8"><a href="#3-8" class="headerlink" title="3.8"></a>3.8</h3><p>准备交给stage处理。</p>
<p><em>frameworks/base/core/java/android/view/ViewRootImpl.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deliverInputEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//下面开始从某个stage开始</span></div><div class="line"><span class="comment">//寻找适合的stage进行处理</span></div><div class="line">       InputStage stage;</div><div class="line">       <span class="keyword">if</span> (q.shouldSendToSynthesizer()) &#123;</div><div class="line">           stage = mSyntheticInputStage;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           stage = q.shouldSkipIme() ? mFirstPostImeInputStage : mFirstInputStage;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (stage != <span class="keyword">null</span>) &#123;</div><div class="line">           stage.deliver(q);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           finishInputEvent(q);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-9"><a href="#3-9" class="headerlink" title="3.9"></a>3.9</h3><p>下面就讲解一下stage是什么东西。stage可以说是处理event的不同阶段，如果上一个stage处理不了，就交给下一个stage处理，总有一个stage可以将event处理掉。这里stage的处理顺序图如下所示：</p>
<p><img src="http://img.blog.csdn.net/20160927223222813" alt="这里写图片描述"></p>
<ol>
<li>NativePrelmeInputStage: Delivers pre-ime input events to a native activity. Does not support pointer events. 其实我也不清楚到底是干什么的，没有想到具体的应用场景。</li>
<li>ViewPreImeInputStage: Delivers pre-ime input events to the view hierarchy. Does not support pointer events. 这一步只处理KeyEvent，在InputMethod处理这个KeyEvent之前，可以截获这个event。典型的例子是处理BACK key。</li>
<li>ImeInputStage: Delivers input events to the ime. Does not support pointer events. 将event交给IputMethodManager处理。</li>
<li>EarlyPostImeInputStage: Performs early processing of post-ime input events. 在交给下一阶段之前，先处理筛选一些event。</li>
<li>NativePostImeInputStage: Delivers post-ime input events to a native activity. 尝试让InputQueue发送event给native activity。</li>
<li>ViewPostImeInputStage: Delivers post-ime input events to the view hierarchy. 将event发送给view的层次结构中。</li>
<li>SyntheticInputStage: Performs synthesis of new input events from unhandled input events. 最后一个阶段，处理综合事件，比如trackball, joystick等。</li>
</ol>
<p>这里我们暂且研究第6种stage，这个stage和View有直接关系。</p>
<h3 id="3-10"><a href="#3-10" class="headerlink" title="3.10"></a>3.10</h3><p>这里根据event的类型分别进行处理。我们先关注一下PointerEvent如何处理的。</p>
<h3 id="3-11"><a href="#3-11" class="headerlink" title="3.11"></a>3.11</h3><p>将event交给mView来处理，这里mView就是一个DecorView对象。</p>
<h3 id="3-12"><a href="#3-12" class="headerlink" title="3.12"></a>3.12</h3><p>这一步是DecorView继承自View的方法，将event分为TouchEvent和GenericMotionEvent来处理。先看TouchEvent如何处理。</p>
<h3 id="3-13"><a href="#3-13" class="headerlink" title="3.13"></a>3.13</h3><p>DecorView重写了该函数。这里调用<code>getCallback</code>函数来获取一个回调对象。该函数是PhoneWindow继承自Window类的方法，获得是mCallback。那么这个mCallback到底是谁呢？</p>
<p>回顾一下Activity的创建过程，在Activity创建以后会调用attach函数对Activity进行一定的初始化，其中就创建了PhoneWindow，同时设置了callback为Activity它自己。所以这一步获得是一个Activity对象，然后调用它的函数继续分发event。</p>
<h3 id="3-14"><a href="#3-14" class="headerlink" title="3.14"></a>3.14</h3><p>Event交到Activity手中进行处理。为什么会先交给Activity处理？目的是让开发者可以重写这个函数，从而可以在分发这个事件之前进行截获。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Called to process touch screen events.  You can override this to</div><div class="line"> * intercept all touch screen events before they are dispatched to the</div><div class="line"> * window.  Be sure to call this implementation for touch screen events</div><div class="line"> * that should be handled normally.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> ev The touch screen event.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> boolean Return true if this event was consumed.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        onUserInteraction();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//绕一圈有交给PhoneWindow处理</span></div><div class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//没有view可以处理，那么activity自己处理</span></div><div class="line">    <span class="comment">//默认就是放弃，也可以重写实现特定功能</span></div><div class="line">    <span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-15"><a href="#3-15" class="headerlink" title="3.15"></a>3.15</h3><p>什么也没做，将event传回DecorView，让它处理。</p>
<p>###3.16<br>这里DecorView又交给dispatchTouchEvent处理。这里的dispatchTouchEvent是源自父类ViewGroup的函数，而不是自己重写的函数。</p>
<p>###3.17<br>ViewGroup是View的子类。它管理了一组View在mChildren数组中，按照设计模式的说法叫Composite模式。</p>
<p><img src="http://img.blog.csdn.net/20160927225350157" alt="这里写图片描述"></p>
<p>这一步会依次访问每个子view，判断他们是否可以处理该event，如果能就交给它处理；没人能处理就自己处理。无论哪种方式，都会调用下一步<code>dispatchTransformedTouchEvent</code>函数。</p>
<p><em>frameworks/base/core/java/android/view/ViewGroup.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">    <span class="comment">// If the event targets the accessibility focused view and this is it, start</span></div><div class="line">    <span class="comment">// normal event dispatch. Maybe a descendant is what will handle the click.</span></div><div class="line">    <span class="keyword">if</span> (ev.isTargetAccessibilityFocus() &amp;&amp; isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">        ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//如果Window没有被遮住，才进行以下过程</span></div><div class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</div><div class="line">        <span class="comment">//..</span></div><div class="line">        TouchTarget newTouchTarget = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> alreadyDispatchedToNewTouchTarget = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</div><div class="line">                <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</div><div class="line">                    <span class="comment">// Find a child that can receive the event.</span></div><div class="line">                    <span class="comment">// Scan children from front to back.</span></div><div class="line">                    <span class="comment">//根据z坐标进行排序，从小到大的顺序</span></div><div class="line">                    <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</div><div class="line">                    <span class="comment">//也可以自己定制顺序</span></div><div class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></div><div class="line">                            &amp;&amp; isChildrenDrawingOrderEnabled();</div><div class="line">                    <span class="comment">//所有子View存放在mChildren中</span></div><div class="line">                    <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">                    <span class="comment">//按z的值，从大到小开始遍历</span></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> childIndex = customOrder</div><div class="line">                                ? getChildDrawingOrder(childrenCount, i) : i;</div><div class="line">                        <span class="keyword">final</span> View child = (preorderedList == <span class="keyword">null</span>)</div><div class="line">                                ? children[childIndex] : preorderedList.get(childIndex);</div><div class="line"></div><div class="line">                        <span class="comment">// If there is a view that has accessibility focus we want it</span></div><div class="line">                        <span class="comment">// to get the event first and if not handled we will perform a</span></div><div class="line">                        <span class="comment">// normal dispatch. We may do a double iteration but this is</span></div><div class="line">                        <span class="comment">// safer given the timeframe.</span></div><div class="line">                        <span class="comment">//如果指定了一个view去获得这个event，一直循环到那个view为止</span></div><div class="line">                        <span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</div><div class="line">                                <span class="keyword">continue</span>;</div><div class="line">                            &#125;</div><div class="line">                            childWithAccessibilityFocus = <span class="keyword">null</span>;</div><div class="line">                            i = childrenCount - <span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="comment">//判断该view是否可以接受这个event，是否在这个view范围内</span></div><div class="line">                        <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</div><div class="line">                                || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</div><div class="line">                            ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="comment">//如果该child正在处理上一个event</span></div><div class="line">                        newTouchTarget = getTouchTarget(child);</div><div class="line">                        <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="comment">// Child is already receiving touch within its bounds.</span></div><div class="line">                            <span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></div><div class="line">                            newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//尝试去向该child发送event</span></div><div class="line">                        <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">                            <span class="comment">// Child wants to receive touch within its bounds.</span></div><div class="line">                            <span class="comment">//..</span></div><div class="line">                            <span class="comment">//将child加入mFirstTouchTarget为首的队列头部</span></div><div class="line">                            newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                            alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//..</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Dispatch to touch targets.</span></div><div class="line">        <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</div><div class="line">     <span class="comment">//没有child可以处理，那么就自己处理</span></div><div class="line">            <span class="comment">// No touch targets so treat this as an ordinary view.</span></div><div class="line">            handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</div><div class="line">                    TouchTarget.ALL_POINTER_IDS);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Dispatch to touch targets, excluding the new touch target if we already</span></div><div class="line">            <span class="comment">// dispatched to it.  Cancel touch targets if necessary.</span></div><div class="line">            TouchTarget predecessor = <span class="keyword">null</span>;</div><div class="line">            TouchTarget target = mFirstTouchTarget;</div><div class="line">            <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> TouchTarget next = target.next;</div><div class="line">                <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class="line">                    handled = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//..</span></div><div class="line">                    <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class="line">                            target.child, target.pointerIdBits)) &#123;</div><div class="line">                        handled = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//..</span></div><div class="line">                &#125;</div><div class="line">                predecessor = target;</div><div class="line">                target = next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//..</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-18"><a href="#3-18" class="headerlink" title="3.18"></a>3.18</h3><p>ViewGroup会决定自己处理还是交给child处理。在ViewGroup自己处理，或者child为不再是一个ViewGroup时，则开始调用View的dispatchTouchEvent函数。</p>
<p><em>frameworks/base/core/java/android/view/ViewGroup.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//省略了计算坐标便宜的过程</span></div><div class="line"><span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="comment">//ViewGroup决定自己处理</span></div><div class="line">	handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//交给child处理，child可能是个view</span></div><div class="line">	<span class="comment">//也可能还是个ViewGroup，这就重复3.17步骤</span></div><div class="line">        handled = child.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-19"><a href="#3-19" class="headerlink" title="3.19"></a>3.19</h3><p>这一步就会调用用户自己实现的Listener；如果没有Listener，则会调用view默认的处理函数。</p>
<p><em>frameworks/base/core/java/android/view/View.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">      <span class="comment">// If the event should be handled by accessibility focus first.</span></div><div class="line">      <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</div><div class="line">          <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></div><div class="line">          <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">              <span class="comment">//该View不可访问的状态，返回</span></div><div class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">      <span class="comment">//..</span></div><div class="line">      <span class="comment">//先判断该View是否被遮挡，没被遮挡才进行处理</span></div><div class="line">      <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">          <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">          <span class="comment">//获得注册的Listener，看是否有注册OnTouchListener</span></div><div class="line">          ListenerInfo li = mListenerInfo;</div><div class="line">          <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">                  &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                  &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">                    <span class="comment">//调用Listener的回调函数，处理event</span></div><div class="line">              result = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//View也可以采用默认的处理onTouchEvent</span></div><div class="line">          <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">              result = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//..</span></div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><br>默认处理函数onTouchEvent会处理一些基本的操作，比如button的按下松开的效果，滚动容器产生滚动的效果等。</p>
<h3 id="3-20"><a href="#3-20" class="headerlink" title="3.20"></a>3.20</h3><p>在InputStage完成处理event的任务后，会开始返回完成的消息。</p>
<h3 id="3-21"><a href="#3-21" class="headerlink" title="3.21"></a>3.21</h3><p>开始调用c++函数。</p>
<h3 id="3-22"><a href="#3-22" class="headerlink" title="3.22"></a>3.22</h3><p>将指针转化为NativeInputEventReceiver指针，交给它来处理。</p>
<p><em>frameworks/base/core/jni/android_view_InputEventReceiver.cpp ：</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sp&lt;NativeInputEventReceiver&gt; receiver = <span class="keyword">reinterpret_cast</span>&lt;NativeInputEventReceiver*&gt;(receiverPtr);</div><div class="line"></div><div class="line"><span class="keyword">status_t</span> status = receiver-&gt;finishInputEvent(seq, handled);</div></pre></td></tr></table></figure></p>
<h3 id="3-23"><a href="#3-23" class="headerlink" title="3.23"></a>3.23</h3><p>InputConsumer依次处理每个sequence，发送完成信号。</p>
<h3 id="3-24"><a href="#3-24" class="headerlink" title="3.24"></a>3.24</h3><p>向channel发送完成消息。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> InputConsumer::sendUnchainedFinishedSignal(<span class="keyword">uint32_t</span> seq, <span class="keyword">bool</span> handled) &#123;</div><div class="line">    InputMessage msg;</div><div class="line">    msg.header.type = InputMessage::TYPE_FINISHED;</div><div class="line">    msg.body.finished.seq = seq;</div><div class="line">    msg.body.finished.handled = handled;</div><div class="line">    <span class="keyword">return</span> mChannel-&gt;sendMessage(&amp;msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>向Channel写入事件后，处于睡眠的InputDispatcher被唤醒，开始分发下一个event。</p>
<h2 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h2><p>到这里，Input event的处理流程已经分析完了，心好累。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android系统源码阅读（13）：Input消息的分发过程&quot;&gt;&lt;a href=&quot;#Android系统源码阅读（13）：Input消息的分发过程&quot; class=&quot;headerlink&quot; title=&quot;Android系统源码阅读（13）：Input消息的分发过程&quot;&gt;&lt;/a&gt;Android系统源码阅读（13）：Input消息的分发过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;请对照AOSP版本：6.0.1_r50。学校电脑好渣，看源码时卡半天&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;先回顾一下前两篇文章。在设备没有事件输入的时候，InputReader和InputDispatcher都处于睡眠状态。当输入事件发生，InputReader首先被激活，然后发送读取消息，激活Dispatcher。Dispatcher被激活以后，将消息发送给当前激活窗口的主线程，然后睡眠等待主线程处理完这个事件。主线程被激活后，会处理相应的消息，处理完毕后反馈给Dispatcher，从而Dispatcher可以继续发送消息。&lt;/p&gt;
&lt;h2 id=&quot;1-InputReader获取事件&quot;&gt;&lt;a href=&quot;#1-InputReader获取事件&quot; class=&quot;headerlink&quot; title=&quot;1. InputReader获取事件&quot;&gt;&lt;/a&gt;1. InputReader获取事件&lt;/h2&gt;&lt;p&gt;回顾一下第11章4.2中，InputReader线程在获取事件以后，会调用&lt;code&gt;processEventsLocked(mEventBuffer, count);&lt;/code&gt;处理事件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160927222615741&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(12):InputChannel的注册过程</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-12-InputChannel%E7%9A%84%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-12-InputChannel的注册过程/</id>
    <published>2017-02-14T06:24:58.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>请对照AOSP版本：6.0.1_r50。 </p>
</blockquote>
<p>InputManager可以获得输入事件并分发，Activity需要处理这些输入事件。那么，这两者之间如何建立的连接呢？这就需要InputChannel作为桥梁建立两者之间的通道。</p>
<h2 id="1-ViewRootImpl创建InputChannel"><a href="#1-ViewRootImpl创建InputChannel" class="headerlink" title="1. ViewRootImpl创建InputChannel"></a>1. ViewRootImpl创建InputChannel</h2><p>这里ViewRoot类已经消失了，由ViewRootImpl替代。Activity在创建时会将自己的DecorView设置给对应的ViewRootImpl。</p>
<p><img src="http://img.blog.csdn.net/20160924164736978" alt="这里写图片描述"></p>
<a id="more"></a>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>这一步会创建client的InputChannel，并且将当前启动的Activity的窗口传递给WindowManagerService。</p>
<p><em>frameworks/base/core/java/android/view/ViewRootImpl.java</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * We have one child</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//将view设置为传入的DecorView</span></div><div class="line">            mView = view;</div><div class="line">            <span class="comment">//..</span></div><div class="line"></div><div class="line">            mAdded = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">int</span> res; <span class="comment">/* = WindowManagerImpl.ADD_OKAY; */</span></div><div class="line"></div><div class="line">            <span class="comment">//新建InputChannel</span></div><div class="line">            <span class="keyword">if</span> ((mWindowAttributes.inputFeatures</div><div class="line">                    &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == <span class="number">0</span>) &#123;</div><div class="line">                mInputChannel = <span class="keyword">new</span> InputChannel();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mOrigWindowType = mWindowAttributes.type;</div><div class="line">                mAttachInfo.mRecomputeGlobalAttributes = <span class="keyword">true</span>;</div><div class="line">                collectViewAttributes();</div><div class="line">                <span class="comment">//mWindowSession是一个Binder代理对象</span></div><div class="line">                <span class="comment">//它引用了运行在WindowManagerService中的一个类型为Session的Binder本地对象</span></div><div class="line">                <span class="comment">//向WindowManagerService添加正在启动的Activity的窗口</span></div><div class="line">                <span class="comment">//这里还会将InputChannel传递过去</span></div><div class="line">                res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,</div><div class="line">                        getHostVisibility(), mDisplay.getDisplayId(),</div><div class="line">                        mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,</div><div class="line">                        mAttachInfo.mOutsets, mInputChannel);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//..</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (view <span class="keyword">instanceof</span> RootViewSurfaceTaker) &#123;</div><div class="line">                mInputQueueCallback =</div><div class="line">                    ((RootViewSurfaceTaker)view).willYouTakeTheInputQueue();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (mInputChannel != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mInputQueueCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                    mInputQueue = <span class="keyword">new</span> InputQueue();</div><div class="line">                    mInputQueueCallback.onInputQueueCreated(mInputQueue);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将InputChannel和主线程关联起来，在下面会详细讲解</span></div><div class="line">                mInputEventReceiver = <span class="keyword">new</span> WindowInputEventReceiver(mInputChannel,</div><div class="line">                        Looper.myLooper());</div><div class="line">            &#125;</div><div class="line">            view.assignParent(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>这一步是进程间的请求，从应用进程转到WindowManagerService进程，对应于1.1中的函数addToDisplay。这里会补足一些参数，开始调用下一步函数。</p>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><p>这一步也是调整一些参数，然后交给WindowManagerService来处理。</p>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h3><p>这里会将传入的Window存入Map来进行统一管理，同时创建了一对server/client端的InputChannel。</p>
<p><em>frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addWindow</span><span class="params">(Session session, IWindow client, <span class="keyword">int</span> seq,</span></span></div><div class="line">         WindowManager.LayoutParams attrs, <span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId,</div><div class="line">         Rect outContentInsets, Rect outStableInsets, Rect outOutsets,</div><div class="line">         InputChannel outInputChannel) &#123;</div><div class="line"></div><div class="line">         <span class="comment">//先对添加的window做一些检查，省略..</span></div><div class="line"></div><div class="line">         <span class="comment">//创建了一个WindowSatete对象</span></div><div class="line">         WindowState win = <span class="keyword">new</span> WindowState(<span class="keyword">this</span>, session, client, token,</div><div class="line">                 attachedWindow, appOp[<span class="number">0</span>], seq, attrs, viewVisibility, displayContent);</div><div class="line"></div><div class="line">         <span class="comment">//..</span></div><div class="line">         </div><div class="line">         <span class="keyword">if</span> (outInputChannel != <span class="keyword">null</span> &amp;&amp; (attrs.inputFeatures</div><div class="line">                 &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == <span class="number">0</span>) &#123;</div><div class="line">             String name = win.makeInputChannelName();</div><div class="line">             <span class="comment">//创建了一个InputChannel对，在1.5中详细讲解</span></div><div class="line">             InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);</div><div class="line">             <span class="comment">//一个放在WindowState里作为server端的InputChannel</span></div><div class="line">             win.setInputChannel(inputChannels[<span class="number">0</span>]);</div><div class="line">             <span class="comment">//一个转化为client传递过来的outInputChannel</span></div><div class="line">             inputChannels[<span class="number">1</span>].transferTo(outInputChannel);</div><div class="line">             <span class="comment">//从上一篇文章中的1.1可知，InputManager作为参数传入</span></div><div class="line">             <span class="comment">//WindowManagerService的构造函数，并且存放在mInputManager中</span></div><div class="line">             <span class="comment">//下面章节会详细讲述如何注册server端的InputChannel</span></div><div class="line">             mInputManager.registerInputChannel(win.mInputChannel, win.mInputWindowHandle);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="comment">// From now on, no exceptions or errors allowed!</span></div><div class="line">         <span class="comment">//将win放入mWindowMap，以client的binder为关键字</span></div><div class="line">         mWindowMap.put(client.asBinder(), win);</div><div class="line">       </div><div class="line">         <span class="comment">//将win加入相应的list，省略..</span></div><div class="line"></div><div class="line">         mInputMonitor.setUpdateInputWindowsNeededLw();</div><div class="line"></div><div class="line">         <span class="keyword">boolean</span> focusChanged = <span class="keyword">false</span>;</div><div class="line">         <span class="keyword">if</span> (win.canReceiveKeys()) &#123;</div><div class="line">             focusChanged = updateFocusedWindowLocked(UPDATE_FOCUS_WILL_ASSIGN_LAYERS,</div><div class="line">                     <span class="keyword">false</span> <span class="comment">/*updateInputWindows*/</span>);</div><div class="line">             <span class="keyword">if</span> (focusChanged) &#123;</div><div class="line">                 imMayMove = <span class="keyword">false</span>;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (imMayMove) &#123;</div><div class="line">             moveInputMethodWindowsIfNeededLocked(<span class="keyword">false</span>);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         assignLayersLocked(displayContent.getWindowList());</div><div class="line">         <span class="comment">// Don't do layout here, the window must call</span></div><div class="line">         <span class="comment">// relayout to be displayed, so we'll do it there.</span></div><div class="line"></div><div class="line">         <span class="keyword">if</span> (focusChanged) &#123;</div><div class="line">             mInputMonitor.setInputFocusLw(mCurrentFocus, <span class="keyword">false</span> <span class="comment">/*updateInputWindows*/</span>);</div><div class="line">         &#125;</div><div class="line">         mInputMonitor.updateInputWindowsLw(<span class="keyword">false</span> <span class="comment">/*force*/</span>);</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> res;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h3><p>这一步会将任务交给c++层来处理。</p>
<h3 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h3><p>这一步对应的c++的函数为<code>android_view_InputChannel_nativeOpenInputChannelPair</code>，它会创建两个InputChannel，并返回。</p>
<p><em>frameworks/base/core/jni/android_view_InputChannel.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> jobjectArray <span class="title">android_view_InputChannel_nativeOpenInputChannelPair</span><span class="params">(JNIEnv* env,</span></span></div><div class="line">        jclass clazz, jstring nameObj) &#123;</div><div class="line">    <span class="comment">//将java String变为char*</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* nameChars = env-&gt;GetStringUTFChars(nameObj, <span class="literal">NULL</span>);</div><div class="line">    <span class="function">String8 <span class="title">name</span><span class="params">(nameChars)</span></span>;</div><div class="line">    env-&gt;ReleaseStringUTFChars(nameObj, nameChars);</div><div class="line"></div><div class="line">    sp&lt;InputChannel&gt; serverChannel;</div><div class="line">    sp&lt;InputChannel&gt; clientChannel;</div><div class="line">    <span class="comment">//创建c++层的两个Channel，将在下一步详细讲解</span></div><div class="line">    <span class="keyword">status_t</span> result = InputChannel::openInputChannelPair(name, serverChannel, clientChannel);</div><div class="line">    </div><div class="line">    jobjectArray channelPair = env-&gt;NewObjectArray(<span class="number">2</span>, gInputChannelClassInfo.clazz, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="comment">//创建java的server channel</span></div><div class="line">    jobject serverChannelObj = android_view_InputChannel_createInputChannel(env,</div><div class="line">            <span class="keyword">new</span> NativeInputChannel(serverChannel));</div><div class="line">    <span class="comment">//创建java的client channel</span></div><div class="line">    jobject clientChannelObj = android_view_InputChannel_createInputChannel(env,</div><div class="line">            <span class="keyword">new</span> NativeInputChannel(clientChannel));</div><div class="line">    <span class="comment">//存入java数组</span></div><div class="line">    env-&gt;SetObjectArrayElement(channelPair, <span class="number">0</span>, serverChannelObj);</div><div class="line">    env-&gt;SetObjectArrayElement(channelPair, <span class="number">1</span>, clientChannelObj);</div><div class="line">    <span class="keyword">return</span> channelPair;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h3><p>注意，这一步真的要创建ChannelPair了。</p>
<p><em>frameworks/native/libs/input/InputTransport.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> InputChannel::openInputChannelPair(<span class="keyword">const</span> String8&amp; name,</div><div class="line">        sp&lt;InputChannel&gt;&amp; outServerChannel, sp&lt;InputChannel&gt;&amp; outClientChannel) &#123;</div><div class="line">    <span class="keyword">int</span> sockets[<span class="number">2</span>];</div><div class="line">    <span class="comment">//这个socketpair建立的是一个可以双向通信的管道，创建一对套接字描述符</span></div><div class="line">    <span class="keyword">if</span> (socketpair(AF_UNIX, SOCK_SEQPACKET, <span class="number">0</span>, sockets)) &#123;</div><div class="line">        <span class="keyword">status_t</span> result = -errno;</div><div class="line">        ALOGE(<span class="string">"channel '%s' ~ Could not create socket pair.  errno=%d"</span>,</div><div class="line">                name.<span class="built_in">string</span>(), errno);</div><div class="line">        outServerChannel.clear();</div><div class="line">        outClientChannel.clear();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置管道缓存的大小</span></div><div class="line">    <span class="keyword">int</span> bufferSize = SOCKET_BUFFER_SIZE;</div><div class="line">    setsockopt(sockets[<span class="number">0</span>], SOL_SOCKET, SO_SNDBUF, &amp;bufferSize, <span class="keyword">sizeof</span>(bufferSize));</div><div class="line">    setsockopt(sockets[<span class="number">0</span>], SOL_SOCKET, SO_RCVBUF, &amp;bufferSize, <span class="keyword">sizeof</span>(bufferSize));</div><div class="line">    setsockopt(sockets[<span class="number">1</span>], SOL_SOCKET, SO_SNDBUF, &amp;bufferSize, <span class="keyword">sizeof</span>(bufferSize));</div><div class="line">    setsockopt(sockets[<span class="number">1</span>], SOL_SOCKET, SO_RCVBUF, &amp;bufferSize, <span class="keyword">sizeof</span>(bufferSize));</div><div class="line"></div><div class="line">    <span class="comment">//开始new 两个InputChannel</span></div><div class="line">    String8 serverChannelName = name;</div><div class="line">    serverChannelName.append(<span class="string">" (server)"</span>);</div><div class="line">    outServerChannel = <span class="keyword">new</span> InputChannel(serverChannelName, sockets[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    String8 clientChannelName = name;</div><div class="line">    clientChannelName.append(<span class="string">" (client)"</span>);</div><div class="line">    outClientChannel = <span class="keyword">new</span> InputChannel(clientChannelName, sockets[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>socketpair创建了一对无名的套接字描述符（只能在AF_UNIX域中使用），描述符存储于一个二元数组s[2] .这对套接字可以进行双工通信，每一个描述符既可以读也可以写。这个在同一个进程中也可以进行通信，向s[0]中写入，就可以从s[1]中读取（只能从s[1]中读取），也可以在s[1]中写入，然后从s[0]中读取；但是，若没有在0端写入，而从1端读取，则1端的读取操作会阻塞，即使在1端写入，也不能从1读取，仍然阻塞；反之亦然。<a href="http://liulixiaoyao.blog.51cto.com/1361095/533469/" target="_blank" rel="external">该段解释来自</a>。</p>
<p>这里new了两个InputChannel，该类的构造函数如下：</p>
<p><em>frameworks/native/libs/input/InputTransport.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">InputChannel::InputChannel(<span class="keyword">const</span> String8&amp; name, <span class="keyword">int</span> fd) :</div><div class="line">        mName(name), mFd(fd) &#123;</div><div class="line">   <span class="comment">//..</span></div><div class="line">   <span class="keyword">int</span> result = fcntl(mFd, F_SETFL, O_NONBLOCK);</div><div class="line">   <span class="comment">//..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这里将描述符mFd设置为nonblock。</p>
<p>显然，这里和Android 2.3版本有着很大区别。在旧版本中使用的是匿名共享内存和两个pipe来实现双向的通信。显然，新版本利用的linux系统的新机制，更为简洁高效。</p>
<p>以上步骤实在新Activity建立，窗口开始创建时执行的。这里主要就让WindowManagerService建立一对InputChannel，将Activity的Window和InputDispatcher建立起连接，从而传输输入事件。</p>
<h2 id="2-Server端注册InputChannel"><a href="#2-Server端注册InputChannel" class="headerlink" title="2. Server端注册InputChannel"></a>2. Server端注册InputChannel</h2><p>在1.4中，创建了一对InputChannel，其中Server端的InputChannel会注册进InputManagerService。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mInputManager.registerInputChannel(win.mInputChannel, win.mInputWindowHandle);</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160924164829942" alt="这里写图片描述"></p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p>这一步就检验了一下传入的InputChannel是否为空。下面一言不合就开始调用native函数。</p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p><em>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将指针转化为NativeInputManager</span></div><div class="line">NativeInputManager* im = <span class="keyword">reinterpret_cast</span>&lt;NativeInputManager*&gt;(ptr);</div><div class="line"><span class="comment">//将java的InputChannel对象转化为一个c++层的InputChannel对象</span></div><div class="line">sp&lt;InputChannel&gt; inputChannel = android_view_InputChannel_getInputChannel(env,</div><div class="line">        inputChannelObj);</div><div class="line"><span class="comment">//将InputWindowHandle转化为c++层的InputWindowHandler</span></div><div class="line">sp&lt;InputWindowHandle&gt; inputWindowHandle =</div><div class="line">        android_server_InputWindowHandle_getHandle(env, inputWindowHandleObj);</div><div class="line"></div><div class="line"><span class="comment">//将注册任务交给NativeInputManager</span></div><div class="line"><span class="keyword">status_t</span> status = im-&gt;registerInputChannel(env, inputChannel, inputWindowHandle, monitor);</div><div class="line"><span class="comment">//..</span></div></pre></td></tr></table></figure></p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><p>这一步通过NativeInputManager中的InputManager，InputManager通过InputDispatcher来注册InputChannel。<br><em>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mInputManager-&gt;getDispatcher()-&gt;registerInputChannel(</div><div class="line">            inputChannel, inputWindowHandle, monitor);</div></pre></td></tr></table></figure></p>
<h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><p>终于，将Server端的InputChannel交给了InputDispatcher。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">AutoMutex _l(mLock);</div><div class="line"><span class="comment">//判断是否该InputChannel已经添加过</span></div><div class="line"><span class="keyword">if</span> (getConnectionIndexLocked(inputChannel) &gt;= <span class="number">0</span>) &#123;</div><div class="line">    ALOGW(<span class="string">"Attempted to register already registered input channel '%s'"</span>,</div><div class="line">            inputChannel-&gt;getName().<span class="built_in">string</span>());</div><div class="line">    <span class="keyword">return</span> BAD_VALUE;</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建一个Connection</span></div><div class="line">sp&lt;Connection&gt; connection = <span class="keyword">new</span> Connection(inputChannel, inputWindowHandle, monitor);</div><div class="line"></div><div class="line"><span class="comment">//获得InputChannel的文件描述符</span></div><div class="line"><span class="keyword">int</span> fd = inputChannel-&gt;getFd();</div><div class="line"><span class="comment">//将Connection 以文件描述符为关键字，添加入m</span></div><div class="line">mConnectionsByFd.add(fd, connection);</div><div class="line"></div><div class="line"><span class="comment">//..</span></div><div class="line"><span class="comment">//将文件描述符添加Looper，让Looper监控InputChannel的IO事件</span></div><div class="line"><span class="comment">//当IO事件发生时，就会调用回调函数handleReceiveCallback</span></div><div class="line">mLooper-&gt;addFd(fd, <span class="number">0</span>, ALOOPER_EVENT_INPUT, handleReceiveCallback, <span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<p>到这一步，InputDispatcher已经将InputChannel的Server端管理起来了。当Dispatcher将一个事件通过Channel发送给应用程序窗口以后，会进入休眠状态，直到应用窗口再次通过这个Channel返回一个消息将其激活，Dispatcher才准备发送下一个消息。</p>
<p>这里创建的Connection，Connection中又创建了InputPublisher。InputPublisher可以直接将消息通过这个InputChannel发送出去。</p>
<h2 id="3-向InputManagerService注册当前激活的应用程序窗口"><a href="#3-向InputManagerService注册当前激活的应用程序窗口" class="headerlink" title="3. 向InputManagerService注册当前激活的应用程序窗口"></a>3. 向InputManagerService注册当前激活的应用程序窗口</h2><p>再次回顾一下1.4的，在1.4中WindowManagerService在焦点发生改变时，需要改变Focused Window。这里会在InputMonitor中注册当前激活的窗口。</p>
<p><img src="http://img.blog.csdn.net/20160924164924027" alt="这里写图片描述"></p>
<h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>在InputMonitor中，有mInputFocus保存着当前激活的窗口，这里会将mInputFocus设置为传入的newWindow。然后调用updateInputWindowLW继续更新激活的窗口。</p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>在1.4中，每个window会被加入一个Window List。这里会遍历这些List中的Windows，然后将这些windows进一步交给InputManagerService处理。</p>
<p><em>rameworks/base/services/core/java/com/android/server/wm/InputMonitor.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Populate the input window list with information about all of the windows that</span></div><div class="line"><span class="comment">// could potentially receive input.</span></div><div class="line"><span class="comment">// As an optimization, we could try to prune the list of windows but this turns</span></div><div class="line"><span class="comment">// out to be difficult because only the native code knows for sure which window</span></div><div class="line"><span class="comment">// currently has touch focus.</span></div><div class="line"><span class="comment">//..</span></div><div class="line"></div><div class="line"><span class="comment">// Add all windows on the default display.</span></div><div class="line"><span class="comment">//mService指WindowManagerService</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> numDisplays = mService.mDisplayContents.size();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> displayNdx = <span class="number">0</span>; displayNdx &lt; numDisplays; ++displayNdx) &#123;</div><div class="line">    WindowList windows = mService.mDisplayContents.valueAt(displayNdx).getWindowList();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> winNdx = windows.size() - <span class="number">1</span>; winNdx &gt;= <span class="number">0</span>; --winNdx) &#123;</div><div class="line">        <span class="keyword">final</span> WindowState child = windows.get(winNdx);</div><div class="line">        <span class="keyword">final</span> InputChannel inputChannel = child.mInputChannel;</div><div class="line">        <span class="keyword">final</span> InputWindowHandle inputWindowHandle = child.mInputWindowHandle;</div><div class="line">        <span class="keyword">if</span> (inputChannel == <span class="keyword">null</span> || inputWindowHandle == <span class="keyword">null</span> || child.mRemoved) &#123;</div><div class="line">            <span class="comment">// Skip this window because it cannot possibly receive input.</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//..</span></div><div class="line">        </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> flags = child.mAttrs.flags;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = child.mAttrs.privateFlags;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> type = child.mAttrs.type;</div><div class="line">        <span class="comment">//只有一个window可以获得Focus</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> hasFocus = (child == mInputFocus);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isVisible = child.isVisibleLw();</div><div class="line"></div><div class="line">        <span class="comment">//..</span></div><div class="line">        addInputWindowHandleLw(inputWindowHandle, child, flags, type, isVisible, hasFocus,</div><div class="line">                hasWallpaper);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Send windows to native code.</span></div><div class="line"><span class="comment">//将这些windows交给InputManager继续进行注册</span></div><div class="line">mService.mInputManager.setInputWindows(mInputWindowHandles);</div><div class="line"></div><div class="line"><span class="comment">// Clear the list in preparation for the next round.</span></div><div class="line">clearInputWindowHandlesLw();</div></pre></td></tr></table></figure></p>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>这一步InputManagerService将任务交给了c++层。</p>
<h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><p>进入c++层，将这些windowHandles交给NativeInputManager。</p>
<p><em>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeSetInputWindows</span><span class="params">(JNIEnv* env, jclass <span class="comment">/* clazz */</span>,</span></span></div><div class="line">        jlong ptr, jobjectArray windowHandleObjArray) &#123;</div><div class="line">    <span class="comment">//将ptr转化为指针</span></div><div class="line">    NativeInputManager* im = <span class="keyword">reinterpret_cast</span>&lt;NativeInputManager*&gt;(ptr);</div><div class="line">    <span class="comment">//windowHandleObjArray是传入的windowHandles</span></div><div class="line">    im-&gt;setInputWindows(env, windowHandleObjArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3><p>这一步先将java的windowHandle变为c++对象，然后这些windowHandle被交给InputDispatcher处理。</p>
<p><em>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (windowHandleObjArray) &#123;</div><div class="line">      jsize length = env-&gt;GetArrayLength(windowHandleObjArray);</div><div class="line">      <span class="comment">//将java对象转化为c++对象</span></div><div class="line">      <span class="keyword">for</span> (jsize i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">          jobject windowHandleObj = env-&gt;GetObjectArrayElement(windowHandleObjArray, i);</div><div class="line">          <span class="keyword">if</span> (! windowHandleObj) &#123;</div><div class="line">              <span class="keyword">break</span>; <span class="comment">// found null element indicating end of used portion of the array</span></div><div class="line">          &#125;</div><div class="line"></div><div class="line">          sp&lt;InputWindowHandle&gt; windowHandle =</div><div class="line">                  android_server_InputWindowHandle_getHandle(env, windowHandleObj);</div><div class="line">          <span class="keyword">if</span> (windowHandle != <span class="literal">NULL</span>) &#123;</div><div class="line">              windowHandles.push(windowHandle);</div><div class="line">          &#125;</div><div class="line">          env-&gt;DeleteLocalRef(windowHandleObj);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//将这些windowHandles交给Dispatcher处理</span></div><div class="line">  mInputManager-&gt;getDispatcher()-&gt;setInputWindows(windowHandles);</div></pre></td></tr></table></figure></p>
<h3 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h3><p>InputDispatcher跟新WindowHandle，并且更新Focused window。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp ：</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="comment">// acquire lock</span></div><div class="line">    AutoMutex _l(mLock);</div><div class="line"></div><div class="line">    <span class="comment">//清理旧的WindowHandle</span></div><div class="line">    Vector&lt;sp&lt;InputWindowHandle&gt; &gt; oldWindowHandles = mWindowHandles;</div><div class="line">    mWindowHandles = inputWindowHandles;</div><div class="line"></div><div class="line">    sp&lt;InputWindowHandle&gt; newFocusedWindowHandle;</div><div class="line">    <span class="keyword">bool</span> foundHoveredWindow = <span class="literal">false</span>;</div><div class="line">    <span class="comment">//找到新的Focused WindowHandle</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mWindowHandles.size(); i++) &#123;</div><div class="line">        <span class="keyword">const</span> sp&lt;InputWindowHandle&gt;&amp; windowHandle = mWindowHandles.itemAt(i);</div><div class="line">        <span class="keyword">if</span> (!windowHandle-&gt;updateInfo() || windowHandle-&gt;getInputChannel() == <span class="literal">NULL</span>) &#123;</div><div class="line">            mWindowHandles.removeAt(i--);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (windowHandle-&gt;getInfo()-&gt;hasFocus) &#123;</div><div class="line">            newFocusedWindowHandle = windowHandle;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (windowHandle == mLastHoverWindowHandle) &#123;</div><div class="line">            foundHoveredWindow = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!foundHoveredWindow) &#123;</div><div class="line">        mLastHoverWindowHandle = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mFocusedWindowHandle != newFocusedWindowHandle) &#123;</div><div class="line">        <span class="comment">//旧的FocusedWindow和新的不同，则需要停止向旧的Channel中发送消息</span></div><div class="line">        <span class="keyword">if</span> (mFocusedWindowHandle != <span class="literal">NULL</span>) &#123;</div><div class="line">            sp&lt;InputChannel&gt; focusedInputChannel = mFocusedWindowHandle-&gt;getInputChannel();</div><div class="line">            <span class="keyword">if</span> (focusedInputChannel != <span class="literal">NULL</span>) &#123;</div><div class="line">                synthesizeCancelationEventsForInputChannelLocked(</div><div class="line">                        focusedInputChannel, options);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置新的Focused Window</span></div><div class="line">        mFocusedWindowHandle = newFocusedWindowHandle;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Release information for windows that are no longer present.</span></div><div class="line">    <span class="comment">// This ensures that unused input channels are released promptly.</span></div><div class="line">    <span class="comment">// Otherwise, they might stick around until the window handle is destroyed</span></div><div class="line">    <span class="comment">// which might not happen until the next GC.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; oldWindowHandles.size(); i++) &#123;</div><div class="line">        <span class="keyword">const</span> sp&lt;InputWindowHandle&gt;&amp; oldWindowHandle = oldWindowHandles.itemAt(i);</div><div class="line">        <span class="keyword">if</span> (!hasWindowHandleLocked(oldWindowHandle)) &#123;</div><div class="line">            <span class="comment">//释放已经不存在的旧Window</span></div><div class="line">            oldWindowHandle-&gt;releaseInfo();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="comment">// release lock</span></div><div class="line"></div><div class="line"><span class="comment">// Wake up poll loop since it may need to make new input dispatching choices.</span></div><div class="line">mLooper-&gt;wake();</div></pre></td></tr></table></figure></p>
<p>到这里，InputDispatcher获取了和激活的Window的双向通信通道，同时Dispatcher也知道了是哪个Window处于Focused状态。只要Client端将通信通道建立完毕，则Dispatcher可以向Activity的Window发送消息了。</p>
<h2 id="4-Client端注册InputChannel"><a href="#4-Client端注册InputChannel" class="headerlink" title="4. Client端注册InputChannel"></a>4. Client端注册InputChannel</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mInputEventReceiver = <span class="keyword">new</span> WindowInputEventReceiver(mInputChannel, Looper.myLooper());</div></pre></td></tr></table></figure>
<p>在1.1中，通过WindowSession添加Window和InputChannel后，mInputChannel对象已经转化为双向通道中的client端通道了，从1.4可以知道。然后，该步骤又创建了一个WindowInputEventReceiver类的对象mInputEventReceiver，它将mInputChannel和主线程绑定在一起。</p>
<p>下面就看一下WindowInputEventReceiver的构造过程。</p>
<p><img src="http://img.blog.csdn.net/20160924165000028" alt="这里写图片描述"></p>
<h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><p>WindowInputEventReceiver是InputEventReceiver的子类，具体构造过程在InputEventReceiver中。</p>
<h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><p>这一步又开始调用native函数。</p>
<p><em>frameworks/base/core/java/android/view/InputEventReceiver.java:</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mInputChannel = inputChannel;</div><div class="line">mMessageQueue = looper.getQueue();</div><div class="line">mReceiverPtr = nativeInit(<span class="keyword">new</span> WeakReference&lt;InputEventReceiver&gt;(<span class="keyword">this</span>), inputChannel, mMessageQueue);</div></pre></td></tr></table></figure></p>
<h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><p>创建c++层的NativeInputEventReceiver。</p>
<p><em>frameworks/base/core/jni/android_view_InputEventReceiver.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">nativeInit</span><span class="params">(JNIEnv* env, jclass clazz, jobject receiverWeak,</span></span></div><div class="line">        jobject inputChannelObj, jobject messageQueueObj) &#123;</div><div class="line">    <span class="comment">//将java对象转化为c++对象</span></div><div class="line">    sp&lt;InputChannel&gt; inputChannel = android_view_InputChannel_getInputChannel(env,</div><div class="line">            inputChannelObj);</div><div class="line">    <span class="comment">//传入的java MessageQueue转化为c++的MessageQueue</span></div><div class="line">    sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);</div><div class="line"></div><div class="line">    <span class="comment">//..</span></div><div class="line"></div><div class="line">    <span class="comment">//创建了一个NativeInputEventReceiver，构造函数在下面</span></div><div class="line">    sp&lt;NativeInputEventReceiver&gt; receiver = <span class="keyword">new</span> NativeInputEventReceiver(env,</div><div class="line">            receiverWeak, inputChannel, messageQueue);</div><div class="line">    <span class="comment">//对其进行初始化</span></div><div class="line">    <span class="keyword">status_t</span> status = receiver-&gt;initialize();</div><div class="line"></div><div class="line">    <span class="comment">//返回一个NativeInputEventReceiver的指针</span></div><div class="line">    receiver-&gt;incStrong(gInputEventReceiverClassInfo.clazz); <span class="comment">// retain a reference for the object</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(receiver.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>NativeInputEventReceiver的构造函数。</p>
<p><em>frameworks/base/core/jni/android_view_InputEventReceiver.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">NativeInputEventReceiver::NativeInputEventReceiver(JNIEnv* env,</div><div class="line">        jobject receiverWeak, <span class="keyword">const</span> sp&lt;InputChannel&gt;&amp; inputChannel,</div><div class="line">        <span class="keyword">const</span> sp&lt;MessageQueue&gt;&amp; messageQueue) :</div><div class="line">        mReceiverWeakGlobal(env-&gt;NewGlobalRef(receiverWeak)),</div><div class="line">        mInputConsumer(inputChannel), mMessageQueue(messageQueue),</div><div class="line">        mBatchedInputEventPending(<span class="literal">false</span>), mFdEvents(<span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (kDebugDispatchCycle) &#123;</div><div class="line">        ALOGD(<span class="string">"channel '%s' ~ Initializing input event receiver."</span>, getInputChannelName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h3><p>这一步调用函数setFdEvents，参数为<code>ALOOPER_EVENT_INPUT</code>。</p>
<h3 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h3><p>将传入的Channel让主线程监听起来，以便处理传入的消息。</p>
<p><em>frameworks/base/core/jni/android_view_InputEventReceiver.cpp</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> NativeInputEventReceiver::setFdEvents(<span class="keyword">int</span> events) &#123;'</div><div class="line">    <span class="keyword">if</span> (mFdEvents != events) &#123;</div><div class="line">        mFdEvents = events;</div><div class="line">        <span class="comment">//获取Channel的文件描述符</span></div><div class="line">        <span class="keyword">int</span> fd = mInputConsumer.getChannel()-&gt;getFd();</div><div class="line">        <span class="keyword">if</span> (events) &#123;</div><div class="line">	    <span class="comment">//获取Looper，给其添加监听fd的IO事件的请求</span></div><div class="line">	    <span class="comment">//MessageQueue的Looper为主线程Looper，如果Looper进入睡眠</span></div><div class="line">	    <span class="comment">//则会被Channel上写入的事件唤醒，从而可以处理新来的消息</span></div><div class="line">            mMessageQueue-&gt;getLooper()-&gt;addFd(fd, <span class="number">0</span>, events, <span class="keyword">this</span>, <span class="literal">NULL</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mMessageQueue-&gt;getLooper()-&gt;removeFd(fd);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这里监听的文件描述符发生IO事件时，调用的回调函数就是NativeInputEventReceiver自己，因为它为LooperCallback子类。</p>
<p>同时注意这里的Looper就是应用主线程的Looper，这里向其epoll多添加了一个文件描述符进行监听，因为epoll可以同时监听多个epoll的IO事件。同时设定了监听的类型为ALOOPER_EVENT_INPUT。</p>
<p>回忆下第10章的1.6步骤中epoll_wait进入的睡眠后，会监听mWakeEventFd文件描述符的事件。不仅如此，这一步还会监听更多的文件描述符的事件，这里就包括建立的InputChannel的文件描述符。所以在主线程通过调用pollInner进入睡眠以后，被唤醒后会判断发生事件的文件描述符是哪一个。</p>
<p><em>system/core/libutils/Looper.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (fd == mWakeEventFd) &#123;</div><div class="line">          <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</div><div class="line">              awoken();</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              ALOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span>, epollEvents);</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">ssize_t</span> requestIndex = mRequests.indexOfKey(fd);</div><div class="line">          <span class="keyword">if</span> (requestIndex &gt;= <span class="number">0</span>) &#123;</div><div class="line">              <span class="keyword">int</span> events = <span class="number">0</span>;</div><div class="line">              <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) events |= EVENT_INPUT;</div><div class="line">              <span class="keyword">if</span> (epollEvents &amp; EPOLLOUT) events |= EVENT_OUTPUT;</div><div class="line">              <span class="keyword">if</span> (epollEvents &amp; EPOLLERR) events |= EVENT_ERROR;</div><div class="line">              <span class="keyword">if</span> (epollEvents &amp; EPOLLHUP) events |= EVENT_HANGUP;</div><div class="line">              pushResponse(events, mRequests.valueAt(requestIndex));</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              ALOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on fd %d that is "</span></div><div class="line">                      <span class="string">"no longer registered."</span>, epollEvents, fd);</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>到这里，InputChannel在Client端也进行了监听，整个完整的window所在的应用主线程和InputDispatcher线程之间的双向Channel已经建立完毕，同时InputDispatcher知道哪一个window处于激活状态，因为它知道向哪一个window发送消息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;请对照AOSP版本：6.0.1_r50。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;InputManager可以获得输入事件并分发，Activity需要处理这些输入事件。那么，这两者之间如何建立的连接呢？这就需要InputChannel作为桥梁建立两者之间的通道。&lt;/p&gt;
&lt;h2 id=&quot;1-ViewRootImpl创建InputChannel&quot;&gt;&lt;a href=&quot;#1-ViewRootImpl创建InputChannel&quot; class=&quot;headerlink&quot; title=&quot;1. ViewRootImpl创建InputChannel&quot;&gt;&lt;/a&gt;1. ViewRootImpl创建InputChannel&lt;/h2&gt;&lt;p&gt;这里ViewRoot类已经消失了，由ViewRootImpl替代。Activity在创建时会将自己的DecorView设置给对应的ViewRootImpl。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160924164736978&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(11):Android的InputManagerService的工作过程</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-11-Android%E7%9A%84InputManagerService%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-11-Android的InputManagerService的工作过程/</id>
    <published>2017-02-14T06:11:12.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>请对照AOSP版本：6.0.1_r50。  </p>
</blockquote>
<h2 id="1-创建InputManager"><a href="#1-创建InputManager" class="headerlink" title="1. 创建InputManager"></a>1. 创建InputManager</h2><p>这里和老罗当年的版本有很大不同了，有了InputManagerService管理InputManager。</p>
<p><img src="http://img.blog.csdn.net/20160921173810675" alt="这里写图片描述"></p>
<a id="more"></a>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>想要探索如何启动的相关server，需要从SystemServer开始探寻。从SystemServer的进程开始运行开始，它就会创建一些系统server，这里就会启动other services。</p>
<p>其中，会创建Input Manager和Window Manager两个服务。</p>
<p><em>frameworks/base/services/java/com/android/server/SystemServer.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Slog.i(TAG, <span class="string">"Input Manager"</span>);</div><div class="line">inputManager = <span class="keyword">new</span> InputManagerService(context);</div><div class="line"></div><div class="line">Slog.i(TAG, <span class="string">"Window Manager"</span>);</div><div class="line">wm = WindowManagerService.main(context, inputManager,</div><div class="line">		mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,</div><div class="line">		!mFirstBoot, mOnlyCore);</div><div class="line">ServiceManager.addService(Context.WINDOW_SERVICE, wm);</div><div class="line">ServiceManager.addService(Context.INPUT_SERVICE, inputManager);</div><div class="line"><span class="comment">//..</span></div><div class="line">inputManager.start();</div></pre></td></tr></table></figure></p>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>先来仔细端详一下InputManagerService的构造函数。这里会调用c++层的初始化函数。<br><em>frameworks/base/services/core/java/com/android/server/input/InputManagerService.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.mHandler = <span class="keyword">new</span> InputManagerHandler(DisplayThread.get().getLooper);</div><div class="line"><span class="comment">//..</span></div><div class="line">mPtr = nativeInit(<span class="keyword">this</span>, mContext, mHandler.getLooper().getQueue());</div></pre></td></tr></table></figure></p>
<p>注意这里将DisplayThread的Looper传递过去，DisplayThread是一个单例模式的类，它会启动唯一的线程。同时DisplayThread是一个HandlerThread的子类，实现了Looper循环机制。DisplayThread是用来执行和显示有关的操作，显示操作一般需要比较小的延迟。DisplayThread只能被WindowManager、DisplayManager，InputManager用来执行一些快速地实时操作。</p>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><p>这一步首先将java层的MessageQueue变为了c++的MessageQueue。然后构造了一个NativeInputManager对象，最后将指向该对象的指针<code>im</code>返回给java层。</p>
<p><em>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NativeInputManager* im = <span class="keyword">new</span> NativeInputManager(contextObj, serviceObj, messageQueue-&gt;getLooper());</div></pre></td></tr></table></figure></p>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h3><p>在构造NativeInputManager时，会创建一个InputManager对象mInputManager。</p>
<p><em>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sp&lt;EventHub&gt; eventHub = <span class="keyword">new</span> EventHub();</div><div class="line">mInputManager = <span class="keyword">new</span> InputManager(eventHub, <span class="keyword">this</span>, <span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h3><p>这一步会创建一个dispatcher负责分发输入事件，一个reader负责获取事件。<br><em>frameworks/native/services/inputflinger/InputManager.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mDispatcher = <span class="keyword">new</span> InputDispatcher(dispatcherPolicy);</div><div class="line">mReader = <span class="keyword">new</span> InputReader(eventHub, readerPolicy, mDispatcher);</div><div class="line">initialize();</div></pre></td></tr></table></figure></p>
<h3 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h3><p>这里会创建两个线程，在以后的步骤中会用来运行前面创建的dispathcer和reader。</p>
<p><em>frameworks/native/services/inputflinger/InputManager.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mReaderThread = <span class="keyword">new</span> InputReaderThread(mReader);</div><div class="line">mDispatcherThread = <span class="keyword">new</span> InputDispatcherThread(mDispatcher);</div></pre></td></tr></table></figure></p>
<h2 id="2-启动InputManager"><a href="#2-启动InputManager" class="headerlink" title="2. 启动InputManager"></a>2. 启动InputManager</h2><p>将视线再次回到SystemServer中，在创建完InputManagerService后，需要将这个Service启动，同样是在1.1的startOtherServices函数里，调用了InputManagerService的成员函数start。</p>
<p><img src="http://img.blog.csdn.net/20160921173838750" alt="这里写图片描述"></p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p>这里首先调用了c++层的nativeStart，然后InputManagerService将自己交给Watchdog监视。然后注册了PointerSpeedSetting和ShowTouchesSetting两个Observer。</p>
<p><em>frameworks/base/services/core/java/com/android/server/input/InputManagerService.java :</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nativeStart(mPtr);</div><div class="line"></div><div class="line"><span class="comment">// Add ourself to the Watchdog monitors.</span></div><div class="line">Watchdog.getInstance().addMonitor(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">registerPointerSpeedSettingObserver();</div><div class="line">registerShowTouchesSettingObserver();</div></pre></td></tr></table></figure></p>
<p>这两个Observer暂时还没搞清楚是干什么的。</p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p>这一步将传来的ptr参数转化为一个NativeInputManager指针，同时开始启动NativeInputManager中的InputManager。</p>
<p><em>frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NativeInputManager* im = <span class="keyword">reinterpret_cast</span>&lt;NativeInputManager*&gt;(ptr);</div><div class="line"><span class="keyword">status_t</span> result = im-&gt;getInputManager()-&gt;start();</div></pre></td></tr></table></figure></p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><p>这里会启动在1.6中创建的两个线程，分别用来分发和监听Input事件。</p>
<p><em>frameworks/native/services/inputflinger/InputManager.cpp ：</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> result = mDispatcherThread-&gt;run(<span class="string">"InputDispatcher"</span>, PRIORITY_URGENT_DISPLAY);</div><div class="line">result = mReaderThread-&gt;run(<span class="string">"InputReader"</span>, PRIORITY_URGENT_DISPLAY);)</div></pre></td></tr></table></figure></p>
<h2 id="3-启动InputDispatcher"><a href="#3-启动InputDispatcher" class="headerlink" title="3. 启动InputDispatcher"></a>3. 启动InputDispatcher</h2><p>在2.3中运行的线程以threadLoop为入口，开始进入循环。</p>
<p><img src="http://img.blog.csdn.net/20160921173903504" alt="这里写图片描述"></p>
<h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>这一步直接将任务交给InputDispatcher的dispatchOnce函数。</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> InputDispatcherThread::threadLoop() &#123;</div><div class="line">	mDispatcher-&gt;dispatchOnce();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>整个函数如下：</p>
<p><em>frameworks/native/services/inputflinger/InputDispatcher.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> InputDispatcher::dispatchOnce() &#123;</div><div class="line"></div><div class="line">	<span class="keyword">nsecs_t</span> nextWakeupTime = LONG_LONG_MAX;</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// acquire lock</span></div><div class="line">		AutoMutex _l(mLock);</div><div class="line">		mDispatcherIsAliveCondition.broadcast();</div><div class="line"></div><div class="line">		<span class="comment">// Run a dispatch loop if there are no pending commands.</span></div><div class="line">		<span class="comment">// The dispatch loop might enqueue commands to run afterwards.</span></div><div class="line">		<span class="keyword">if</span> (!haveCommandsLocked()) &#123;</div><div class="line">			dispatchOnceInnerLocked(&amp;nextWakeupTime);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Run all pending commands if there are any.</span></div><div class="line">		<span class="comment">// If any commands were run then force the next poll to wake up immediately.</span></div><div class="line">		<span class="keyword">if</span> (runCommandsLockedInterruptible()) &#123;</div><div class="line">			nextWakeupTime = LONG_LONG_MIN;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="comment">// release lock</span></div><div class="line"></div><div class="line">	<span class="keyword">nsecs_t</span> currentTime = now();</div><div class="line">	<span class="keyword">int</span> timeoutMillis = toMillisecondTimeoutDelay(currentTime, nextWakeupTime);</div><div class="line">	mLooper-&gt;pollOnce(timeoutMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>在这一步骤中，首先判断是否有Command还未被执行，如果有去执行Command。否则，调用dispatchOnceInnerLocked函数去获取事件，这里会将nextWakeupTime传递过去，让其设置合适的苏醒时间，具体内容在以后讲解。然后runCommandsLockedInterruptible函数会执行缓存的Command，如果有Command在这一步中被执行，则需要将苏醒事件设置为<code>LONG_LONG_MIN</code>，因为执行这些命令需要耗费事件，在这期间可能已经有输入事件发生了，所有下次循环不需要等待。</p>
<p>最后，根据等待时间和当前时间，计算出需要睡眠的时间，通过pollOnce进入睡眠，等待唤醒，或者超时。</p>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>这里和上一个章节中的pollOnce道理相同。</p>
<h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><p>这里会调用epoll_wait函数，使其在mEpollFd所描述的epoll上等待一段时间，这个epoll监听着文件描述符的读写事件。如果有人在pip中写入，则会返回，否则等待指定时间后返回。</p>
<p><em>system/core/libutils/Looper.cpp</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</div></pre></td></tr></table></figure></p>
<h2 id="4-启动InputReader"><a href="#4-启动InputReader" class="headerlink" title="4. 启动InputReader"></a>4. 启动InputReader</h2><p>在2.3中运行的线程以threadLoop为入口，开始进入循环。</p>
<p><img src="http://img.blog.csdn.net/20160921173918126" alt="这里写图片描述"></p>
<h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><p>这一步与3.1一样，将任务丢给InputReader处理。</p>
<h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><p>这一步会尝试从mEventHub中获取事件，如果获取一些事件，则进行处理。<br><em>frameworks/native/services/inputflinger/InputReader.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从EventHub中获取event，这里先详细讲解这一步</span></div><div class="line"><span class="keyword">size_t</span> count = mEventHub-&gt;getEvents(timeoutMillis, mEventBuffer, EVENT_BUFFER_SIZE);</div><div class="line"><span class="comment">//省略..</span></div><div class="line"><span class="keyword">if</span> (count) &#123;</div><div class="line">	<span class="comment">//事件处理，将在后面博客中讲解</span></div><div class="line">	processEventsLocked(mEventBuffer, count);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这里我们先考虑如何从EventHub中获取事件的。</p>
<h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><p>首先这一个函数不是就获得一个event这么简单，它是想获得一组event，这里和旧版本有所不同，可见工程师对系统做了优化。这一步内容比较到，让我们通过注释来讲解。</p>
<p><em>frameworks/native/services/inputflinger/EventHub.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">size_t</span> EventHub::getEvents(<span class="keyword">int</span> timeoutMillis, RawEvent* buffer, <span class="keyword">size_t</span> bufferSize) &#123;</div><div class="line">    ALOG_ASSERT(bufferSize &gt;= <span class="number">1</span>);</div><div class="line">    AutoMutex _l(mLock);</div><div class="line">    <span class="keyword">struct</span> input_event readBuffer[bufferSize];</div><div class="line">    <span class="comment">//event 指向了存储事件的位置</span></div><div class="line">    RawEvent* event = buffer;</div><div class="line">    <span class="keyword">size_t</span> capacity = bufferSize;</div><div class="line">    <span class="keyword">bool</span> awoken = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">//开始循环获取事件,目的是填充buffer</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">nsecs_t</span> now = systemTime(SYSTEM_TIME_MONOTONIC);</div><div class="line"></div><div class="line">        <span class="comment">// Reopen input devices if needed.</span></div><div class="line">        <span class="comment">//如果需要重新打开输入设备，则首先要关闭所有的设备</span></div><div class="line">        <span class="keyword">if</span> (mNeedToReopenDevices) &#123;</div><div class="line">            mNeedToReopenDevices = <span class="literal">false</span>;</div><div class="line">            ALOGI(<span class="string">"Reopening all input devices due to a configuration change."</span>);</div><div class="line">            closeAllDevicesLocked();</div><div class="line">            mNeedToScanDevices = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">break</span>; <span class="comment">// return to the caller before we actually rescan</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Report any devices that had last been added/removed.</span></div><div class="line">        <span class="comment">//这里会移除所有关闭的设备</span></div><div class="line">        <span class="keyword">while</span> (mClosingDevices) &#123;</div><div class="line">            Device* device = mClosingDevices;</div><div class="line">            ALOGV(<span class="string">"Reporting device closed: id=%d, name=%s\n"</span>,</div><div class="line">                 device-&gt;id, device-&gt;path.<span class="built_in">string</span>());</div><div class="line">            mClosingDevices = device-&gt;next;</div><div class="line">            <span class="comment">//创建了一个设备removed的event</span></div><div class="line">            event-&gt;when = now;</div><div class="line">            event-&gt;deviceId = device-&gt;id == mBuiltInKeyboardId ? BUILT_IN_KEYBOARD_ID : device-&gt;id;</div><div class="line">            event-&gt;type = DEVICE_REMOVED;</div><div class="line">            event += <span class="number">1</span>;</div><div class="line">            <span class="keyword">delete</span> device;</div><div class="line">            mNeedToSendFinishedDeviceScan = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (--capacity == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">	<span class="comment">//如果上面步骤关闭了设备，这里需要重新扫描所有的设备</span></div><div class="line">        <span class="keyword">if</span> (mNeedToScanDevices) &#123;</div><div class="line">            mNeedToScanDevices = <span class="literal">false</span>;</div><div class="line">            <span class="comment">//下面会详细讲解这里如何获取输入设备的</span></div><div class="line">            scanDevicesLocked();</div><div class="line">            mNeedToSendFinishedDeviceScan = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">	<span class="comment">//这里会添加正在开启的设备</span></div><div class="line">        <span class="keyword">while</span> (mOpeningDevices != <span class="literal">NULL</span>) &#123;</div><div class="line">            Device* device = mOpeningDevices;</div><div class="line">            ALOGV(<span class="string">"Reporting device opened: id=%d, name=%s\n"</span>,</div><div class="line">                 device-&gt;id, device-&gt;path.<span class="built_in">string</span>());</div><div class="line">            mOpeningDevices = device-&gt;next;</div><div class="line">            <span class="comment">//同样这里会创建设备添加的event</span></div><div class="line">            event-&gt;when = now;</div><div class="line">            event-&gt;deviceId = device-&gt;id == mBuiltInKeyboardId ? <span class="number">0</span> : device-&gt;id;</div><div class="line">            event-&gt;type = DEVICE_ADDED;</div><div class="line">            event += <span class="number">1</span>;</div><div class="line">            mNeedToSendFinishedDeviceScan = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (--capacity == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mNeedToSendFinishedDeviceScan) &#123;</div><div class="line">            mNeedToSendFinishedDeviceScan = <span class="literal">false</span>;</div><div class="line">            event-&gt;when = now;</div><div class="line">            event-&gt;type = FINISHED_DEVICE_SCAN;</div><div class="line">            event += <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (--capacity == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	<span class="comment">//以上步骤主要是负责重新获取接入的设备，下面将会负责获得设备中的event</span></div><div class="line">	</div><div class="line">        <span class="comment">// Grab the next input event.</span></div><div class="line">        <span class="keyword">bool</span> deviceChanged = <span class="literal">false</span>;</div><div class="line">        <span class="comment">//开始循环获取pending的event</span></div><div class="line">        <span class="comment">//当前处理的Event序号是否小于正在等待的事件数目，这里会循环读出所有等待的事件</span></div><div class="line">        <span class="keyword">while</span> (mPendingEventIndex &lt; mPendingEventCount) &#123;</div><div class="line">	    <span class="comment">//获取一个event项</span></div><div class="line">            <span class="keyword">const</span> <span class="keyword">struct</span> epoll_event&amp; eventItem = mPendingEventItems[mPendingEventIndex++];</div><div class="line">	    <span class="comment">//如果这是个INotify事件</span></div><div class="line">            <span class="keyword">if</span> (eventItem.data.u32 == EPOLL_ID_INOTIFY) &#123;</div><div class="line">                <span class="keyword">if</span> (eventItem.events &amp; EPOLLIN) &#123;</div><div class="line">                    mPendingINotify = <span class="literal">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ALOGW(<span class="string">"Received unexpected epoll event 0x%08x for INotify."</span>, eventItem.events);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">	    <span class="comment">//如果这是一个Id wake事件，则读出mWakeReadPipeFd的数据，让等待在这个文件描述符上的线程得到唤醒	</span></div><div class="line">            <span class="keyword">if</span> (eventItem.data.u32 == EPOLL_ID_WAKE) &#123;</div><div class="line">                <span class="keyword">if</span> (eventItem.events &amp; EPOLLIN) &#123;</div><div class="line">                    ALOGV(<span class="string">"awoken after wake()"</span>);</div><div class="line">                    awoken = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">char</span> buffer[<span class="number">16</span>];</div><div class="line">                    <span class="keyword">ssize_t</span> nRead;</div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        nRead = read(mWakeReadPipeFd, buffer, <span class="keyword">sizeof</span>(buffer));</div><div class="line">                    &#125; <span class="keyword">while</span> ((nRead == <span class="number">-1</span> &amp;&amp; errno == EINTR) || nRead == <span class="keyword">sizeof</span>(buffer));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ALOGW(<span class="string">"Received unexpected epoll event 0x%08x for wake read pipe."</span>,</div><div class="line">                            eventItem.events);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">	   </div><div class="line">	    <span class="comment">//这里开始处理其它非特殊的event</span></div><div class="line">	    <span class="comment">//获取event项对应的设备的编号</span></div><div class="line">            <span class="keyword">ssize_t</span> deviceIndex = mDevices.indexOfKey(eventItem.data.u32);</div><div class="line">            <span class="keyword">if</span> (deviceIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">                ALOGW(<span class="string">"Received unexpected epoll event 0x%08x for unknown device id %d."</span>,</div><div class="line">                        eventItem.events, eventItem.data.u32);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//获取设备，所有已知的设备都放在了mDevices中</span></div><div class="line">            Device* device = mDevices.valueAt(deviceIndex);</div><div class="line">            <span class="keyword">if</span> (eventItem.events &amp; EPOLLIN) &#123;</div><div class="line">                <span class="comment">//从这个设备中读出数据流，并且存入readBuffer下</span></div><div class="line">                <span class="keyword">int32_t</span> readSize = read(device-&gt;fd, readBuffer,</div><div class="line">                        <span class="keyword">sizeof</span>(<span class="keyword">struct</span> input_event) * capacity);</div><div class="line">                <span class="keyword">if</span> (readSize == <span class="number">0</span> || (readSize &lt; <span class="number">0</span> &amp;&amp; errno == ENODEV)) &#123;</div><div class="line">                    <span class="comment">// Device was removed before INotify noticed.</span></div><div class="line">	            <span class="comment">//先处理一些异常情况，先省略</span></div><div class="line">	            <span class="comment">//...</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123; </div><div class="line">                    <span class="comment">//键盘事件的id需要特殊处理，一直设置为0</span></div><div class="line">                    <span class="keyword">int32_t</span> deviceId = device-&gt;id == mBuiltInKeyboardId ? <span class="number">0</span> : device-&gt;id;</div><div class="line"></div><div class="line">                    <span class="keyword">size_t</span> count = <span class="keyword">size_t</span>(readSize) / <span class="keyword">sizeof</span>(<span class="keyword">struct</span> input_event);</div><div class="line">                    <span class="comment">//开始循环，从设备中读出每一个event</span></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                        <span class="keyword">struct</span> input_event&amp; iev = readBuffer[i];</div><div class="line">                       </div><div class="line">                        <span class="comment">//这里做了许多处理事件异常时间的工作，先略过</span></div><div class="line">                        <span class="comment">//...</span></div><div class="line">                        </div><div class="line">                        <span class="comment">//将获取的事件存入event</span></div><div class="line">                        event-&gt;deviceId = deviceId;</div><div class="line">                        event-&gt;type = iev.type;</div><div class="line">                        event-&gt;code = iev.code;</div><div class="line">                        event-&gt;value = iev.value;</div><div class="line">                        <span class="comment">//event指向下一个位置，容量也随之减少一个</span></div><div class="line">                        event += <span class="number">1</span>;</div><div class="line">                        capacity -= <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="comment">// The result buffer is full.  Reset the pending event index</span></div><div class="line">                        <span class="comment">// so we will try to read the device again on the next iteration.</span></div><div class="line">                        <span class="comment">//buffer已经填满，退出处理pending event的循环，将index回到上一个位置，因为该设备event还没读完，下次再接着读</span></div><div class="line">                        mPendingEventIndex -= <span class="number">1</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventItem.events &amp; EPOLLHUP) &#123;</div><div class="line">	          <span class="comment">//处理一些其它情况，省略</span></div><div class="line">	          <span class="comment">//...</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//在读出所有event后，才能关闭设备，这里省略了对此的处理过程</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        </div><div class="line">        <span class="comment">//到这里说明pending event已经处理完，或者buffer已经塞满。buffer塞满或者存了一些事件，则退出最外层填充buffer的循环</span></div><div class="line">        <span class="comment">// Return now if we have collected any events or if we were explicitly awoken.</span></div><div class="line">        <span class="keyword">if</span> (event != buffer || awoken) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//这里处理了一些wake lock的事情，省略</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        </div><div class="line">        <span class="comment">//到这一步说明buffer里没有填任何事件，同时也没有pending event</span></div><div class="line">        <span class="comment">//所以需要等待有人向device文件描述符里写入一些事件</span></div><div class="line">        <span class="keyword">int</span> pollResult = epoll_wait(mEpollFd, mPendingEventItems, EPOLL_MAX_EVENTS, timeoutMillis);</div><div class="line">        </div><div class="line">        <span class="comment">//时间已到，还是没有事件，那咱就结束吧</span></div><div class="line">        <span class="keyword">if</span> (pollResult == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// Timed out.</span></div><div class="line">            mPendingEventCount = <span class="number">0</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//出错了，让我睡一会，下次再尝试</span></div><div class="line">        <span class="keyword">if</span> (pollResult &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// An error occurred.</span></div><div class="line">            mPendingEventCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Sleep after errors to avoid locking up the system.</span></div><div class="line">            <span class="comment">// Hopefully the error is transient.</span></div><div class="line">            <span class="keyword">if</span> (errno != EINTR) &#123;</div><div class="line">                ALOGW(<span class="string">"poll failed (errno=%d)\n"</span>, errno);</div><div class="line">                usleep(<span class="number">100000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Some events occurred.</span></div><div class="line">            mPendingEventCount = <span class="keyword">size_t</span>(pollResult);</div><div class="line">            <span class="comment">//获取了一些event，那么继续循环，填充buffer！</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// All done, return the number of events we read.</span></div><div class="line">    <span class="keyword">return</span> event - buffer;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h3><p>从这里开始扫描设备。在研究这个函数前，先看一下<code>DEVICE_PATH</code>的来头：</p>
<p><em>frameworks/native/services/inputflinger/EventHub.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这一段代码位于EventHub的构造函数中，这里使用了linux的inotify机制</span></div><div class="line"><span class="comment">//inotify机制可以监控文件的变化</span></div><div class="line"><span class="comment">//因此系统可以实时监控设备的添加和移除</span></div><div class="line">mINotifyFd = inotify_init();</div><div class="line"><span class="keyword">int</span> result = inotify_add_watch(mINotifyFd, DEVICE_PATH, IN_DELETE | IN_CREATE);</div></pre></td></tr></table></figure></p>
<p><em>frameworks/native/services/inputflinger/EventHub.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> EventHub::scanDevicesLocked() &#123;</div><div class="line">     <span class="comment">//扫描目录：/dev/input</span></div><div class="line">    <span class="keyword">status_t</span> res = scanDirLocked(DEVICE_PATH);</div><div class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"scan dir failed for %s\n"</span>, DEVICE_PATH);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mDevices.indexOfKey(VIRTUAL_KEYBOARD_ID) &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//创建一个虚拟键盘</span></div><div class="line">        createVirtualKeyboardLocked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h3><p>这里开始扫描<code>/dev/input/</code>目录下的所有设备。</p>
<p><em>frameworks/native/services/inputflinger/EventHub.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> EventHub::scanDirLocked(<span class="keyword">const</span> <span class="keyword">char</span> *dirname)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> devname[PATH_MAX];</div><div class="line">    <span class="keyword">char</span> *filename;</div><div class="line">    DIR *dir;</div><div class="line">    <span class="keyword">struct</span> dirent *de;</div><div class="line">    dir = opendir(dirname);</div><div class="line">    <span class="keyword">if</span>(dir == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="built_in">strcpy</span>(devname, dirname);</div><div class="line">    filename = devname + <span class="built_in">strlen</span>(devname);</div><div class="line">    <span class="comment">//filename指向了devname目录的尾端，方便在其后面添加设备文件</span></div><div class="line">    *filename++ = <span class="string">'/'</span>;</div><div class="line">    <span class="comment">//读取该目录下的每一个设备文件</span></div><div class="line">    <span class="keyword">while</span>((de = readdir(dir))) &#123;</div><div class="line">        <span class="keyword">if</span>(de-&gt;d_name[<span class="number">0</span>] == <span class="string">'.'</span> &amp;&amp;</div><div class="line">           (de-&gt;d_name[<span class="number">1</span>] == <span class="string">'\0'</span> ||</div><div class="line">            (de-&gt;d_name[<span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; de-&gt;d_name[<span class="number">2</span>] == <span class="string">'\0'</span>)))</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="built_in">strcpy</span>(filename, de-&gt;d_name);</div><div class="line">        <span class="comment">//打开设备，devname里是设备的绝对路径</span></div><div class="line">        openDeviceLocked(devname);</div><div class="line">    &#125;</div><div class="line">    closedir(dir);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-6"><a href="#4-6" class="headerlink" title="4.6"></a>4.6</h3><p><em>frameworks/native/services/inputflinger/EventHub.cpp :</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> EventHub::openDeviceLocked(<span class="keyword">const</span> <span class="keyword">char</span> *devicePath) &#123;</div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">80</span>];</div><div class="line"></div><div class="line">    <span class="comment">//打开文件</span></div><div class="line">    <span class="keyword">int</span> fd = open(devicePath, O_RDWR | O_CLOEXEC);</div><div class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"could not open %s, %s\n"</span>, devicePath, strerror(errno));</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    InputDeviceIdentifier identifier;</div><div class="line"></div><div class="line">    <span class="comment">// Get device name.</span></div><div class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGNAME(<span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>), &amp;buffer) &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">//fprintf(stderr, "could not get device name for %s, %s\n", devicePath, strerror(errno));</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        buffer[<span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">        identifier.name.setTo(buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Check to see if the device is on our excluded list</span></div><div class="line">    <span class="comment">//删除排除的设备</span></div><div class="line"> </div><div class="line">    <span class="comment">//一下步骤从文件中获取device的基本信息</span></div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="comment">// Get device driver version.</span></div><div class="line">    <span class="comment">// Get device identifier.</span></div><div class="line">    <span class="comment">// Get device physical location.</span></div><div class="line">    <span class="comment">// Get device unique id.</span></div><div class="line">    <span class="comment">// Fill in the descriptor.</span></div><div class="line">    <span class="comment">// Make file descriptor non-blocking for use with poll().</span></div><div class="line"></div><div class="line">    <span class="comment">//创建device对象</span></div><div class="line">    <span class="comment">// Allocate device.  (The device object takes ownership of the fd at this point.)</span></div><div class="line">    <span class="keyword">int32_t</span> deviceId = mNextDeviceId++;</div><div class="line">    Device* device = <span class="keyword">new</span> Device(fd, deviceId, String8(devicePath), identifier);</div><div class="line">    <span class="comment">//根据device的特征，设置device的class参数</span></div><div class="line">    <span class="comment">//...</span></div><div class="line">    </div><div class="line">    <span class="comment">// Register with epoll.</span></div><div class="line">    <span class="keyword">struct</span> epoll_event eventItem;</div><div class="line">    <span class="built_in">memset</span>(&amp;eventItem, <span class="number">0</span>, <span class="keyword">sizeof</span>(eventItem));</div><div class="line">    eventItem.events = EPOLLIN;</div><div class="line">    <span class="keyword">if</span> (mUsingEpollWakeup) &#123;</div><div class="line">        eventItem.events |= EPOLLWAKEUP;</div><div class="line">    &#125;</div><div class="line">    eventItem.data.u32 = deviceId;</div><div class="line">    <span class="comment">//将该device的文件fd交给epoll监视，以及时获得它的变化</span></div><div class="line">    <span class="keyword">if</span> (epoll_ctl(mEpollFd, EPOLL_CTL_ADD, fd, &amp;eventItem)) &#123;</div><div class="line">        ALOGE(<span class="string">"Could not add device fd to epoll instance.  errno=%d"</span>, errno);</div><div class="line">        <span class="keyword">delete</span> device;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//处理时钟问题..</span></div><div class="line"></div><div class="line">    <span class="comment">//添加device</span></div><div class="line">    addDeviceLocked(device);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure></p>
<h3 id="4-7"><a href="#4-7" class="headerlink" title="4.7"></a>4.7</h3><p>这一步比较轻松，将创建好的device对象放入mDevices即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> EventHub::addDeviceLocked(Device* device) &#123;</div><div class="line">    mDevices.add(device-&gt;id, device);</div><div class="line">    device-&gt;next = mOpeningDevices;</div><div class="line">    mOpeningDevices = device;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;请对照AOSP版本：6.0.1_r50。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-创建InputManager&quot;&gt;&lt;a href=&quot;#1-创建InputManager&quot; class=&quot;headerlink&quot; title=&quot;1. 创建InputManager&quot;&gt;&lt;/a&gt;1. 创建InputManager&lt;/h2&gt;&lt;p&gt;这里和老罗当年的版本有很大不同了，有了InputManagerService管理InputManager。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160921173810675&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Monkey 源代码阅读</title>
    <link href="http://itanch.github.io/2017/02/14/Android-Monkey-%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://itanch.github.io/2017/02/14/Android-Monkey-源代码阅读/</id>
    <published>2017-02-14T06:09:32.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-Monkey基本信息"><a href="#0-Monkey基本信息" class="headerlink" title="0. Monkey基本信息"></a>0. Monkey基本信息</h2><p>目前该工具位于源代码的位置：<code>development/cmds/monkey</code>。</p>
<p>生成的jar包位于：<code>out/traget/product/generic/system/framework/monkey.jar</code>。</p>
<p>在设备中，启动monkey的脚本位于<code>/system/bin/monkey</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Script to start "monkey" on the device, which has a very rudimentary</span></div><div class="line"><span class="comment"># shell.</span></div><div class="line"><span class="comment">#</span></div><div class="line">base=/system</div><div class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$base</span>/framework/monkey.jar</div><div class="line"><span class="built_in">trap</span> <span class="string">""</span> HUP</div><div class="line"><span class="built_in">exec</span> app_process <span class="variable">$base</span>/bin com.android.commands.monkey.Monkey $*</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="1-Monkey开始启动"><a href="#1-Monkey开始启动" class="headerlink" title="1. Monkey开始启动"></a>1. Monkey开始启动</h2><p><img src="http://img.blog.csdn.net/20160916145356103" alt="这里写图片描述"></p>
<ol>
<li>main函数只是设置了进程的名称，主要过程在run函数中执行。</li>
<li>获取参数，初始化参数和随机数。然后它会获取系统的一些服务，见1.3。获取需要启动的main activity，见1.4。创建一个MonkeySourceRoandom对象mEventSource，由他管理随机事件的生成，这里首先让它生成了一个启动main activity的事件放入了队列。monkey还支持通过脚本、网络获取事件，这里只说默认的随机情况。下面，它启动Network Monitor。接着，启动Monkey的循环过程，见1.5。等待测试结束后，则输出测试报告。</li>
<li>获取一些系统服务，有ActivityManager、WindowManager、PackageManager。给ActivityManager设置了一个ActivityController对象，该对象提供了Activity启动、crash获取、应用无响应等功能。最后，还注册了一个网络状态的监听器。</li>
<li>从PackageManager中获取符合条件的main activity，然后添加入<code>mMainApps</code>中。</li>
<li>这一步就会循环的生成测试事件见1.6、触发事件1.10。</li>
<li>从队列中获取第一个事件返回。如果队列为空，则生成一个放入队列，见1.7。</li>
<li>这里先生成一个随机数，根据随机数范围，决定具体生成哪一个事件。这里有点击、拖动、缩放（前三个，见1.8）、轨迹球（已经不常用了，可以忽略）、旋转、权限（见1.9）和键盘事件。</li>
<li>这里会首先利用DisplayManager获得屏幕的实际大小，然后随机的生成生成点坐标。Touch只需要一点就够了，而Drag则需要生成一系列的点，这里利用了randomWalk函数来随机的移动来生成下一个点坐标，然后将这一系列点坐标封装成事件放入队列。两指缩放同样使用了和Drag类似的方法，只不过是将一个点变为两个点。</li>
<li>从目标package中的权限列表中获取一个，然后生成一个MonkeyPersissionEvent。</li>
<li>MonkeyEvent是一个抽象类，具体的实现在其子类中。MotionEvent通过InputManager注入事件。旋转MonkeyRotationEvent通过WindowManager进行旋转。MonkeyPermissionEvent利用PackageManager授予、撤销应用的一些权限。MonkeyKeyEvent同样是使用InputManager进行注入。</li>
<li>这里还有一些其它事件。MonkeyActivityEvent的事件是由ActivityManager启动的。MonkeyCommandEvent则启动一个进程，执行命令即可。MonkeyFlipEvent，唤起键盘的操作，这里是向<code>/dev/input/event0</code>写入了一组字节。MonkeyGetAppFrameRateEvent和MonkeyGetFrameRateEvent，获取应用帧频，通过命令行执行来实现。MonkeyInstrumentationEvent, 利用ActivityManager启动Instrumentation组件。MonkeyNoopEvent，什么也不做，呵呵。MonkeyPowerEvent，从log信息中获取电量信息。MonkeyThrottleEvent和MonkeyWaitEvent，Thread.sleep休眠一段时间。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-Monkey基本信息&quot;&gt;&lt;a href=&quot;#0-Monkey基本信息&quot; class=&quot;headerlink&quot; title=&quot;0. Monkey基本信息&quot;&gt;&lt;/a&gt;0. Monkey基本信息&lt;/h2&gt;&lt;p&gt;目前该工具位于源代码的位置：&lt;code&gt;development/cmds/monkey&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;生成的jar包位于：&lt;code&gt;out/traget/product/generic/system/framework/monkey.jar&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在设备中，启动monkey的脚本位于&lt;code&gt;/system/bin/monkey&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Script to start &quot;monkey&quot; on the device, which has a very rudimentary&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# shell.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;base=/system&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; CLASSPATH=&lt;span class=&quot;variable&quot;&gt;$base&lt;/span&gt;/framework/monkey.jar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; HUP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; app_process &lt;span class=&quot;variable&quot;&gt;$base&lt;/span&gt;/bin com.android.commands.monkey.Monkey $*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(10):Android应用程序的消息处理机制</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-10-Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-10-Android应用程序的消息处理机制/</id>
    <published>2017-02-14T06:07:55.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote>
<p>原来写好的博客被CSDN给坑了，法克，只能靠回忆重写。    </p>
</blockquote>
<ol>
<li>Android应用程序的四种组件皆运行于ActivityThread之中。ActivityThread包含有程序入口main，同时它会启动一个循环，这个循环会轮询消息队列，来处理发送给它的消息。而四种组件则被这个线程统一管理。所以，ActivityThread这个线程是一个动态的过程，像一个无休止的转动的法条，而四个组件则像是被驱动四个齿轮，需要它们转动时才会在法条的带动下进行转动。</li>
<li>主线程中有一个Looper，Looper是一个循环，其中又有一个MessageQueue来管理消息队列。MessageQueue又有一个mPtr变量，记录了c++层对应的NativeMessageQueue的位置。NativeMessageQueue也有一个c++层的Looper，它负责管理pip，而pip则是进程间通信的通道。 </li>
</ol>
<a id="more"></a>
<h2 id="1-线程消息循环"><a href="#1-线程消息循环" class="headerlink" title="1. 线程消息循环"></a>1. 线程消息循环</h2><p><img src="http://img.blog.csdn.net/20160916145806480" alt="这里写图片描述"></p>
<ol>
<li>ActivityThread会由此进入循环。通过一个无限循环，从MessageQueue里获取Message，这里可能会被阻塞，见1.2。获取消息后，分发消息到响应的的组件。</li>
<li>调用nativePollOnce函数来判断是否有新的消息，见1.3。如果有新消息，则判断时机是否已到，时机到了则将Message返回。如果时机未到，或者还没有消息，则先执行一些<code>IdleHandler</code>。</li>
<li>这一步将ptr翻译成一个NativeMessageQueue的对象指针，然后将任务交给它来处理。目前该c++文件位于<code>frameworks/base/core/jni</code>目录下。</li>
<li>NativeMessage又将任务交给c++层的Looper来处理。</li>
<li>Looper.cpp文件位于<code>system/core/libutils</code>。这里同样一个循环，不断调用pollInner来判断时候有新消息。</li>
<li>Looper中有一个epoll实例，epoll是用来监听IO读写的一种机制，这里来监听pip是否有读写事件。这里使用epoll_wait来等待epoll中的读写事件，如果没有则会根据设定睡眠一段时间。如果有事件，则对比该事件描述符是否为mWakeEventFd文件描述符，如果是，则调用awoken。</li>
<li>尝试从mWakeEventFd文件描述符中读出数据，里面的数据并没有什么实际意义。</li>
</ol>
<h2 id="2-线程消息发送过程"><a href="#2-线程消息发送过程" class="headerlink" title="2. 线程消息发送过程"></a>2. 线程消息发送过程</h2><p>Handler用来向一个消息队列发送消息。它内部有mLooper和mQueue，在构造Handler时，会将它所在线程中的Looper获取，放入mLooper。<br><img src="http://img.blog.csdn.net/20160918112806764" alt="这里写图片描述"></p>
<ol>
<li>发送一个消息。</li>
<li>加入延迟的发送消息。</li>
<li>在某个时间点发送消息，这里会将这个消息和发送时刻放入队列。</li>
<li>将message的target设为该Handler，然后将message放入mQueue。</li>
<li>消息队列是根据时间进行排序，所以这一步会根据该消息的时间，将消息插入到适合的位置。如果队列头发生变化，就要进入native世界，唤醒等待的人。</li>
<li>这一函数对应c++中的<code>android_os_MessageQueue_nativeWake</code>。这里会将传入的ptr转化为一个NativeMessageQueue的指针。</li>
<li>调用mLooper的wake函数。</li>
<li>这一步会向mWakeEventFd描述写入一个数据”1”，并没有什么实际意义，就是想触发一个IO事件，然后让等待这个IO事件的epoll_wait触发。</li>
</ol>
<h2 id="3-线程消息处理"><a href="#3-线程消息处理" class="headerlink" title="3. 线程消息处理"></a>3. 线程消息处理</h2><p><img src="http://img.blog.csdn.net/20160918165035114" alt="这里写图片描述"></p>
<ol>
<li>再次回到looper函数，在第1节中，线程会阻塞在该函数中，直到获取了一个消息。如果获得的消息为null，则退出循环。否则，获取消息的target，从2.4可知target为一个Handler，下面看这个Handler如何派发消息。</li>
<li>这里要处理三种情况：第一种，message提供了自己的回调函数，见3.3；第二种，使用Handler提供回调函数mCallback，见3.4；第三种，由Handler继续处理见3.5。</li>
<li>这里message的callback参数指向的是一个Runnable的对象，所以这一步直接启动这个对象的run函数即可。</li>
<li>CallBack接口中只有handleMessage函数，这里需要在定义Handler时，设定一个实现CallBack接口的对象。</li>
<li>同样，这是一个需要子类来具体实现的函数。一般我们在定义一个Handler时，定义的是一个Handler子类，在handleMessage函数中实现自己的功能。</li>
</ol>
<h2 id="4-接着说两句"><a href="#4-接着说两句" class="headerlink" title="4. 接着说两句"></a>4. 接着说两句</h2><p>在1.2中涉及到的IdleHandler，在没有消息需要处理时，会调返回这个空闲Handler。那么，我们来看一下这个Handler如何工作的。</p>
<p>在MessageQueue中，有mIdleHandlers来存放IdleHandler。在next函数中，如果没有获得一个消息，则会开始处理idler。这里会判断是否有idler在mIdleHandlers中，没有或者原来已经发送过一个了，则无需发送，所以一个线程的一次next调用，最多只会发送一次idler。</p>
<p>如果有idler，且为第一次发送，则开始处理这些idler。这里会调用IdleHandler的queueIdler函数。同样，这里需要自己实现IdlerHandler接口，来处理一些不紧急的事情。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;原来写好的博客被CSDN给坑了，法克，只能靠回忆重写。    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Android应用程序的四种组件皆运行于ActivityThread之中。ActivityThread包含有程序入口main，同时它会启动一个循环，这个循环会轮询消息队列，来处理发送给它的消息。而四种组件则被这个线程统一管理。所以，ActivityThread这个线程是一个动态的过程，像一个无休止的转动的法条，而四个组件则像是被驱动四个齿轮，需要它们转动时才会在法条的带动下进行转动。&lt;/li&gt;
&lt;li&gt;主线程中有一个Looper，Looper是一个循环，其中又有一个MessageQueue来管理消息队列。MessageQueue又有一个mPtr变量，记录了c++层对应的NativeMessageQueue的位置。NativeMessageQueue也有一个c++层的Looper，它负责管理pip，而pip则是进程间通信的通道。 &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(9):ContentProvider数据更新通知</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-9-ContentProvider%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E9%80%9A%E7%9F%A5/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-9-ContentProvider数据更新通知/</id>
    <published>2017-02-14T06:05:43.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-用户注册内容观察者"><a href="#1-用户注册内容观察者" class="headerlink" title="1. 用户注册内容观察者"></a><em>1.</em> 用户注册内容观察者</h2><p><img src="http://img.blog.csdn.net/20160908190740714" alt="这里写图片描述"></p>
<ol>
<li>用户（比如一个Activity）想要实时获得某项内容的变化，需要注册相应的观察者。这个观察者可以自定，但是需要继承<code>ContentObserver</code>类，这个类的构造函数需要一个Handle参数，这个Handle就是用来向用户发送数据变化消息的。然后将observer作为参数，利用ContentResolver的这个函数进行注册。</li>
<li>在1.1中想要注册observer，首先要利用该步骤获取<code>ContentService</code>。ContentService是一个系统服务，由ServiceManager管理。这一步获取的实际上市ContentService的Binder代理对象。</li>
<li>在1.1中注册的observer实际传递的是observer的Transport类型的Binder代理对象，所以这一步要从observer中获得这个transport。</li>
<li>这一步为进程间函数调用。这一步会将observer加入到mRootNode中，因为ContentService用一棵树来维护所有注册到这里的观测者。用树结构是因为URI天然的树状结构。</li>
<li>这个函数是一个在树上寻找和添加节点的递归函数。在按照URI的层次结构寻找目标节点时，可能会创造新的节点。直到匹配了最后的节点，将observer封装在ObserverEntry中，添加进该节点。</li>
</ol>
<a id="more"></a>
<h2 id="2-Content-Provider发送更新消息"><a href="#2-Content-Provider发送更新消息" class="headerlink" title="2. Content Provider发送更新消息"></a><em>2</em>. Content Provider发送更新消息</h2><p><img src="http://img.blog.csdn.net/20160908190715901" alt="这里写图片描述"></p>
<ol>
<li>Content Provider如果想要发送更新通知，需要调用ontifyChange函数。这一步以新的URI、和Observer为参数，这里将Observer设置为null。这一步会做一些检测URI、observer是否为空的工作。最后，仍然是获取一个ContentService的进程间通讯代理，然后调用ContentService的notifyChange函数。</li>
<li>在这一步中，会从根节点mRootNode中收集所有的Observer，见2.3。然后依次调用这些Observer的onChange函数，见2.4。</li>
<li>这一步会根据URI指示的路径，依次遍历树上的节点。对于经过的每一个节点，需要将该节点上所有对这个消息感兴趣的observer都封装成ObserverCall添加进入。</li>
<li>这一步也是进程间的函数调用。这里Transport又将消息抛给ContentObserver处理。</li>
<li>ContentObserver将消息封装进一个NotificationRunnable函数，然后利用mHandler 将其post给应用程序主线程处理。</li>
<li>这个函数是在主线程中运行。这将要调用它父类的onChange函数。</li>
<li>运行自己重写的ContentObserver的onChange函数，消息发送完毕。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-用户注册内容观察者&quot;&gt;&lt;a href=&quot;#1-用户注册内容观察者&quot; class=&quot;headerlink&quot; title=&quot;1. 用户注册内容观察者&quot;&gt;&lt;/a&gt;&lt;em&gt;1.&lt;/em&gt; 用户注册内容观察者&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160908190740714&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户（比如一个Activity）想要实时获得某项内容的变化，需要注册相应的观察者。这个观察者可以自定，但是需要继承&lt;code&gt;ContentObserver&lt;/code&gt;类，这个类的构造函数需要一个Handle参数，这个Handle就是用来向用户发送数据变化消息的。然后将observer作为参数，利用ContentResolver的这个函数进行注册。&lt;/li&gt;
&lt;li&gt;在1.1中想要注册observer，首先要利用该步骤获取&lt;code&gt;ContentService&lt;/code&gt;。ContentService是一个系统服务，由ServiceManager管理。这一步获取的实际上市ContentService的Binder代理对象。&lt;/li&gt;
&lt;li&gt;在1.1中注册的observer实际传递的是observer的Transport类型的Binder代理对象，所以这一步要从observer中获得这个transport。&lt;/li&gt;
&lt;li&gt;这一步为进程间函数调用。这一步会将observer加入到mRootNode中，因为ContentService用一棵树来维护所有注册到这里的观测者。用树结构是因为URI天然的树状结构。&lt;/li&gt;
&lt;li&gt;这个函数是一个在树上寻找和添加节点的递归函数。在按照URI的层次结构寻找目标节点时，可能会创造新的节点。直到匹配了最后的节点，将observer封装在ObserverEntry中，添加进该节点。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(8):ContentProvider数据传输过程</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-8-ContentProvider%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-8-ContentProvider数据传输过程/</id>
    <published>2017-02-14T06:03:37.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。 </p>
</blockquote>
<h2 id="1-用户开始查询"><a href="#1-用户开始查询" class="headerlink" title="1. 用户开始查询"></a><em>1</em>. 用户开始查询</h2><p><img src="http://img.blog.csdn.net/20160905214338676" alt="这里写图片描述"></p>
<ol>
<li>用户调用<code>query</code>函数进行查询。首先尝试获得provider，这里分为两种，先是unstable，后是stable，暂时没有分清这两者之间的区别。在尝试获取Provider的过程中，将会类似于第7篇文章中的过程。这里假设该用户已经有该provider的记录，获取过程见1.2。在取得provider后，见1.5。</li>
<li>继续获取Provider。</li>
<li>继续获取Provider。</li>
<li>ActivityThread将所有已经获得的Provider放在mProviderMap中。这里假设需要获取的Provider存在，返回一个<code>IContentProvider</code>类型的provider，这个接口指向了Content Provider的一个Transport代理对象，即ContentProviderProxy对象。</li>
<li>使用provider的代理进行查询。这里会创建一个<code>BulkCursorToCursorAdaptor</code>对象。该版本没有创建CursorWindow对象，即没有创建匿名内存，和旧版本有些区别。那么，新版本中在哪里创建共享的内存区呢？最后，准备通过进程间通信发送消息，等待返回的BulkCursorDescriptor，然后可以获得对应的BulkCursorToCursorAdaptor，即一个AbstractWindowedCursor。</li>
</ol>
<a id="more"></a>
<h2 id="2-Content-Provider处理事务"><a href="#2-Content-Provider处理事务" class="headerlink" title="2. Content Provider处理事务"></a><em>2</em>. Content Provider处理事务</h2><p><img src="http://img.blog.csdn.net/20160905214406127" alt="这里写图片描述"></p>
<ol>
<li>该函数负责处理<code>QUERY_TRANSACTION</code>事务。首先将传入的数据解析出来，然后利用其子类Transport进行查询，从2.2~2.6，获得一个SQLiteCursor对象。然后用SQLiteCursor封装成CursorToBulkCursorAdapter对象。然后创建BulkCursorDescriptor，从2.7~2.11，目的就是创建window，将数据放入window。然后将BulkCursorDescriptor存入reply，里面包含了SQLiteCursor的binder本地对象，因为SQLiteCursor里又含有window，最后返回给用户后，用户可以获得window里存储的内容。</li>
<li>这里会检查用户是否有权限访问该数据，如果有权限，则调用自己实现的ContentProvider子类的query函数进行查询。</li>
<li>该函数需要在子类中重载，实现自己的查询过程。这里，我们假设使用了数据库查询。</li>
<li>这里会首先根据传入的参数创建一条SQL查询语句，然后在数据库中进行查询。</li>
<li>这一步会创建一个数据查询driver，用来执行查询。</li>
<li>创建一个SQLiteCursor对象，这个对象包含了database、driver、query。下面就是将SQLiteCursor返回，一直返回到2.1中。</li>
<li>该步骤会对创建的BulkCursorDescriptor进行一定的初始化。</li>
<li>获得用户需要的数据条数。开始时为-1，说明尚未执行查询过程，所以下面要执行查询数据，同时将数据放入内存共享区window。</li>
<li>因为window还没创建，所以第一件事是先创建共享内存区window，见2.10。然后填充window，见2.11。</li>
<li>这一步会创建新的window或者清空旧的window以重复利用。这里的window以数据库的路径为名称。创建CursorWindow的过程会调用native函数，见3.1~3.3，所以，新的Android版本放弃了原来在用户中创建window的模式，而是在Content Provider中统一创建、管理window。</li>
<li>填充window，这里同样会使用sql的一些方法，最后落脚于调用native函数，见4.1~4.3。执行到这里，需要查询的数据已经被存储于window中。</li>
</ol>
<h2 id="3-Provider创建window的native过程"><a href="#3-Provider创建window的native过程" class="headerlink" title="3. Provider创建window的native过程"></a><em>3</em>. Provider创建window的native过程</h2><p><img src="http://img.blog.csdn.net/20160906191744953" alt="这里写图片描述"></p>
<ol>
<li>在2.10中，会创建CursorWindow对象，所以，SQLiteCursor调用了CursorWindow的构造函数。在该步骤中，会设置window的大小，该大小会在资源文件xml中设置。然后创建window的过程就交给c++代码完成。</li>
<li><code>android_database_CursorWindow.cpp</code>位于<em>frameworks/base/core/jni/</em>目录下。这里会创建一个CursorWindow对象window，见3.3。然后用<code>reinterpret_cast</code>函数将window指针类型变为jlong返回。</li>
<li>这里就会创建匿名内存块。这里使用了匿名内存分配的机制，暂不深究。</li>
</ol>
<h2 id="4-Provider填充window的native过程"><a href="#4-Provider填充window的native过程" class="headerlink" title="4. Provider填充window的native过程"></a><em>4</em>. Provider填充window的native过程</h2><p><img src="http://img.blog.csdn.net/20160906191803016" alt="这里写图片描述"></p>
<ol>
<li>在2.11中，会对步骤3中创建的window进行填充。这一步会获得一个SQLiteConnection对象，然后通过这个connection进行数据库操作。</li>
<li>这里开始调用native code执行数据查询，同时填充window。</li>
<li>这里会通过sqlite3一行一行的将数据copy入window，这里暂不深究sqlite3如何在c++中的使用过程。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-用户开始查询&quot;&gt;&lt;a href=&quot;#1-用户开始查询&quot; class=&quot;headerlink&quot; title=&quot;1. 用户开始查询&quot;&gt;&lt;/a&gt;&lt;em&gt;1&lt;/em&gt;. 用户开始查询&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160905214338676&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户调用&lt;code&gt;query&lt;/code&gt;函数进行查询。首先尝试获得provider，这里分为两种，先是unstable，后是stable，暂时没有分清这两者之间的区别。在尝试获取Provider的过程中，将会类似于第7篇文章中的过程。这里假设该用户已经有该provider的记录，获取过程见1.2。在取得provider后，见1.5。&lt;/li&gt;
&lt;li&gt;继续获取Provider。&lt;/li&gt;
&lt;li&gt;继续获取Provider。&lt;/li&gt;
&lt;li&gt;ActivityThread将所有已经获得的Provider放在mProviderMap中。这里假设需要获取的Provider存在，返回一个&lt;code&gt;IContentProvider&lt;/code&gt;类型的provider，这个接口指向了Content Provider的一个Transport代理对象，即ContentProviderProxy对象。&lt;/li&gt;
&lt;li&gt;使用provider的代理进行查询。这里会创建一个&lt;code&gt;BulkCursorToCursorAdaptor&lt;/code&gt;对象。该版本没有创建CursorWindow对象，即没有创建匿名内存，和旧版本有些区别。那么，新版本中在哪里创建共享的内存区呢？最后，准备通过进程间通信发送消息，等待返回的BulkCursorDescriptor，然后可以获得对应的BulkCursorToCursorAdaptor，即一个AbstractWindowedCursor。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(7):Content Provider的启动</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-7-ContentProvider%E7%9A%84%E5%90%AF%E5%8A%A8/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-7-ContentProvider的启动/</id>
    <published>2017-02-14T06:01:17.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。   </p>
</blockquote>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><ul>
<li>Content Provider运行在一个独立的应用程序进程中，它本事就是一个Android应用程序。</li>
<li>Binder进程间通信只适合传递体积较小的数据结构，不适合大量数据的传输。所以需要采用匿名共享内存来传输体积较大的数据。</li>
<li>Cursor对象通过匿名共享内存来传输数据，而Bundle是通过Binder传递数据。</li>
</ul>
<a id="more"></a>
<h2 id="1-用户开始调用Provider"><a href="#1-用户开始调用Provider" class="headerlink" title="1. 用户开始调用Provider"></a><em>1</em>. 用户开始调用Provider</h2><p>首先，Activity集成的ContextWrapper中有成员函数<code>getContentResolver</code>，用该函数可以获得一个ContentResolver对象。该ContentResolver对象是在ContextImpl对象建立时创建的一个ApplicationContentResolver对象。</p>
<p>下面从ContentResolver.acquireProvider开始。<br><img src="http://img.blog.csdn.net/20160902220256938" alt="这里写图片描述"></p>
<ol>
<li>步骤1的主要目的是验证URI是否正确，然后就会将acquireProvider的任务交给子类来实现，这里它将任务传递给ApplicationContentResolver。</li>
<li>步骤2直接将任务给主线程处理。</li>
<li>步骤3将会尝试从已有的Provider中获取目标Provider，ActivityThread将已经访问过的Provider放入mProviderMap中，如果其中含有需要获取的Provider，只需要增加对其的引用数目即可。如果没有，则需要请求ActivityManager来获取Provider（见1.4），ActivityManager最后会返回一个ContentProviderHolder（见2.2，见6.1）。最后，需要将获得的ContentProviderHolder进行install(见1.5)。</li>
<li>这里假设没有现成的Provider，则需要交给ActivityManager进行处理。</li>
<li>这一步和5.7是一样的函数，区别在于这里的holder不为null，所以不需要自己通过类加载创建Provider，只需要将这个Provider放入mProviderRefCountMap中，对其引用加1。</li>
</ol>
<h2 id="2-ActivityManager处理请求"><a href="#2-ActivityManager处理请求" class="headerlink" title="2. ActivityManager处理请求"></a><em>2</em>. ActivityManager处理请求</h2><p><img src="http://img.blog.csdn.net/20160902220401299" alt="这里写图片描述"></p>
<ol>
<li>这一步检验调用者caller是否为空，如果为空，则说明没有应用在请求Provider，则无需继续进行。</li>
<li>这一步所做的处理比较多。首先，Manager首先根据name在mProviderMap中查找是否已经启动。如果没有，则根据Class来查找是否已经启动。如果仍然没有，则构建<code>ContentProviderRecord</code>，里面包含了<code>ProviderInfo</code>,<code>ApplicationInfo</code>等重要信息。然后，如果是<em>multiprocess</em>属性为<code>true</code>，则将该<code>ContentProviderRecord</code>直接返回给调用者，让其实例化。在我们的例子中，我们假设该属性为false，需要创建新的进程来启动该Provider。下面就要开始启动新的进程，会在2.3中详细讲述，然后将Record放入mProvider。最后，ActivityManager进入循环等待provider启动，在发现provider启动后（见6.1），则退出循环，将ContentProviderHolder返回给用户（见1.3）。</li>
<li>这一步就是进入启动新进程的准备工作。</li>
</ol>
<h2 id="3-新进程的启动"><a href="#3-新进程的启动" class="headerlink" title="3. 新进程的启动"></a><em>3</em>. 新进程的启动</h2><p><img src="http://img.blog.csdn.net/20160902220422830" alt="这里写图片描述"><br>这里的启动过程和原来一样。</p>
<h2 id="4-ActivityManager处理新的进程"><a href="#4-ActivityManager处理新的进程" class="headerlink" title="4. ActivityManager处理新的进程"></a><em>4</em>. ActivityManager处理新的进程</h2><p><img src="http://img.blog.csdn.net/20160902220440500" alt="这里写图片描述"></p>
<ol>
<li>获取新进程pid。</li>
<li>这一步先根据pid获得对应的ProcessRecord，然后填充ProcessRecord的信息。然后，获取需要在该进程中启动的Provider的列表，将在4.3中详解。接下来依次启动该进程中的Content Provider（在4.4中详解）、Activity、Service和Broadcast Receiver。</li>
<li>这一步通过PackageManager获得所有的该应用进程下需要启动的Provider，然后为其创建ContentProviderRecord，放入mProviderMap。</li>
<li>准备向新进程发送消息。</li>
</ol>
<h2 id="5-Content-Provider在新进程中启动"><a href="#5-Content-Provider在新进程中启动" class="headerlink" title="5. Content Provider在新进程中启动"></a><em>5</em>. Content Provider在新进程中启动</h2><p><img src="http://img.blog.csdn.net/20160902220538532" alt="这里写图片描述"></p>
<ol>
<li>将收到的数据封装成一个AppBindData，准备发送到主线程中。</li>
<li>发送消息。</li>
<li>发送消息。</li>
<li>处理异步消息。</li>
<li>准备启动所有的Provider。</li>
<li>这一步将传递过来的每一个<code>ProviderInfo</code>通过<code>installProvider</code>函数（见5.7）封装成了<code>ContentProviderHolder</code>。然后将所有生成的<code>ContentProviderHolder</code>告知给ActivityManager（见5.11）。</li>
<li>这一步根据Provider的类名，使用ClassLoader实例化一个ContentProvider对象，并对其进行一定的初始化（见5.8、5.9）工作。然后，创建对应的ProviderClientRecord，将其放入mLocalProviders和mLocalProvidersByName。</li>
<li>获取该Provider的类型为Transport的Binder本地对象。这个Binder将会告知给ActivityManagerService，然后有它再告知给需要使用该Provider的其它组件。然后其它进程组件就可以使用这个Binder来使用这个provider了。</li>
<li>这里会设置该provider的context，同时设置读写权限。最后会调用重写的onCreate函数。</li>
<li>调用自己实现的onCreate函数。</li>
<li>将自己的Provider告知给ActivityManager。</li>
</ol>
<h2 id="6-ActivityManager发布Provider"><a href="#6-ActivityManager发布Provider" class="headerlink" title="6. ActivityManager发布Provider"></a><em>6</em>. ActivityManager发布Provider</h2><p><img src="http://img.blog.csdn.net/20160902220606286" alt="这里写图片描述"></p>
<ol>
<li>这一步会将ActivityManager利用获得的ContentProviderHolder对记录的ContentProviderRecord的provider进行填充，同时将该ContentProviderRecord放入mProviderMap。最后将该Record移除mLaunchingProviders。在2.2中等待的ActivityManagerService线程循环等待发现provider不为null，退出循环，返回ContentProviderHolder给用户（见1.3）。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Content Provider运行在一个独立的应用程序进程中，它本事就是一个Android应用程序。&lt;/li&gt;
&lt;li&gt;Binder进程间通信只适合传递体积较小的数据结构，不适合大量数据的传输。所以需要采用匿名共享内存来传输体积较大的数据。&lt;/li&gt;
&lt;li&gt;Cursor对象通过匿名共享内存来传输数据，而Bundle是通过Binder传递数据。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(6)广播机制</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-6-%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-6-广播机制/</id>
    <published>2017-02-14T05:57:56.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android系统源码阅读（6）：广播机制"><a href="#Android系统源码阅读（6）：广播机制" class="headerlink" title="Android系统源码阅读（6）：广播机制"></a>Android系统源码阅读（6）：广播机制</h1><blockquote>
<p>该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。    </p>
</blockquote>
<h2 id="注册广播接收器"><a href="#注册广播接收器" class="headerlink" title="注册广播接收器"></a>注册广播接收器</h2><h3 id="Step1-Activity开始注册"><a href="#Step1-Activity开始注册" class="headerlink" title="Step1. Activity开始注册"></a>Step1. Activity开始注册</h3><p><img src="http://img.blog.csdn.net/20160821154639757" alt="这里写图片描述"></p>
<a id="more"></a>
<h3 id="Step2-ActivityManagerService处理注册"><a href="#Step2-ActivityManagerService处理注册" class="headerlink" title="Step2. ActivityManagerService处理注册"></a>Step2. ActivityManagerService处理注册</h3><p><img src="http://img.blog.csdn.net/20160821154752054" alt="这里写图片描述"></p>
<h2 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h2><h3 id="Step1-Activity发送广播"><a href="#Step1-Activity发送广播" class="headerlink" title="Step1. Activity发送广播"></a>Step1. Activity发送广播</h3><p><img src="http://img.blog.csdn.net/20160821154940083" alt="这里写图片描述"></p>
<h3 id="Step2-ActivityManagerService处理广播消息"><a href="#Step2-ActivityManagerService处理广播消息" class="headerlink" title="Step2. ActivityManagerService处理广播消息"></a>Step2. ActivityManagerService处理广播消息</h3><p><img src="http://img.blog.csdn.net/20160821155023461" alt="这里写图片描述"></p>
<h3 id="Step3-Activity接收广播"><a href="#Step3-Activity接收广播" class="headerlink" title="Step3. Activity接收广播"></a>Step3. Activity接收广播</h3><p><img src="http://img.blog.csdn.net/20160821155114881" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android系统源码阅读（6）：广播机制&quot;&gt;&lt;a href=&quot;#Android系统源码阅读（6）：广播机制&quot; class=&quot;headerlink&quot; title=&quot;Android系统源码阅读（6）：广播机制&quot;&gt;&lt;/a&gt;Android系统源码阅读（6）：广播机制&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;注册广播接收器&quot;&gt;&lt;a href=&quot;#注册广播接收器&quot; class=&quot;headerlink&quot; title=&quot;注册广播接收器&quot;&gt;&lt;/a&gt;注册广播接收器&lt;/h2&gt;&lt;h3 id=&quot;Step1-Activity开始注册&quot;&gt;&lt;a href=&quot;#Step1-Activity开始注册&quot; class=&quot;headerlink&quot; title=&quot;Step1. Activity开始注册&quot;&gt;&lt;/a&gt;Step1. Activity开始注册&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160821154639757&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(5):Service在进程内绑定</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-5-Service%E5%9C%A8%E8%BF%9B%E7%A8%8B%E5%86%85%E7%BB%91%E5%AE%9A/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-5-Service在进程内绑定/</id>
    <published>2017-02-14T05:56:11.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android系统源码阅读（5）：Service在进程内绑定"><a href="#Android系统源码阅读（5）：Service在进程内绑定" class="headerlink" title="Android系统源码阅读（5）：Service在进程内绑定"></a>Android系统源码阅读（5）：Service在进程内绑定</h1><blockquote>
<p>该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。 </p>
</blockquote>
<h2 id="Step1-Activity开始启动Service"><a href="#Step1-Activity开始启动Service" class="headerlink" title="Step1. Activity开始启动Service"></a>Step1. Activity开始启动Service</h2><p><img src="http://img.blog.csdn.net/20160818225346176" alt="这里写图片描述"></p>
<a id="more"></a>
<h2 id="Step2-ActivityManagerService中准备"><a href="#Step2-ActivityManagerService中准备" class="headerlink" title="Step2. ActivityManagerService中准备"></a>Step2. ActivityManagerService中准备</h2><p><img src="http://img.blog.csdn.net/20160819144636114" alt="这里写图片描述"></p>
<p>这里需要注意有两次进程间通信，先讲第7步 (Step3)，再讲第9步(Step4)。</p>
<h2 id="Step3-Service创建"><a href="#Step3-Service创建" class="headerlink" title="Step3. Service创建"></a>Step3. Service创建</h2><p><img src="http://img.blog.csdn.net/20160818225823568" alt="这里写图片描述"></p>
<h2 id="Step4-Service公布IBinder"><a href="#Step4-Service公布IBinder" class="headerlink" title="Step4. Service公布IBinder"></a>Step4. Service公布IBinder</h2><p><img src="http://img.blog.csdn.net/20160818225912992" alt="这里写图片描述"></p>
<h2 id="Step5-ActivityManagerService公布Service"><a href="#Step5-ActivityManagerService公布Service" class="headerlink" title="Step5. ActivityManagerService公布Service"></a>Step5. ActivityManagerService公布Service</h2><p><img src="http://img.blog.csdn.net/20160819144711212" alt="这里写图片描述"></p>
<h2 id="Step6-Activity建立Connection"><a href="#Step6-Activity建立Connection" class="headerlink" title="Step6. Activity建立Connection"></a>Step6. Activity建立Connection</h2><p><img src="http://img.blog.csdn.net/20160818230007631" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android系统源码阅读（5）：Service在进程内绑定&quot;&gt;&lt;a href=&quot;#Android系统源码阅读（5）：Service在进程内绑定&quot; class=&quot;headerlink&quot; title=&quot;Android系统源码阅读（5）：Service在进程内绑定&quot;&gt;&lt;/a&gt;Android系统源码阅读（5）：Service在进程内绑定&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Step1-Activity开始启动Service&quot;&gt;&lt;a href=&quot;#Step1-Activity开始启动Service&quot; class=&quot;headerlink&quot; title=&quot;Step1. Activity开始启动Service&quot;&gt;&lt;/a&gt;Step1. Activity开始启动Service&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160818225346176&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(4):Service在新进程中启动过程</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-4-Service%E5%9C%A8%E6%96%B0%E8%BF%9B%E7%A8%8B%E4%B8%AD%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-4-Service在新进程中启动过程/</id>
    <published>2017-02-14T05:54:43.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android系统源码阅读（4）：Service在新进程中启动过程"><a href="#Android系统源码阅读（4）：Service在新进程中启动过程" class="headerlink" title="Android系统源码阅读（4）：Service在新进程中启动过程"></a>Android系统源码阅读（4）：Service在新进程中启动过程</h1><blockquote>
<p>该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。   </p>
</blockquote>
<h2 id="Step1-Activity开始启动Service"><a href="#Step1-Activity开始启动Service" class="headerlink" title="Step1. Activity开始启动Service"></a>Step1. Activity开始启动Service</h2><p><img src="http://img.blog.csdn.net/20160818135053514" alt="这里写图片描述">  </p>
<a id="more"></a>
<h2 id="Step2-ActivityManagerService准备"><a href="#Step2-ActivityManagerService准备" class="headerlink" title="Step2. ActivityManagerService准备"></a>Step2. ActivityManagerService准备</h2><p><img src="http://img.blog.csdn.net/20160818135157155" alt="这里写图片描述">    </p>
<h2 id="Step3-ActivityThread新进程启动"><a href="#Step3-ActivityThread新进程启动" class="headerlink" title="Step3. ActivityThread新进程启动"></a>Step3. ActivityThread新进程启动</h2><p><img src="http://img.blog.csdn.net/20160818135237858" alt="这里写图片描述">   </p>
<h2 id="Step4-ActivityManagerService启动等待的Service"><a href="#Step4-ActivityManagerService启动等待的Service" class="headerlink" title="Step4. ActivityManagerService启动等待的Service"></a>Step4. ActivityManagerService启动等待的Service</h2><p><img src="http://img.blog.csdn.net/20160818135341778" alt="这里写图片描述"></p>
<h2 id="Step5-Server创建"><a href="#Step5-Server创建" class="headerlink" title="Step5. Server创建"></a>Step5. Server创建</h2><p><img src="http://img.blog.csdn.net/20160818135416357" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android系统源码阅读（4）：Service在新进程中启动过程&quot;&gt;&lt;a href=&quot;#Android系统源码阅读（4）：Service在新进程中启动过程&quot; class=&quot;headerlink&quot; title=&quot;Android系统源码阅读（4）：Service在新进程中启动过程&quot;&gt;&lt;/a&gt;Android系统源码阅读（4）：Service在新进程中启动过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Step1-Activity开始启动Service&quot;&gt;&lt;a href=&quot;#Step1-Activity开始启动Service&quot; class=&quot;headerlink&quot; title=&quot;Step1. Activity开始启动Service&quot;&gt;&lt;/a&gt;Step1. Activity开始启动Service&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160818135053514&quot; alt=&quot;这里写图片描述&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(3):子Activity在进程内的启动过程</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-3-%E5%AD%90Activity%E5%9C%A8%E8%BF%9B%E7%A8%8B%E5%86%85%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-3-子Activity在进程内的启动过程/</id>
    <published>2017-02-14T05:51:41.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。</p>
</blockquote>
<h2 id="子Activity在进程内的启动过程"><a href="#子Activity在进程内的启动过程" class="headerlink" title="子Activity在进程内的启动过程"></a>子Activity在进程内的启动过程</h2><h3 id="Step1-Activity开始启动另一个Activity"><a href="#Step1-Activity开始启动另一个Activity" class="headerlink" title="Step1. Activity开始启动另一个Activity"></a>Step1. Activity开始启动另一个Activity</h3><p><img src="http://img.blog.csdn.net/20160817155832276" alt="这里写图片描述"><br>这里和从Launcher启动过程几乎没分别，但是启动有些参数的设置还是有区别的。</p>
<a id="more"></a>
<h3 id="Step2-ActivityManagerService准备"><a href="#Step2-ActivityManagerService准备" class="headerlink" title="Step2. ActivityManagerService准备"></a>Step2. ActivityManagerService准备</h3><p><img src="http://img.blog.csdn.net/20160817160041764" alt="这里写图片描述"><br>同样这些会先停止正在最前端的Activity。</p>
<h3 id="Step3-旧Activity停止"><a href="#Step3-旧Activity停止" class="headerlink" title="Step3. 旧Activity停止"></a>Step3. 旧Activity停止</h3><p><img src="http://img.blog.csdn.net/20160817160321578" alt="这里写图片描述"><br>同样这里需要在完成停止过程后告知ActivityManagerService。</p>
<h3 id="Step4-ActivityManagerService继续准备"><a href="#Step4-ActivityManagerService继续准备" class="headerlink" title="Step4.  ActivityManagerService继续准备"></a>Step4.  ActivityManagerService继续准备</h3><p><img src="http://img.blog.csdn.net/20160817160534704" alt="这里写图片描述"><br>万事俱备，只待真的启动Activity。</p>
<h3 id="Step5-新Activity创建"><a href="#Step5-新Activity创建" class="headerlink" title="Step5. 新Activity创建"></a>Step5. 新Activity创建</h3><p><img src="http://img.blog.csdn.net/20160817160656204" alt="这里写图片描述"><br>到这里启动完毕。</p>
<h2 id="Task-Process-and-Activity"><a href="#Task-Process-and-Activity" class="headerlink" title="Task, Process and Activity"></a>Task, Process and Activity</h2><p>这几个概念真的很让人混淆，最基本的一句话是它们几个是完全不同的抽象概念。</p>
<p>先说Process和Activity。一个Application可以多个Activity和多个Process。两个Activity可以运行在相同的Process里，也可以在不同的Process里，这里可以在AndroidManifest.xml中设置<code>android:process</code>，默认情况下是运行在同一个Process里的。并且该进程中的Activity、Service都是运行在主线程中，所以Service也不是一个独立的线程概念，不可以直接在Service中运行耗时的任务。</p>
<p>Task同样和Process没有一一对应的关系。Task是描述Activity跳转状态的栈，利用后退操作是在同一个栈中进行Activity的回退；同样，某一个Activity启动了其它Application的Activity（比如你的app调用了系统自带的相册app），这两个Activity同样会放置于同一个栈中，虽然这两个acitivity明显不在同一个Application中，也有可能不在同一个Process中。Task在用户通过任务管理器来切换时，则会发生交换。将前台的Task放到后面，你选择的Task则会置于最前端。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;子Activity在进程内的启动过程&quot;&gt;&lt;a href=&quot;#子Activity在进程内的启动过程&quot; class=&quot;headerlink&quot; title=&quot;子Activity在进程内的启动过程&quot;&gt;&lt;/a&gt;子Activity在进程内的启动过程&lt;/h2&gt;&lt;h3 id=&quot;Step1-Activity开始启动另一个Activity&quot;&gt;&lt;a href=&quot;#Step1-Activity开始启动另一个Activity&quot; class=&quot;headerlink&quot; title=&quot;Step1. Activity开始启动另一个Activity&quot;&gt;&lt;/a&gt;Step1. Activity开始启动另一个Activity&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160817155832276&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;这里和从Launcher启动过程几乎没分别，但是启动有些参数的设置还是有区别的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(2):根Activity组件的启动过程</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-2-%E6%A0%B9Activity%E7%BB%84%E4%BB%B6%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-2-根Activity组件的启动过程/</id>
    <published>2017-02-14T05:34:58.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。</p>
</blockquote>
<h2 id="代码摘抄"><a href="#代码摘抄" class="headerlink" title="代码摘抄"></a>代码摘抄</h2><h3 id="两个版本的Launcher"><a href="#两个版本的Launcher" class="headerlink" title="两个版本的Launcher"></a>两个版本的Launcher</h3><p>目前版本已经从Launcher2（packages/apps/Launcher2/src/com/android/launcher2）进化为Launcher3（packages/apps/Launcher3/src/com/android/launcher3）。两个版本的Launcher有着一定的差异，老罗书中以Launcher2为出发点。</p>
<a id="more"></a>
<p><strong>packages/apps/Launcher2/src/com/android/launcher2/Launcher.java</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startActivity</span><span class="params">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// Only launch using the new animation if the shortcut has not opted out (this is a</span></div><div class="line">        <span class="comment">// private contract between launcher and may be ignored in the future).</span></div><div class="line">        <span class="keyword">boolean</span> useLaunchAnimation = (v != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                !intent.hasExtra(INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION);</div><div class="line">        UserHandle user = (UserHandle) intent.getParcelableExtra(ApplicationInfo.EXTRA_PROFILE);</div><div class="line">        LauncherApps launcherApps = (LauncherApps)</div><div class="line">                <span class="keyword">this</span>.getSystemService(Context.LAUNCHER_APPS_SERVICE);</div><div class="line">        <span class="keyword">if</span> (useLaunchAnimation) &#123;</div><div class="line">            ActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                    v.getMeasuredWidth(), v.getMeasuredHeight());</div><div class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span> || user.equals(android.os.Process.myUserHandle())) &#123;</div><div class="line">                <span class="comment">// Could be launching some bookkeeping activity</span></div><div class="line">                startActivity(intent, opts.toBundle());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                launcherApps.startMainActivity(intent.getComponent(), user,</div><div class="line">                        intent.getSourceBounds(),</div><div class="line">                        opts.toBundle());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span> || user.equals(android.os.Process.myUserHandle())) &#123;</div><div class="line">                startActivity(intent);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                launcherApps.startMainActivity(intent.getComponent(), user,</div><div class="line">                        intent.getSourceBounds(), <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class="line">        Log.e(TAG, <span class="string">"Launcher does not have the permission to launch "</span> + intent +</div><div class="line">                <span class="string">". Make sure to create a MAIN intent-filter for the corresponding activity "</span> +</div><div class="line">                <span class="string">"or use the exported attribute for this activity. "</span></div><div class="line">                + <span class="string">"tag="</span>+ tag + <span class="string">" intent="</span> + intent, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startActivitySafely</span><span class="params">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        success = startActivity(v, intent, tag);</div><div class="line">    &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class="line">        Log.e(TAG, <span class="string">"Unable to launch. tag="</span> + tag + <span class="string">" intent="</span> + intent, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> success;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">startActivity</span><span class="params">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// Only launch using the new animation if the shortcut has not opted out (this is a</span></div><div class="line">        <span class="comment">// private contract between launcher and may be ignored in the future).</span></div><div class="line">        <span class="keyword">boolean</span> useLaunchAnimation = (v != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                !intent.hasExtra(INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION);</div><div class="line">        LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(<span class="keyword">this</span>);</div><div class="line">        UserManagerCompat userManager = UserManagerCompat.getInstance(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        UserHandleCompat user = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (intent.hasExtra(AppInfo.EXTRA_PROFILE)) &#123;</div><div class="line">            <span class="keyword">long</span> serialNumber = intent.getLongExtra(AppInfo.EXTRA_PROFILE, -<span class="number">1</span>);</div><div class="line">            user = userManager.getUserForSerialNumber(serialNumber);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Bundle optsBundle = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (useLaunchAnimation) &#123;</div><div class="line">            ActivityOptions opts = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (Utilities.ATLEAST_MARSHMALLOW) &#123;</div><div class="line">                <span class="keyword">int</span> left = <span class="number">0</span>, top = <span class="number">0</span>;</div><div class="line">                <span class="keyword">int</span> width = v.getMeasuredWidth(), height = v.getMeasuredHeight();</div><div class="line">                <span class="keyword">if</span> (v <span class="keyword">instanceof</span> TextView) &#123;</div><div class="line">                    <span class="comment">// Launch from center of icon, not entire view</span></div><div class="line">                    Drawable icon = Workspace.getTextViewIcon((TextView) v);</div><div class="line">                    <span class="keyword">if</span> (icon != <span class="keyword">null</span>) &#123;</div><div class="line">                        Rect bounds = icon.getBounds();</div><div class="line">                        left = (width - bounds.width()) / <span class="number">2</span>;</div><div class="line">                        top = v.getPaddingTop();</div><div class="line">                        width = bounds.width();</div><div class="line">                        height = bounds.height();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                opts = ActivityOptions.makeClipRevealAnimation(v, left, top, width, height);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Utilities.ATLEAST_LOLLIPOP) &#123;</div><div class="line">                <span class="comment">// Below L, we use a scale up animation</span></div><div class="line">                opts = ActivityOptions.makeScaleUpAnimation(v, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                                v.getMeasuredWidth(), v.getMeasuredHeight());</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Utilities.ATLEAST_LOLLIPOP_MR1) &#123;</div><div class="line">                <span class="comment">// On L devices, we use the device default slide-up transition.</span></div><div class="line">                <span class="comment">// On L MR1 devices, we a custom version of the slide-up transition which</span></div><div class="line">                <span class="comment">// doesn't have the delay present in the device default.</span></div><div class="line">                opts = ActivityOptions.makeCustomAnimation(<span class="keyword">this</span>,</div><div class="line">                        R.anim.task_open_enter, R.anim.no_anim);</div><div class="line">            &#125;</div><div class="line">            optsBundle = opts != <span class="keyword">null</span> ? opts.toBundle() : <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span> || user.equals(UserHandleCompat.myUserHandle())) &#123;</div><div class="line">            <span class="comment">// Could be launching some bookkeeping activity</span></div><div class="line">            startActivity(intent, optsBundle);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// TODO Component can be null when shortcuts are supported for secondary user</span></div><div class="line">            launcherApps.startActivityForProfile(intent.getComponent(), user,</div><div class="line">                    intent.getSourceBounds(), optsBundle);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class="line">        Log.e(TAG, <span class="string">"Launcher does not have the permission to launch "</span> + intent +</div><div class="line">                <span class="string">". Make sure to create a MAIN intent-filter for the corresponding activity "</span> +</div><div class="line">                <span class="string">"or use the exported attribute for this activity. "</span></div><div class="line">                + <span class="string">"tag="</span>+ tag + <span class="string">" intent="</span> + intent, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startActivitySafely</span><span class="params">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (mIsSafeModeEnabled &amp;&amp; !Utilities.isSystemApp(<span class="keyword">this</span>, intent)) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.safemode_shortcut_error, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        success = startActivity(v, intent, tag);</div><div class="line">    &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class="line">        Log.e(TAG, <span class="string">"Unable to launch. tag="</span> + tag + <span class="string">" intent="</span> + intent, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> success;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Android的Singleton模式的实现"><a href="#Android的Singleton模式的实现" class="headerlink" title="Android的Singleton模式的实现"></a>Android的Singleton模式的实现</h3><p>在<strong>frameworks/base/core/java/android/app/ActivityManagerNative.java</strong>中<code>IActivityManager</code>是一个单利模式，所以Android实现了一个很标准的Singleton。在老罗版本里，没有使用这个类。</p>
<p><strong>framework/base/core/java/android/util/Singleton.java</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Singleton helper class for lazily initialization.</div><div class="line"> *</div><div class="line"> * Modeled after frameworks/base/include/utils/Singleton.h</div><div class="line"> *</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T mInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">create</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                mInstance = create();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> mInstance;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ActivityManagerService"><a href="#ActivityManagerService" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h3><p>显然，AcitivityManagerService的位置由<code>frameworks/base/services/java/com/android/service/am/ActivityManagerService.java</code>转移至<code>frameworks/base/services/core/java/com/android/service/am/ActivityManagerService.java</code>。同时<code>startActivity</code>函数也有所改变：</p>
<p><strong>frameworks/base/services/core/java/com/android/service/am/ActivityManagerService.java</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></div><div class="line">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">        <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) &#123;</div><div class="line">    <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</div><div class="line">        resultWho, requestCode, startFlags, profilerInfo, options,</div><div class="line">        UserHandle.getCallingUserId());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></div><div class="line">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">        <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class="keyword">int</span> userId) &#123;</div><div class="line">    enforceNotIsolatedCaller(<span class="string">"startActivity"</span>);</div><div class="line">    userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,</div><div class="line">            <span class="keyword">false</span>, ALLOW_FULL_ONLY, <span class="string">"startActivity"</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></div><div class="line">    <span class="keyword">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</div><div class="line">            resolvedType, <span class="keyword">null</span>, <span class="keyword">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class="line">            profilerInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, options, <span class="keyword">false</span>, userId, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要的变化是添加了用户的概念，同时加入了mStackSupervisor（ActivityStackSuperVisor）来管理ActivityStack。</p>
<h2 id="根Activity启动过程"><a href="#根Activity启动过程" class="headerlink" title="根Activity启动过程"></a>根Activity启动过程</h2><p>下面将用顺序图来展示根Activity是如何从桌面启动的。</p>
<h3 id="Step1-Launcher启动一个APP"><a href="#Step1-Launcher启动一个APP" class="headerlink" title="Step1. Launcher启动一个APP"></a>Step1. Launcher启动一个APP</h3><p><img src="http://img.blog.csdn.net/20160816201736649" alt="这里写图片描述"><br>当用户点击某一个应用图标，意味着需要启动一个应用的根Activity。Launcher也是一个应用，和普通应用启动Activity过程类似。这里展示了在Launcher中的进行的步骤，最后通过Binder与ActivityMangerService进行进程间通信，告知它来启动Activity。</p>
<h3 id="Step2-ActivityMangerService进行准备工作"><a href="#Step2-ActivityMangerService进行准备工作" class="headerlink" title="Step2. ActivityMangerService进行准备工作"></a>Step2. ActivityMangerService进行准备工作</h3><p><img src="http://img.blog.csdn.net/20160817161257468" alt="这里写图片描述"><br>这里主要工作就行将需要启动的Activity放置于栈顶，等待启动。在启动新Activity前，需要将旧的Activity先停止下来。</p>
<h3 id="Step3-旧Activity停止"><a href="#Step3-旧Activity停止" class="headerlink" title="Step3. 旧Activity停止"></a>Step3. 旧Activity停止</h3><p><img src="http://img.blog.csdn.net/20160816203017385" alt="这里写图片描述"><br>在这里，需要停止的Activity就是Launcher的Activity。在完成停止的过程后，需要告知ActivityMangerService。</p>
<h3 id="Step4-ActivityMangerService继续准备"><a href="#Step4-ActivityMangerService继续准备" class="headerlink" title="Step4. ActivityMangerService继续准备"></a>Step4. ActivityMangerService继续准备</h3><p><img src="http://img.blog.csdn.net/20160816203325622" alt="这里写图片描述"><br>这里会发现该Activity还没有进程可以运行，所以需要先启动一个新的ActvityThread进程。</p>
<h3 id="Step5-ActivityThread进程启动"><a href="#Step5-ActivityThread进程启动" class="headerlink" title="Step5. ActivityThread进程启动"></a>Step5. ActivityThread进程启动</h3><p><img src="http://img.blog.csdn.net/20160816203708629" alt="这里写图片描述"><br>等进程启动完毕后，同样需要ActivityMangerService，以便它将等待该进程的Activity启动起来。</p>
<h3 id="Step6-ActivityMangerService继续启动"><a href="#Step6-ActivityMangerService继续启动" class="headerlink" title="Step6. ActivityMangerService继续启动"></a>Step6. ActivityMangerService继续启动</h3><p><img src="http://img.blog.csdn.net/20160816205231942" alt="这里写图片描述"><br>这里会将等待该进程的Activity和Service启动起来。</p>
<h3 id="Step7-新Activity启动"><a href="#Step7-新Activity启动" class="headerlink" title="Step7. 新Activity启动"></a>Step7. 新Activity启动</h3><p><img src="http://img.blog.csdn.net/20160816205319833" alt="这里写图片描述"><br>到这里，启动过程结束</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该系列只记录阅读代码时遇到的问题和心得体会，具体代码讲解可以参考老罗的《Android系统源代码情景分析》，我就不班门弄斧了。我编译的AOSP版本：6.0.1_r50。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码摘抄&quot;&gt;&lt;a href=&quot;#代码摘抄&quot; class=&quot;headerlink&quot; title=&quot;代码摘抄&quot;&gt;&lt;/a&gt;代码摘抄&lt;/h2&gt;&lt;h3 id=&quot;两个版本的Launcher&quot;&gt;&lt;a href=&quot;#两个版本的Launcher&quot; class=&quot;headerlink&quot; title=&quot;两个版本的Launcher&quot;&gt;&lt;/a&gt;两个版本的Launcher&lt;/h3&gt;&lt;p&gt;目前版本已经从Launcher2（packages/apps/Launcher2/src/com/android/launcher2）进化为Launcher3（packages/apps/Launcher3/src/com/android/launcher3）。两个版本的Launcher有着一定的差异，老罗书中以Launcher2为出发点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android系统源码阅读(1):编译</title>
    <link href="http://itanch.github.io/2017/02/14/Android%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-1-%E7%BC%96%E8%AF%91/"/>
    <id>http://itanch.github.io/2017/02/14/Android系统源码阅读-1-编译/</id>
    <published>2017-02-14T05:31:31.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-编译过程"><a href="#1-编译过程" class="headerlink" title="1. 编译过程"></a>1. 编译过程</h2><p>参考<a href="https://source.android.com/source/building.html" target="_blank" rel="external">官方</a>，注意细节。 </p>
<p>编译版本<code>6.0.1_r50</code>。</p>
<h3 id="1-1-下载第三方二进制文件"><a href="#1-1-下载第三方二进制文件" class="headerlink" title="1.1 下载第三方二进制文件"></a>1.1 下载第三方二进制文件</h3><p>如果想要将编译好的img刷入物理设备，而不是虚拟机，一定要先下载好这些二进制文件，放在AOSP的根目录下。</p>
<p><a href="https://developers.google.com/android/nexus/drivers" target="_blank" rel="external">二进制文件下载</a>。下载完毕后并解压后，会有sh文件生成；运行sh文件，会在AOSP目录下生成<code>vendor/</code>文件夹，必要的文件会放在里面。然后再执行编译。</p>
<a id="more"></a>
<h3 id="1-2-编译"><a href="#1-2-编译" class="headerlink" title="1.2 编译"></a>1.2 编译</h3><p>先清理一下旧的生成文件，个人认为很有必要。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">make clobber</div><div class="line">``` </div><div class="line"></div><div class="line">然后设置环境变量:  </div><div class="line">```sh</div><div class="line">$ <span class="built_in">source</span> build/envsetup.sh</div><div class="line"><span class="comment"># 或者</span></div><div class="line">$ . build/envsetup.sh</div></pre></td></tr></table></figure></p>
<p>设置java 环境变量，这里根据你的AOSP选择java版本，设置适当的java路径:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>export JAVA_HOME=<span class="regexp">/usr/lib</span><span class="regexp">/jvm/java</span>-<span class="number">7</span>-openjdk-amd64</div><div class="line"><span class="variable">$ </span>export PATH=<span class="variable">$JAVA_HOME</span>/<span class="symbol">bin:</span><span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>设置缓存区域，根据自己情况设置：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export USE_CCACHE=<span class="number">1</span></div><div class="line">export CCACHE_DIR=<span class="regexp">/home/</span>tianchi<span class="regexp">/Project/</span>.ccache </div><div class="line">prebuilts<span class="regexp">/misc/</span>linux-x86<span class="regexp">/ccache/</span>ccache -M <span class="number">50</span>G</div></pre></td></tr></table></figure></p>
<p>选择需要编译的目标：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">launch</span></div><div class="line"><span class="comment">#选择你想要编译的版本</span></div></pre></td></tr></table></figure></p>
<p>开始编译，设置编译时用到的内核数目，这里写４：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>make -j4</div></pre></td></tr></table></figure></p>
<p>稍等几个小时，呵呵，奇迹就会发生。生成的结果位于<code>out/target/product/flo/</code>，<code>flo</code>是我Nexus 7的型号，和launch时选择的版本相同。</p>
<h2 id="2-刷入真机"><a href="#2-刷入真机" class="headerlink" title="2. 刷入真机"></a>2. 刷入真机</h2><p>将编译好的img文件刷入设备比较容易，关键点在于前面步骤：下载了第三方包，选择了正确的编译版本。</p>
<p>重启设备进入fastboot模式，使用命令，这里刷入的Nexus7：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fastboot -<span class="selector-tag">p</span> flo flashall</div></pre></td></tr></table></figure></p>
<h2 id="3-启动emulator问题"><a href="#3-启动emulator问题" class="headerlink" title="3. 启动emulator问题"></a>3. 启动emulator问题</h2><p>想要在虚拟机里跑起来，需要在<code>launch</code>步骤中选择正确的虚拟机版本，默认第一个。</p>
<p>相关工具emulator和kernel-qemu默认放置目录已经不在<code>out/host/linux-xxx/bin</code>，已经迁移到<code>prebuilts/android-emulator/linux-x86_64/emulator</code>和<code>/prebuilts/qemu-kernel/x86_64/kernel-qemu</code>等相对应的位置。  </p>
<p>常用的启动命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prebuilts/android-emulator/linux-x86_64/emulator -kernel ./prebuilts/qemu-k ernel/x86_64/kernel-qemu -sysdir out/target/product/generic/ -system system.img -data userdata.img -ramdisk ramdisk.img</div><div class="line">```  </div><div class="line">该命令启动会出现各种各样的问题，例如：</div></pre></td></tr></table></figure></p>
<p>qemu: could not load initrd ‘ramdisk.img’<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">虽然有人已经给出了相关解决方案，比如去掉`-ramdisk ramdisk.img`，或者修改`chmod -R <span class="number">777</span> out/target/product/generic/`来增加权限，或者修改`/prebuilts/qemu-k ernel/x86_64/kernel-qemu`为合适的系统版本。这些解决方法有的不太有效，总之不是很优美，其实官方已经提供了一个启动emulator的省心方法：   </div><div class="line">```sh</div><div class="line"># 首先加入基本的环境变量</div><div class="line">$ source build/envsetup.sh</div><div class="line"></div><div class="line"># 选择需要启动的版本，这里因为我编译的<span class="number">1</span>，所以一定要选择<span class="number">1</span>.</div><div class="line">$ lunch</div><div class="line"></div><div class="line">You're building on Linux</div><div class="line"></div><div class="line"><span class="symbol">Lunch menu... pick a combo:</span></div><div class="line">     <span class="number">1</span>. aosp_arm-eng</div><div class="line">     <span class="number">2</span>. aosp_arm64-eng</div><div class="line">     <span class="number">3</span>. aosp_mips-eng</div><div class="line">     <span class="number">4</span>. aosp_mips64-eng</div><div class="line">     <span class="number">5</span>. aosp_x86-eng</div><div class="line">     <span class="number">6</span>. aosp_x86_64-eng</div><div class="line">     <span class="number">7</span>. aosp_deb-userdebug</div><div class="line">     <span class="number">8</span>. aosp_flo-userdebug</div><div class="line">     <span class="number">9</span>. full_fugu-userdebug</div><div class="line">     <span class="number">10</span>. aosp_fugu-userdebug</div><div class="line">     <span class="number">11</span>. mini_emulator_arm64-userdebug</div><div class="line">     <span class="number">12</span>. m_e_arm-userdebug</div><div class="line">     <span class="number">13</span>. mini_emulator_mips-userdebug</div><div class="line">     <span class="number">14</span>. mini_emulator_x86_64-userdebug</div><div class="line">     <span class="number">15</span>. mini_emulator_x86-userdebug</div><div class="line">     <span class="number">16</span>. aosp_flounder-userdebug</div><div class="line">     <span class="number">17</span>. aosp_angler-userdebug</div><div class="line">     <span class="number">18</span>. aosp_bullhead-userdebug</div><div class="line">     <span class="number">19</span>. aosp_hammerhead-userdebug</div><div class="line">     <span class="number">20</span>. aosp_hammerhead_fp-userdebug</div><div class="line">     <span class="number">21</span>. aosp_shamu-userdebug</div><div class="line"> </div><div class="line"># 启动emulator</div><div class="line">$ emulator</div></pre></td></tr></table></figure></p>
<h2 id="4-在Android-Studio中阅读源码"><a href="#4-在Android-Studio中阅读源码" class="headerlink" title="4. 在Android Studio中阅读源码"></a>4. 在Android Studio中阅读源码</h2><p>Android工程师很地道，考虑到了如何方便的将项目导入AndroidStudio。在编译完成，环境变量配置好的前提下，进行下面步骤。</p>
<h3 id="4-1-生成idegen"><a href="#4-1-生成idegen" class="headerlink" title="4.1 生成idegen"></a>4.1 生成idegen</h3><p>编译idegen:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mmm development<span class="regexp">/tools/i</span>degen</div></pre></td></tr></table></figure></p>
<p>运行idegen:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ development<span class="regexp">/tools/i</span>degen<span class="regexp">/idegen.sh</span></div></pre></td></tr></table></figure></p>
<p>然后，你就回在AOSP目录下发现｀android.ipr｀等文件。</p>
<h3 id="4-2-导入"><a href="#4-2-导入" class="headerlink" title="4.2 导入"></a>4.2 导入</h3><p>打开AndroidStudio，选择导入已有的项目，选择android.ipr。这里需要导入一段时间。</p>
<p>导入后会发现错误百出。首先打开Project Structure，选择｀SDKs｀添加一个SDK，我这里需要1.7：<br><img src="http://img.blog.csdn.net/20160930163851944" alt="这里写图片描述"><br>清理ClassPath下的所有jar包，然后保存。</p>
<p>选择<code>Project</code>，选择Project SDK为新建的SDK，Project language level也设置为对应的等级。<br><img src="http://img.blog.csdn.net/20160930164516796" alt="这里写图片描述"></p>
<p>选择<code>Modules</code>，在<code>Dependencies</code>标签下，删除jar 依赖，最后如下：<br><img src="http://img.blog.csdn.net/20160930164739735" alt="这里写图片描述"></p>
<p>然后在<code>Modules</code>下，<code>Sources</code>标签下，选择<code>out/target/common/R</code>文件，选择右键Source。<br><img src="http://img.blog.csdn.net/20160930165042758" alt="这里写图片描述"><br>这里一般情况下，会因为R文件过大，导致依然报错。这时需要修改AndroidStudio应用目录下<code>Android_Studio/bin/idea.properties</code>文件，找到filesize，将参数修改大一些。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idea<span class="selector-class">.max</span><span class="selector-class">.intellisense</span><span class="selector-class">.filesize</span>=<span class="number">5000</span></div></pre></td></tr></table></figure></p>
<h2 id="Android-stack"><a href="#Android-stack" class="headerlink" title="Android stack"></a>Android stack</h2><p>这个图应该时时回顾一下。<br><img src="http://img.blog.csdn.net/20160805212247341" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-编译过程&quot;&gt;&lt;a href=&quot;#1-编译过程&quot; class=&quot;headerlink&quot; title=&quot;1. 编译过程&quot;&gt;&lt;/a&gt;1. 编译过程&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://source.android.com/source/building.html&quot;&gt;官方&lt;/a&gt;，注意细节。 &lt;/p&gt;
&lt;p&gt;编译版本&lt;code&gt;6.0.1_r50&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;1-1-下载第三方二进制文件&quot;&gt;&lt;a href=&quot;#1-1-下载第三方二进制文件&quot; class=&quot;headerlink&quot; title=&quot;1.1 下载第三方二进制文件&quot;&gt;&lt;/a&gt;1.1 下载第三方二进制文件&lt;/h3&gt;&lt;p&gt;如果想要将编译好的img刷入物理设备，而不是虚拟机，一定要先下载好这些二进制文件，放在AOSP的根目录下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/android/nexus/drivers&quot;&gt;二进制文件下载&lt;/a&gt;。下载完毕后并解压后，会有sh文件生成；运行sh文件，会在AOSP目录下生成&lt;code&gt;vendor/&lt;/code&gt;文件夹，必要的文件会放在里面。然后再执行编译。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Nexus7搞机教程</title>
    <link href="http://itanch.github.io/2017/02/14/Nexus7%E6%90%9E%E6%9C%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://itanch.github.io/2017/02/14/Nexus7搞机教程/</id>
    <published>2017-02-14T05:28:37.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><p>这里，我准备了Nexus 7（wifi第二版）作为测试机型，Android版本4.4.2。由于该机器是一个新机器，还没激活，需要在WLAN界面联网激活，否则无法进入系统。我已经尝试过使用代理IP，或者使用翻墙的其它手机作为热点，都以失败告终。所以，在这里我要介绍一种绕过Nexus 7激活的方法。</p>
<h2 id="刷入recovery"><a href="#刷入recovery" class="headerlink" title="刷入recovery"></a>刷入recovery</h2><p>该过程用于Nexus 7绕过激活和设备root，有个好使的recovery也很必要。</p>
<p>首先保证电脑已经安装<a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="external">ADB</a>环境，这里不再赘述安装过程。确保<code>fastboot</code>命令可以在终端执行即可。</p>
<p>我在这里推荐TWRP recovery，用起来很顺手。在 <a href="https://twrp.me/Devices/" target="_blank" rel="external">TeamWin - TWRP</a> 找到自己需要的recovery，我在这里选择<a href="https://twrp.me/devices/asusnexus72013wifi.html" target="_blank" rel="external">Asus Nexus 7 2013 Wi-Fi (flo)</a>，这个一定要和自己移动设备匹配。</p>
<p>下载好<code>twrp-xxxx.img</code>文件，关机后，按Power+Volumn down来重启手机，进入fastboot模式。这时，保证设备和电脑通过USB连接，同时使用命令，可以在终端显示设备名称：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ adb devices</div></pre></td></tr></table></figure></p>
<p>如果手机初始状态为加锁状态，所以首先要解锁：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>fastboot oem unlock</div></pre></td></tr></table></figure></p>
<p>解锁成功后，然后刷入recovery：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fastboot flash recovery twrp.img</div></pre></td></tr></table></figure></p>
<p>刷入recovery，成功会显示一些Okey字样。成功刷入以后，关闭设备，使用Power+Volumn up进入recovery模式，等待一小会，如果长时间停留在twrp初始界面，可以点击音量上或下键来观察是否已经进入。如果recovery无法进入，有可能是刷入的recovery和设备版本不一致。</p>
<p>Recovery不仅仅用于Nexus 7绕过激活，一会root手机时，也需要用到。</p>
<h2 id="激活Nexus-7"><a href="#激活Nexus-7" class="headerlink" title="激活Nexus 7"></a>激活Nexus 7</h2><p>Twrp recovery提供了很人性化的界面，可以使用点击操作。你需要首先利用recovery的挂在功能(mount)，将/system分区挂在上，然后在计算机终端进入设备系统文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ adb shell</div><div class="line">$ cd /system</div></pre></td></tr></table></figure></p>
<p>这时可以看到文件<code>build.prop</code>，可以种<code>cat</code>或者<code>vi</code>来看里面内容，其中重要语句<code>ro.setupwizard.network_required=true</code>，这个就是要求网络验证的配置。这里，无论你用何种方法，把<code>true</code>改为<code>false</code>，保存即可。</p>
<p>重启手机，如果卡在等待界面，则按音量键，看时候可以进入（其实我也不知其中原委，只是这样试了一下，尽量耐心等待一段时间）。进入后会发现进入了正常的初始化步骤，到达WLAN连接激活时，发现下面神奇的多了一个按钮“跳过”！过程中可能会出现一些网络错误什么的，不必关心，只要一步步初始化，就可以最终进入系统。</p>
<h2 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h2><p>手机已经root请跳过此步骤。</p>
<p>可以使用国内的root大师、精灵之流的root软件进行root，但是并不推荐，因为它们会附加安装一些应用。这里我推荐使用<a href="http://forum.xda-developers.com/showthread.php?t=1538053" target="_blank" rel="external">SuperSU</a>结合recovery进行root。</p>
<p>首先下载SuperSU <a href="http://download.chainfire.eu/supersu-stable" target="_blank" rel="external">zip</a>文件，下载完毕后，将其传入手机某个位置，然后重启进入recovery模式。</p>
<p>在recovery选择install 这个zip文件即可。重启后可以发现应用SuperSU，可以利用它管理手机权限。</p>
<h2 id="刷入Android其它版本"><a href="#刷入Android其它版本" class="headerlink" title="刷入Android其它版本"></a>刷入Android其它版本</h2><p>Android官方提供了很方便的image资源，其中 <a href="https://developers.google.com/android/nexus/images#nakasi" target="_blank" rel="external">Nexus factory image</a>列出了可用的所有Nexus镜像，寻找到适合的镜像进行下载，建议验证一下MD5校验码。下载完毕后，可以按照官网上的教程刷入系统，过程比较简单。</p>
<p>我在这里刷入了Android 4.3 (JSS15Q)版本，降低了Nexus系统的版本。刷机完毕后，可以重复上面步骤，刷入需要的的工具。需要注意的是在绕过激活时，4.3版本和4.4版本略有不同。在4.3版本中，前面步骤相同，最后修改<code>build.prop</code>时，只要加入<code>ro.setupwizard.mode=DISABLED</code>该配置即可绕过激活。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统准备&quot;&gt;&lt;a href=&quot;#系统准备&quot; class=&quot;headerlink&quot; title=&quot;系统准备&quot;&gt;&lt;/a&gt;系统准备&lt;/h2&gt;&lt;p&gt;这里，我准备了Nexus 7（wifi第二版）作为测试机型，Android版本4.4.2。由于该机器是一个新机器，还没激活，
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://itanch.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu PPTPD 配置</title>
    <link href="http://itanch.github.io/2017/02/14/UbuntuPPTPD%E9%85%8D%E7%BD%AE/"/>
    <id>http://itanch.github.io/2017/02/14/UbuntuPPTPD配置/</id>
    <published>2017-02-14T05:12:48.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Server配置"><a href="#Server配置" class="headerlink" title="Server配置"></a>Server配置</h2><h3 id="安装pptpd"><a href="#安装pptpd" class="headerlink" title="安装pptpd"></a>安装pptpd</h3><p>首先需要安装pptpd，ubuntu 默认安装该工具。 </p>
<a id="more"></a>
<h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>编辑 <code>/etc/pptpd.conf</code>，取消以下两行注释。当然也可以自己设定ip地址范围，这里使用默认的就可以。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localip <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></div><div class="line">remoteip <span class="number">192.168</span><span class="number">.0</span><span class="number">.234</span><span class="number">-238</span>,<span class="number">192.168</span><span class="number">.0</span><span class="number">.245</span></div></pre></td></tr></table></figure></p>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>编辑<code>/etc/ppp/chap-secrets</code>文件，用户名添加如下：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> # Secrets for authentication using CHAP</div><div class="line"> # client    server  secret          IP addresses</div><div class="line">   [client name]  *   <span class="string">"[password]"</span> *</div><div class="line">```  </div><div class="line">其中client的名字和密码自己设定即可，其它两项默认<span class="string">"*"</span>就可以。</div><div class="line"></div><div class="line">### 设置DNS</div><div class="line">编辑`/etc/ppp/pptpd-options`，找到`ms-dns`部分，取消注释：</div></pre></td></tr></table></figure></p>
<p> ms-dns 223.5.5.5<br> ms-dns 223.6.6.6<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">默认的是google的DNS服务，`<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>`。因为国内使用不便，这里我修改成阿里的DNS服务。</div><div class="line"></div><div class="line">### 开启IP转发</div><div class="line">编辑`/etc/sysctl.conf`文件，取消注释：</div></pre></td></tr></table></figure></p>
<p>net.ipv4.ip_forward=1<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">运行命令，使配置生效：</div></pre></td></tr></table></figure></p>
<p>sysctl -p<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### iptables安装</div><div class="line">安装iptables:</div></pre></td></tr></table></figure></p>
<p>apt-get install iptables<br>iptables -t nat -I POSTROUTING -j MASQUERADE #每次运行前需要运行该命令<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 重启pptpd</div></pre></td></tr></table></figure></p>
<p>/etc/init.d/pptpd restart<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##Client配置</div><div class="line">在你需要使用代理的ubuntu设备上执行以下操作。当然，也可以用其它客户端。</div><div class="line"></div><div class="line">### 安装pptp</div><div class="line">一般系统已经默认安装。</div></pre></td></tr></table></figure></p>
<p>sudo apt-get install pptp-linux<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 创建一个连接</div></pre></td></tr></table></figure></p>
<p>sudo pptpsetup –create [server name] –server [server ip] –username [client name] –password [password] –encrypt –start<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">执行完上述命令后，会在`/etc/ppp/chap-secrets`自动生成相应的用户：</div></pre></td></tr></table></figure></p>
<h1 id="added-by-pptpsetup-for-pptpd"><a href="#added-by-pptpsetup-for-pptpd" class="headerlink" title="added by pptpsetup for pptpd"></a>added by pptpsetup for pptpd</h1><p>[client name] [server name] “password” *<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在`/etc/ppp/peers/pptpd`中也会有生成的相应信息，这里需要注意一点，默认的是不用server 的DNS配置的，所以会出现<span class="built_in">ping</span> ip地址可以成功，<span class="built_in">ping</span>网址却失败的DNS解析错误，所以要加上如下一行:</div></pre></td></tr></table></figure></p>
<p>usepeerdns<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在上述命令成功后，`ifconfig`命令下回出现ppp0端口。</div><div class="line"></div><div class="line">### 路由设置</div><div class="line">将ppp0设置为默认路由端口：</div></pre></td></tr></table></figure></p>
<p>ip route del default<br>ip route add default dev ppp0<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">这样配置基本算成功了。</div><div class="line"></div><div class="line">### 服务开关</div><div class="line">我自己写了如下命令方便开关和路由设置：</div><div class="line"></div><div class="line">打开服务(需要sudo):</div></pre></td></tr></table></figure></p>
<p>#!/bin/bash<br>pon [server name]<br>sleep 4<br>ip route del default<br>ip route add default dev ppp0<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">关闭服务<span class="comment">(sudo)</span>:</div></pre></td></tr></table></figure></p>
<p>#!/bin/bash<br>poff pptpd<br>sleep 4<br>ip route del default<br>ip route add default via [your old route ip] dev eno1<br>```<br>这里需要记住原来设备的路由ip，以便删除后再回复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Server配置&quot;&gt;&lt;a href=&quot;#Server配置&quot; class=&quot;headerlink&quot; title=&quot;Server配置&quot;&gt;&lt;/a&gt;Server配置&lt;/h2&gt;&lt;h3 id=&quot;安装pptpd&quot;&gt;&lt;a href=&quot;#安装pptpd&quot; class=&quot;headerlink&quot; title=&quot;安装pptpd&quot;&gt;&lt;/a&gt;安装pptpd&lt;/h3&gt;&lt;p&gt;首先需要安装pptpd，ubuntu 默认安装该工具。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ubuntu" scheme="http://itanch.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d-x 安装</title>
    <link href="http://itanch.github.io/2017/02/14/cocos2d-x%E5%AE%89%E8%A3%85/"/>
    <id>http://itanch.github.io/2017/02/14/cocos2d-x安装/</id>
    <published>2017-02-14T05:02:41.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>hello cocos2d </p>
</blockquote>
<hr>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>安装环境：Mac OS X<br>运行目标：Android<br>Cocos2d版本：cocos2d-x-3.13.1，Cocos Console 2.1</p>
<a id="more"></a>
<h2 id="Cocos2d-x-安装"><a href="#Cocos2d-x-安装" class="headerlink" title="Cocos2d-x 安装"></a>Cocos2d-x 安装</h2><h3 id="1-基本工具"><a href="#1-基本工具" class="headerlink" title="1. 基本工具"></a>1. 基本工具</h3><p>安装Cocos2d-x，最基础的是安装命令行工具。在安装Cocos之前，需要一些其它基本工具：</p>
<ul>
<li>JAVA SDK</li>
<li>Android SDK</li>
<li>Android NDK</li>
<li>Apache Ant</li>
<li>Python 2.7.5</li>
</ul>
<p>这些基本工具最好已经配置在环境变量中。</p>
<h3 id="2-Cocos2d-x"><a href="#2-Cocos2d-x" class="headerlink" title="2. Cocos2d-x"></a>2. Cocos2d-x</h3><p>下载最新的<a href="http://www.cocos2d-x.org/download" target="_blank" rel="external">Cocos2d-x</a>，然后解压。找到<code>setup.py</code>，然后运行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py</div></pre></td></tr></table></figure>
<p>然后它会提醒你补足一些环境变量的绝对地址，最后在你原有的Home目录下的<code>.bash_profile</code>基础上增加一些环境变量，很贴心。</p>
<p>在我的mac上，补足的环境变量如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add environment variable COCOS_CONSOLE_ROOT for cocos2d-x</span></div><div class="line"><span class="built_in">export</span> COCOS_CONSOLE_ROOT=/Users/Tianchi/Tool/cocos2d-x-3.13.1/tools/cocos2d-console/bin</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$COCOS_CONSOLE_ROOT</span>:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment"># Add environment variable COCOS_X_ROOT for cocos2d-x</span></div><div class="line"><span class="built_in">export</span> COCOS_X_ROOT=/Users/Tianchi/Tool</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$COCOS_X_ROOT</span>:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment"># Add environment variable COCOS_TEMPLATES_ROOT for cocos2d-x</span></div><div class="line"><span class="built_in">export</span> COCOS_TEMPLATES_ROOT=/Users/Tianchi/Tool/cocos2d-x-3.13.1/templates</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$COCOS_TEMPLATES_ROOT</span>:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment"># Add environment variable NDK_ROOT for cocos2d-x</span></div><div class="line"><span class="built_in">export</span> NDK_ROOT=/Users/Tianchi/Tool/ndk</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$NDK_ROOT</span>:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment"># Add environment variable ANDROID_SDK_ROOT for cocos2d-x</span></div><div class="line"><span class="built_in">export</span> ANDROID_SDK_ROOT=/Users/Tianchi/Tool/sdk</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_SDK_ROOT</span>:<span class="variable">$PATH</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_SDK_ROOT</span>/tools:<span class="variable">$ANDROID_SDK_ROOT</span>/platform-tools:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment"># Add environment variable ANT_ROOT for cocos2d-x</span></div><div class="line"><span class="built_in">export</span> ANT_ROOT=/usr/<span class="built_in">local</span>/apache-ant-1.9.4/bin</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANT_ROOT</span>:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>是否安装成功：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cocos -v</div><div class="line">cocos2d-x<span class="number">-3.13</span><span class="number">.1</span></div><div class="line">Cocos Console <span class="number">2.1</span></div></pre></td></tr></table></figure></p>
<h3 id="3-New-Project"><a href="#3-New-Project" class="headerlink" title="3. New Project"></a>3. New Project</h3><p>创建一个项目：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos new &lt;game name&gt; -p &lt;package identifier&gt; <span class="_">-l</span> &lt;language&gt; <span class="_">-d</span> &lt;location&gt;</div></pre></td></tr></table></figure>
<p>样例：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cocos new MyGame -p com.MyCompany.MyGame <span class="_">-l</span> cpp <span class="_">-d</span> ~/MyCompany</div><div class="line"></div><div class="line">cocos new MyGame -p com.MyCompany.MyGame <span class="_">-l</span> lua <span class="_">-d</span> ~/MyCompany</div><div class="line"></div><div class="line">cocos new MyGame -p com.MyCompany.MyGame <span class="_">-l</span> js <span class="_">-d</span> ~/MyCompany</div></pre></td></tr></table></figure></p>
<p>编译项目：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos compile <span class="_">-s</span> &lt;path to your project&gt; -p &lt;platform&gt; -m &lt;mode&gt; -o &lt;output directory&gt;</div></pre></td></tr></table></figure>
<p>样例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cocos compile <span class="_">-s</span> ~/MyCompany/MyGame -p ios -m release -o ~/MyCompany/MyGame/bin</div><div class="line"></div><div class="line">cocos compile <span class="_">-s</span> ~/MyCompany/MyGame -p android -m release -o ~/MyCompany/MyGame/bin</div><div class="line"></div><div class="line">cocos compile <span class="_">-s</span> c:\MyCompany\MyGame -p win32 -m release -o c:\MyCompany\MyGame\bin</div></pre></td></tr></table></figure>
<p>编译Android应用，需要指定目标版本<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos compile -p android --ap android-22</div></pre></td></tr></table></figure></p>
<p>编译成功后，就会在项目目录下的<code>proj.android/bin</code>下发现apk文件，可以进行安装。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;hello cocos2d &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;安装环境：Mac OS X&lt;br&gt;运行目标：Android&lt;br&gt;Cocos2d版本：cocos2d-x-3.13.1，Cocos Console 2.1&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Cocos2d-x" scheme="http://itanch.github.io/tags/Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS--SB Admin</title>
    <link href="http://itanch.github.io/2016/01/15/AngularJS%E5%AD%A6%E4%B9%A0/"/>
    <id>http://itanch.github.io/2016/01/15/AngularJS学习/</id>
    <published>2016-01-15T02:56:03.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>从SB Admin开始学习AngularJS!</p>
<p><a href="https://github.com/start-angular/sb-admin-angular" target="_blank" rel="external">SB Admin v2.0 rewritten in AngularJS</a>是一个SB Admin的AngularJS的实现，源代码、安装和运行可以参考以上链接。</p>
<h2 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h2><p><a href="https://nodejs.org" target="_blank" rel="external">Nodejs</a>升级：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo npm cache clean <span class="_">-f</span></div><div class="line">$ sudo npm install -g n</div><div class="line">$ sudo n stable</div><div class="line">$ sudo ln -sf /usr/<span class="built_in">local</span>/n/versions/node/&lt;VERSION&gt;/bin/node /usr/bin/node</div></pre></td></tr></table></figure></p>
<p>npm升级：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --global npm@latest</div></pre></td></tr></table></figure>  </p>
<p><a href="http://bower.io/" target="_blank" rel="external">Bower</a>是一个对web开发进行包管理的工具。  </p>
<p><a href="http://www.gruntjs.net/" target="_blank" rel="external">GRUNT</a>的目的就是自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你或你的小组完成大部分无聊的工作。  </p>
<p><a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a>生成web应用的基本架构。<br><a id="more"></a></p>
<h2 id="Yeoman入门"><a href="#Yeoman入门" class="headerlink" title="Yeoman入门"></a>Yeoman入门</h2><p><img src="http://7xky03.com1.z0.glb.clouddn.com/yeoman.png" alt="yeoman">  </p>
<h3 id="1-安装Bower、GRUNT和Yeoman："><a href="#1-安装Bower、GRUNT和Yeoman：" class="headerlink" title="1. 安装Bower、GRUNT和Yeoman："></a>1. 安装Bower、GRUNT和Yeoman：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --global yo bower grunt-cli</div></pre></td></tr></table></figure>
<h3 id="2-安装generator"><a href="#2-安装generator" class="headerlink" title="2. 安装generator"></a>2. 安装generator</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --global generator-karma generator-angular</div></pre></td></tr></table></figure>  
<h3 id="3-运行generator"><a href="#3-运行generator" class="headerlink" title="3. 运行generator"></a>3. 运行generator</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yo angular</div></pre></td></tr></table></figure>
<h3 id="4-Yeoman总结"><a href="#4-Yeoman总结" class="headerlink" title="4. Yeoman总结"></a>4. Yeoman总结</h3><p>Yeoman确实是一个很强大的web应用架构工具，他可以帮你完成大部分繁琐的工作，从而你可以更专心的实现你的功能。</p>
<h2 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h2><h3 id="1-index-html"><a href="#1-index-html" class="headerlink" title="1. index.html"></a>1. index.html</h3><p>位于app/目录下的index.html是整个网页的主要入口。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"sbAdminApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="2-app-js"><a href="#2-app-js" class="headerlink" title="2. app.js"></a>2. app.js</h3><p>位于app/scripts/目录下，应用的主要module。  </p>
<p><strong>module</strong><br>首先，我们可以看到sbAdminApp使用了如下module：  </p>
<ul>
<li><strong>oc.lazyLoad</strong>：自动的加载一些module。</li>
<li><strong>ui.router</strong>：AngularUI Router是一个路由框架，可以利用它将应用接口组织成为一个有穷状态机，不同于Angular自带的<code>$route</code>（根据URL进行路由），UI-Router则是根据状态进行路由。  </li>
<li><strong>ui.bootstrap</strong>：用AngularJS开发的Bootstrap组件。  </li>
</ul>
<p><strong>config</strong><br><strong>stateProvider</strong>：由<em>ui.router</em>提供，功能类似于Angular v1的router，但是它只专注于state。state就是应用中的某一个状态，到达某一个状态时，会将template插入到相应位置。该部分的主要工作是将state、html和controller对应起来。</p>
<p><code>resolve</code>可以提供给controller一些定制的内容，采用<code>key:value</code>的格式。在这里，使用ocLazyLoad加载了一些模块。</p>
<p>首先加载的是<code>sbAdminApp</code>模块中的header部分，然后依次为header-notification、sidebar和sidebar-search。这些部分在加载的过程中，采用了<code>module.directive</code>函数，这个函数可以对指定的元素附加一些行为，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'sbAdminApp'</span>)</div><div class="line">.directive(<span class="string">'header'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">templateUrl</span>:<span class="string">'scripts/directives/header/header.html'</span>,</div><div class="line">			<span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">			<span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">		&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br>这里就是在<code>main.html</code>的<code>&lt;header&gt;&lt;/header&gt;</code>元素替换为<code>header.html</code>的内容。  </p>
<p>从源代码中不难发现，header、header-notification、sidebar和sidebar-search文件的加载是按照一定的顺序的，因为前后顺序在View中表现为嵌套的父子关系。</p>
<p>然后，加载了<code>toggle-switch</code>，一个开关模块；<code>ngAnimate</code>，动画效果；<code>ngCookies</code>，读写浏览器cookies；<code>ngResource</code>，加载资源对象；<code>ngSanitize</code>，可以对HTML进行清洁；<code>ngTouch</code>，对可触摸设备提供服务。</p>
<p>其它state类似。</p>
<p><strong>ocLazyLoadProvider</strong>：来自于<em>oc.lazyLoad</em>，<code>events:true</code>可以使得加载module时可以发送广播。  </p>
<p> <strong>urlRouterProvider</strong>：由<em>ui.router</em>提供，在这里只是用它来处理其它状态下的情况，统一重定向至<code>/dashboard/home</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从SB Admin开始学习AngularJS!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/start-angular/sb-admin-angular&quot;&gt;SB Admin v2.0 rewritten in AngularJS&lt;/a&gt;是一个SB Admin的AngularJS的实现，源代码、安装和运行可以参考以上链接。&lt;/p&gt;
&lt;h2 id=&quot;一些工具&quot;&gt;&lt;a href=&quot;#一些工具&quot; class=&quot;headerlink&quot; title=&quot;一些工具&quot;&gt;&lt;/a&gt;一些工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;Nodejs&lt;/a&gt;升级：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo npm cache clean &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo npm install -g n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo n stable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo ln -sf /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/n/versions/node/&amp;lt;VERSION&amp;gt;/bin/node /usr/bin/node&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;npm升级：&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo npm install --global npm@latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;是一个对web开发进行包管理的工具。  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gruntjs.net/&quot;&gt;GRUNT&lt;/a&gt;的目的就是自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你或你的小组完成大部分无聊的工作。  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt;生成web应用的基本架构。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="AngularJS" scheme="http://itanch.github.io/tags/AngularJS/"/>
    
      <category term="Yeoman" scheme="http://itanch.github.io/tags/Yeoman/"/>
    
      <category term="JavaScript" scheme="http://itanch.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>MESOS and MARATHON安装</title>
    <link href="http://itanch.github.io/2015/11/16/MESOS%E5%AE%89%E8%A3%85/"/>
    <id>http://itanch.github.io/2015/11/16/MESOS安装/</id>
    <published>2015-11-16T01:40:40.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h3><p>系统环境：ubuntu14.04<br>mesos: 0.25.0  </p>
<h3 id="从源代码安装"><a href="#从源代码安装" class="headerlink" title="从源代码安装"></a>从源代码安装</h3><p>根据官网<a href="http://mesos.apache.org/documentation/latest/getting-started/" target="_blank" rel="external">Getting Started</a>介绍，尝试从源代码编译安装，但未成功。在<code>make check</code>命令执行时出现一个错误，经过分析终于发现原因在于测试中会通过字符串比较验证结果，由于我的系统是中文系统，测试中预想的结果是英文的，所以就导致错误。最后，需要能够访问code.google.com才能进行<code>make install</code>。  </p>
<p>从源代码安装时会安装一些依赖库，同时会安装openjdk。<br><a id="more"></a></p>
<h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h3><p>根据<a href="https://open.mesosphere.com/getting-started/install/" target="_blank" rel="external">mesosphere</a>介绍，可以安装以下步骤进行安装：</p>
<ol>
<li><p>添加库  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF</div><div class="line">$ DISTRO=$(lsb_release -is | tr <span class="string">'[:upper:]'</span> <span class="string">'[:lower:]'</span>)</div><div class="line">$ CODENAME=$(lsb_release -cs)</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"deb http://repos.mesosphere.com/<span class="variable">$&#123;DISTRO&#125;</span> <span class="variable">$&#123;CODENAME&#125;</span> main"</span> | \</div><div class="line">  sudo tee /etc/apt/sources.list.d/mesosphere.list</div><div class="line">$ sudo apt-get -y update</div></pre></td></tr></table></figure>
</li>
<li><p>安装  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get -y install mesos</div></pre></td></tr></table></figure>
</li>
<li><p>启动master  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mesos-master --ip=127.0.0.1 --work_dir=/var/lib/mesos</div></pre></td></tr></table></figure>
</li>
<li><p>启动slave  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mesos-slave --master=127.0.0.1:5050</div></pre></td></tr></table></figure>
</li>
<li><p>从浏览器观察结果<code>http://127.0.0.1:5050</code>。</p>
</li>
</ol>
<h3 id="MARATHON安装"><a href="#MARATHON安装" class="headerlink" title="MARATHON安装"></a>MARATHON安装</h3><p>MARATHON依赖于Java 8。参考(mesosphere)[<a href="https://mesosphere.com/downloads/]的内容，安装过程如下：" target="_blank" rel="external">https://mesosphere.com/downloads/]的内容，安装过程如下：</a>  </p>
<ol>
<li><p>添加必要的库  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update -y</div><div class="line">$ sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python-software-properties software-properties-common</div><div class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF</div><div class="line">$ DISTRO=$(lsb_release -is | tr <span class="string">'[:upper:]'</span> <span class="string">'[:lower:]'</span>)</div><div class="line">$ CODENAME=$(lsb_release -cs)</div><div class="line">$ sudo <span class="built_in">echo</span> <span class="string">"deb http://repos.mesosphere.io/<span class="variable">$&#123;DISTRO&#125;</span> <span class="variable">$&#123;CODENAME&#125;</span> main"</span> | tee /etc/apt/sources.list.d/mesosphere.list</div></pre></td></tr></table></figure>
</li>
<li><p>安装Java 8  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository ppa:webupd8team/java</div><div class="line">$ sudo apt-get update -y</div><div class="line">$ sudo apt-get install -y oracle-java8-installer oracle-java8-set-default</div><div class="line">$ sudo apt-get -y install marathon</div></pre></td></tr></table></figure>
</li>
<li><p>运行MARATHON</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ marathon --master zk://127.0.0.1:2181,127.0.0.1:2181/mesos --zk zk://127.0.0.1:2181,127.0.0.1:2181/marathon</div></pre></td></tr></table></figure>
</li>
<li><p>从浏览器观察结果<code>http://127.0.0.1:8080</code></p>
</li>
</ol>
<h3 id="MESOS的一些命令"><a href="#MESOS的一些命令" class="headerlink" title="MESOS的一些命令"></a>MESOS的一些命令</h3><p>To (start | stop | restart) mesos-master:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mesos-master (start | stop | restart)</div></pre></td></tr></table></figure>  </p>
<p>To (start | stop | restart) mesos-slave:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mesos-slave (start | stop | restart)</div></pre></td></tr></table></figure></p>
<p>If you want to disable these service from launching automatically on a reboot:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> manual &gt; /etc/init/mesos-master.override</div><div class="line"><span class="built_in">echo</span> manual &gt; /etc/init/mesos-slave.override</div><div class="line"><span class="built_in">echo</span> manual &gt; /etc/init/zookeeper.override</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本环境&quot;&gt;&lt;a href=&quot;#基本环境&quot; class=&quot;headerlink&quot; title=&quot;基本环境&quot;&gt;&lt;/a&gt;基本环境&lt;/h3&gt;&lt;p&gt;系统环境：ubuntu14.04&lt;br&gt;mesos: 0.25.0  &lt;/p&gt;
&lt;h3 id=&quot;从源代码安装&quot;&gt;&lt;a href=&quot;#从源代码安装&quot; class=&quot;headerlink&quot; title=&quot;从源代码安装&quot;&gt;&lt;/a&gt;从源代码安装&lt;/h3&gt;&lt;p&gt;根据官网&lt;a href=&quot;http://mesos.apache.org/documentation/latest/getting-started/&quot;&gt;Getting Started&lt;/a&gt;介绍，尝试从源代码编译安装，但未成功。在&lt;code&gt;make check&lt;/code&gt;命令执行时出现一个错误，经过分析终于发现原因在于测试中会通过字符串比较验证结果，由于我的系统是中文系统，测试中预想的结果是英文的，所以就导致错误。最后，需要能够访问code.google.com才能进行&lt;code&gt;make install&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;从源代码安装时会安装一些依赖库，同时会安装openjdk。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="MESOS" scheme="http://itanch.github.io/tags/MESOS/"/>
    
      <category term="ubuntu" scheme="http://itanch.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>MooseFS安装</title>
    <link href="http://itanch.github.io/2015/09/22/MooseFS%E5%AE%89%E8%A3%85/"/>
    <id>http://itanch.github.io/2015/09/22/MooseFS安装/</id>
    <published>2015-09-22T08:21:51.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>MooseFS is a Fault tolerant, Highly available, Highly performing, Scaling-out, Network distributed file system. It spreads data over several physical commodity servers, which are visible to the user as one resource. For standard file operations MooseFS acts like any other Unix-like file system:<br>        1.A hierarchical structure (directory tree)<br>    2.Stores POSIX file attributes (permissions, last access and modification times)<br>    3.Supports special files (block and character devices, pipes and sockets)<br>    4.Symbolic links (file names pointing to target files, not necessarily on MooseFS) and hard links (different names of files which refer to the same data on MooseFS)<br>    5.Access to the file system can be limited based on IP address and/or password</p>
</blockquote>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>实验环境：两个Ubuntu14.04计算机。<br>MooseFS版本：2.0.76。  </p>
<p>MooseFS<a href="http://www.moosefs.org/" target="_blank" rel="external">官网1</a>，<a href="http://moosefs.com/index.html" target="_blank" rel="external">官网2</a>。据观察，官网2内容较新。</p>
<p><a href="http://moosefs.com/download/ubuntudebian.html" target="_blank" rel="external">参考1</a>，<a href="http://moosefs.com/Content/Downloads/MooseFS-2-0-60-User-Manual.pdf" target="_blank" rel="external">参考2</a>。<br><a id="more"></a></p>
<h3 id="安装master-在选定的master节点上操作"><a href="#安装master-在选定的master节点上操作" class="headerlink" title="安装master(在选定的master节点上操作)"></a>安装master(在选定的master节点上操作)</h3><p>添加key:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -O - http://ppa.moosefs.com/moosefs.key | sudo apt-key add -</div></pre></td></tr></table></figure>  </p>
<p>在文件<code>/etc/apt/sources.list.d/moosefs.list</code>中添加如下软件源：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deb http://ppa.moosefs.com/stable/apt/ubuntu/trusty trusty main</div></pre></td></tr></table></figure></p>
<p>更新软件源，安装master：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install moosefs-master</div></pre></td></tr></table></figure></p>
<p>拷贝<code>/etc/mfs</code>下的如下文件，可以按需修改其中的参数，也可以使用默认值：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp mfsmaster.cfg.dist mfsmaster.cfg</div><div class="line">$ cp mfsexports.cfg.dist mfsexports.cfg</div></pre></td></tr></table></figure></p>
<p>启动：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mfsmaster start</div></pre></td></tr></table></figure><br>可以修改<code>/etc/default/moosefs-ce-master</code>中的<code>MFSMASTER_ENABLE</code>为<code>true</code>，使得该服务开机启动。</p>
<h3 id="安装其它工具"><a href="#安装其它工具" class="headerlink" title="安装其它工具"></a>安装其它工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install moosefs-cgi</div><div class="line">$ sudo apt-get install moosefs-cgiserv</div><div class="line">$ sudo apt-get install moosefs-cli</div></pre></td></tr></table></figure>  
<p>启动mfscgiserv，可以在浏览器观察mfs运行情况。如果本机为master，可以访问<a href="http://127.0.0.1:9425" target="_blank" rel="external">http://127.0.0.1:9425</a>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mfscgiserv start</div></pre></td></tr></table></figure></p>
<h3 id="安装chunkserver-在选定的chunk节点上操作"><a href="#安装chunkserver-在选定的chunk节点上操作" class="headerlink" title="安装chunkserver(在选定的chunk节点上操作)"></a>安装chunkserver(在选定的chunk节点上操作)</h3><p>首先像安装master一样添加软件源，然后安装：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install moosefs-chunkserver</div></pre></td></tr></table></figure>  </p>
<p>同样，修改<code>/etc/mfs</code>文件下的如下文件：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo cp mfschunkserver.cfg.dist mfschunkserver.cfg</div><div class="line">$ sudo cp mfshdd.cfg.dist mfshdd.cfg</div></pre></td></tr></table></figure><br>其中，<code>mfschunkserver.cfg</code>文件的参数<code>MASTER_HOST = mfsmaster</code>可以指定master的hostname，这里需要在<code>/etc/hosts</code>中写明，并且如果master也作为chunkserver时，hosts中mfsmaster的ip不能使用127.0.0.1。</p>
<p>建立文件,文件名字可以写自己喜欢的，这里取名mfschunk：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /mnt/mfschunk</div><div class="line">$ chown -R mfs:mfs /mnt/mfschunk</div></pre></td></tr></table></figure></p>
<p>在<code>mfshdd.cfg</code>文件中添加一行<code>/mnt/mfschunk</code>。启动mfschunkserver:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mfschunkserver start</div></pre></td></tr></table></figure></p>
<h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><p>安装客户端，添加挂载点，进行挂载。mfsmaster在这里为master的hostname。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install moosefs-client</div><div class="line">$ sudo mkdir -p /mnt/mfs</div><div class="line">$ sudo mfsmount mfs -H mfsmaster</div></pre></td></tr></table></figure></p>
<p>查看：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ df -h</div><div class="line">mfsmaster:9421  1.3T   70G  1.2T    6% /mnt/mfs</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MooseFS is a Fault tolerant, Highly available, Highly performing, Scaling-out, Network distributed file system. It spreads data over several physical commodity servers, which are visible to the user as one resource. For standard file operations MooseFS acts like any other Unix-like file system:&lt;br&gt;        1.A hierarchical structure (directory tree)&lt;br&gt;    2.Stores POSIX file attributes (permissions, last access and modification times)&lt;br&gt;    3.Supports special files (block and character devices, pipes and sockets)&lt;br&gt;    4.Symbolic links (file names pointing to target files, not necessarily on MooseFS) and hard links (different names of files which refer to the same data on MooseFS)&lt;br&gt;    5.Access to the file system can be limited based on IP address and/or password&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h3&gt;&lt;p&gt;实验环境：两个Ubuntu14.04计算机。&lt;br&gt;MooseFS版本：2.0.76。  &lt;/p&gt;
&lt;p&gt;MooseFS&lt;a href=&quot;http://www.moosefs.org/&quot;&gt;官网1&lt;/a&gt;，&lt;a href=&quot;http://moosefs.com/index.html&quot;&gt;官网2&lt;/a&gt;。据观察，官网2内容较新。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moosefs.com/download/ubuntudebian.html&quot;&gt;参考1&lt;/a&gt;，&lt;a href=&quot;http://moosefs.com/Content/Downloads/MooseFS-2-0-60-User-Manual.pdf&quot;&gt;参考2&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ubuntu" scheme="http://itanch.github.io/tags/ubuntu/"/>
    
      <category term="MooseFS" scheme="http://itanch.github.io/tags/MooseFS/"/>
    
  </entry>
  
  <entry>
    <title>slurm安装</title>
    <link href="http://itanch.github.io/2015/09/10/slurm%E5%AE%89%E8%A3%85/"/>
    <id>http://itanch.github.io/2015/09/10/slurm安装/</id>
    <published>2015-09-10T09:17:44.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote>
<p>Slurm is an open-source workload manager designed for Linux clusters of all sizes. It provides three key functions. First it allocates exclusive and/or non-exclusive access to resources (computer nodes) to users for some duration of time so they can perform work. Second, it provides a framework for starting, executing, and monitoring work (typically a parallel job) on a set of allocated nodes. Finally, it arbitrates contention for resources by managing a queue of pending work.  </p>
</blockquote>
<p>系统：ubuntu 14.04。slurm版本2.6.5。<br>节点：2个独立的ubuntu14.04计算机。<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在ubuntu中，最简单的安装方法是使用apt-get，目前自动安装的slurm版本为2.6.5，并不是最新版本。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install slurm-llnl</div></pre></td></tr></table></figure>  </p>
<p>安装slurm的同时，会自动创建一个蛋疼的slurm用户，但是这个用户没有home文件，所以无法切换到该用户下进行工作。我的建议是删除旧的slurm用户，同时也是为了munge的正确运行做准备。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo deluser slurm</div></pre></td></tr></table></figure><br>使用slurm，所有的节点必须在相同的用户下工作，建议新建一个slurm用户，必须指定UID，保证所有节点slurm用户的UID也相同：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo adduser --uid &lt;ID&gt; &lt;new name&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Munge"><a href="#Munge" class="headerlink" title="Munge"></a>Munge</h3><p>在安装slurm的同时，也会安装<a href="https://github.com/dun/munge/wiki/Installation-Guide" target="_blank" rel="external">munge</a>。  </p>
<blockquote>
<p>MUNGE (MUNGE Uid ‘N’ Gid Emporium) is an authentication service for creating and validating credentials. It is designed to be highly scalable for use in an HPC cluster environment. It allows a process to authenticate the UID and GID of another local or remote process within a group of hosts having common users and groups. These hosts form a security realm that is defined by a shared cryptographic key. Clients within this security realm can create and validate credentials without the use of root privileges, reserved ports, or platform-specific methods.  </p>
</blockquote>
<p>1.生成key<br>首先生成key，自动生成至<code>/ete/munge/munge.key</code>：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ create-munge-key</div></pre></td></tr></table></figure></p>
<p>2.部署<br>将key拷贝至所有节点。拷贝<code>/etc/munge/munge.key</code>到所有节点的<code>/etc/munge/</code>目录下。</p>
<p>3.启动<br>启动munge。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo /etc/init.d/munge start</div></pre></td></tr></table></figure>  </p>
<p>出现错误：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* Starting MUNGE munged                                                 [fail]</div><div class="line">munged: Error: Logfile is insecure: group-writable permissions <span class="built_in">set</span> on <span class="string">"/var/log"</span></div></pre></td></tr></table></figure><br>出现上述错误需要修改log文件权限：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod g-w /var/<span class="built_in">log</span></div></pre></td></tr></table></figure>  </p>
<p>出现错误：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* Starting MUNGE munged                                           [fail]</div><div class="line">munged: Error: Logfile is insecure: invalid ownership of <span class="string">"/var/log/munge"</span>  </div></pre></td></tr></table></figure><br>首先尝试使用sudo启动，若不成功，则参考如下。munge安装的所有文件，默认用户为munge:munge，当前用户如果不是munge，启动出现错误：<br>需要修改如下文件的用户：<br>/etc/munge/<br>/var/lib/munge/<br>/var/log/munge/<br>/var/run/munge/<br>修改文件用户的命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chown -R &lt;user&gt;:&lt;group&gt; &lt;dir&gt;  </div></pre></td></tr></table></figure><br>修改/ete/init.d/munge，将USER变量修改为你的用户名。</p>
<p>4.验证<br>在slurm用户下验证本机：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ munge -n | unmunge</div><div class="line">STATUS:           Success (0)</div><div class="line">ENCODE_HOST:      localhost (127.0.0.1)</div><div class="line">ENCODE_TIME:      2015-09-14 16:39:58 +0800 (1442219998)</div><div class="line">DECODE_TIME:      2015-09-14 16:39:58 +0800 (1442219998)</div><div class="line">TTL:              300</div><div class="line">CIPHER:           aes128 (4)</div><div class="line">MAC:              sha1 (3)</div><div class="line">ZIP:              none (0)</div><div class="line">UID:              slurm (1023)</div><div class="line">GID:              slurm (1023)</div><div class="line">LENGTH:           0</div></pre></td></tr></table></figure>  </p>
<p>验证其它节点：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ munge -n | ssh node01 unmunge</div><div class="line">STATUS:           Success (0)</div><div class="line">ENCODE_HOST:      localhost (127.0.0.1)</div><div class="line">ENCODE_TIME:      2015-09-14 16:40:09 +0800 (1442220009)</div><div class="line">DECODE_TIME:      2015-09-14 16:39:49 +0800 (1442219989)</div><div class="line">TTL:              300</div><div class="line">CIPHER:           aes128 (4)</div><div class="line">MAC:              sha1 (3)</div><div class="line">ZIP:              none (0)</div><div class="line">UID:              slurm (1023)</div><div class="line">GID:              slurm (1023)</div><div class="line">LENGTH:           0</div></pre></td></tr></table></figure>  </p>
<p>注意！munge自动认证的是相同的用户，即UID和GID相同，并不是按照用户名称来匹配，所以在创建slurm用户时必须指定相同的UID和GID。  </p>
<h3 id="slurm配置文件"><a href="#slurm配置文件" class="headerlink" title="slurm配置文件"></a>slurm配置文件</h3><p>在安装文件中有配置工具：<br><code>slurm-xxx/doc/html/configurator.html.in</code><br>如果使用apt-get安装，则需要根据自己slurm的版本信息下载相应的tar文件，解压后使用，<a href="http://www.schedmd.com/#archives" target="_blank" rel="external">slurm所有版本</a>。  </p>
<p>配置文件样例：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># slurm.conf file generated by configurator.html.</span></div><div class="line"><span class="meta"># Put this file on all nodes of your cluster.</span></div><div class="line"><span class="meta"># See the slurm.conf man page for more information.</span></div><div class="line"><span class="meta">#</span></div><div class="line">ControlMachine=node00</div><div class="line"><span class="meta">#ControlAddr=</span></div><div class="line"><span class="meta">#BackupController=</span></div><div class="line"><span class="meta">#BackupAddr=</span></div><div class="line"><span class="meta">#</span></div><div class="line">AuthType=auth/munge</div><div class="line">CacheGroups=<span class="number">0</span></div><div class="line"><span class="meta">#CheckpointType=checkpoint/none</span></div><div class="line">CryptoType=crypto/munge</div><div class="line"><span class="meta">#DisableRootJobs=NO</span></div><div class="line"><span class="meta">#EnforcePartLimits=NO</span></div><div class="line"><span class="meta">#Epilog=</span></div><div class="line"><span class="meta">#EpilogSlurmctld=</span></div><div class="line"><span class="meta">#FirstJobId=1</span></div><div class="line"><span class="meta">#MaxJobId=999999</span></div><div class="line"><span class="meta">#GresTypes=</span></div><div class="line"><span class="meta">#GroupUpdateForce=0</span></div><div class="line"><span class="meta">#GroupUpdateTime=600</span></div><div class="line"><span class="meta">#JobCheckpointDir=/var/slurm/checkpoint</span></div><div class="line"><span class="meta">#JobCredentialPrivateKey=</span></div><div class="line"><span class="meta">#JobCredentialPublicCertificate=</span></div><div class="line"><span class="meta">#JobFileAppend=0</span></div><div class="line"><span class="meta">#JobRequeue=1</span></div><div class="line"><span class="meta">#JobSubmitPlugins=1</span></div><div class="line"><span class="meta">#KillOnBadExit=0</span></div><div class="line"><span class="meta">#LaunchType=launch/slurm</span></div><div class="line"><span class="meta">#Licenses=foo*4,bar</span></div><div class="line"><span class="meta">#MailProg=/bin/mail</span></div><div class="line"><span class="meta">#MaxJobCount=5000</span></div><div class="line"><span class="meta">#MaxStepCount=40000</span></div><div class="line"><span class="meta">#MaxTasksPerNode=128</span></div><div class="line">MpiDefault=none</div><div class="line"><span class="meta">#MpiParams=ports=#-#</span></div><div class="line"><span class="meta">#PluginDir=</span></div><div class="line"><span class="meta">#PlugStackConfig=</span></div><div class="line"><span class="meta">#PrivateData=jobs</span></div><div class="line">ProctrackType=proctrack/pgid</div><div class="line"><span class="meta">#Prolog=</span></div><div class="line"><span class="meta">#PrologSlurmctld=</span></div><div class="line"><span class="meta">#PropagatePrioProcess=0</span></div><div class="line"><span class="meta">#PropagateResourceLimits=</span></div><div class="line"><span class="meta">#PropagateResourceLimitsExcept=</span></div><div class="line"><span class="meta">#RebootProgram=</span></div><div class="line">ReturnToService=<span class="number">1</span></div><div class="line"><span class="meta">#SallocDefaultCommand=</span></div><div class="line">SlurmctldPidFile=/<span class="keyword">var</span>/run/slurmctld.pid</div><div class="line">SlurmctldPort=<span class="number">6817</span></div><div class="line">SlurmdPidFile=/<span class="keyword">var</span>/run/slurmd.pid</div><div class="line">SlurmdPort=<span class="number">6818</span></div><div class="line">SlurmdSpoolDir=/home/slurm/Slurm</div><div class="line">SlurmUser=slurm</div><div class="line"><span class="meta">#SlurmdUser=root</span></div><div class="line"><span class="meta">#SrunEpilog=</span></div><div class="line"><span class="meta">#SrunProlog=</span></div><div class="line">StateSaveLocation=/home/slurm/Slurm/out</div><div class="line">SwitchType=<span class="keyword">switch</span>/none</div><div class="line"><span class="meta">#TaskEpilog=</span></div><div class="line">TaskPlugin=task/none</div><div class="line"><span class="meta">#TaskPluginParam=</span></div><div class="line"><span class="meta">#TaskProlog=</span></div><div class="line"><span class="meta">#TopologyPlugin=topology/tree</span></div><div class="line"><span class="meta">#TmpFS=/tmp</span></div><div class="line"><span class="meta">#TrackWCKey=no</span></div><div class="line"><span class="meta">#TreeWidth=</span></div><div class="line"><span class="meta">#UnkillableStepProgram=</span></div><div class="line"><span class="meta">#UsePAM=0</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># TIMERS</span></div><div class="line"><span class="meta">#BatchStartTimeout=10</span></div><div class="line"><span class="meta">#CompleteWait=0</span></div><div class="line"><span class="meta">#EpilogMsgTime=2000</span></div><div class="line"><span class="meta">#GetEnvTimeout=2</span></div><div class="line"><span class="meta">#HealthCheckInterval=0</span></div><div class="line"><span class="meta">#HealthCheckProgram=</span></div><div class="line">InactiveLimit=<span class="number">30</span></div><div class="line">KillWait=<span class="number">30</span></div><div class="line"><span class="meta">#MessageTimeout=10</span></div><div class="line"><span class="meta">#ResvOverRun=0</span></div><div class="line">MinJobAge=<span class="number">300</span></div><div class="line"><span class="meta">#OverTimeLimit=0</span></div><div class="line">SlurmctldTimeout=<span class="number">120</span></div><div class="line">SlurmdTimeout=<span class="number">300</span></div><div class="line"><span class="meta">#UnkillableStepTimeout=60</span></div><div class="line"><span class="meta">#VSizeFactor=0</span></div><div class="line">Waittime=<span class="number">300</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># SCHEDULING</span></div><div class="line"><span class="meta">#DefMemPerCPU=0</span></div><div class="line">FastSchedule=<span class="number">1</span></div><div class="line"><span class="meta">#MaxMemPerCPU=0</span></div><div class="line"><span class="meta">#SchedulerRootFilter=1</span></div><div class="line"><span class="meta">#SchedulerTimeSlice=30</span></div><div class="line">SchedulerType=sched/backfill</div><div class="line">SchedulerPort=<span class="number">7321</span></div><div class="line">SelectType=select/linear</div><div class="line"><span class="meta">#SelectTypeParameters=</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># JOB PRIORITY</span></div><div class="line"><span class="meta">#PriorityFlags=</span></div><div class="line"><span class="meta">#PriorityType=priority/basic</span></div><div class="line"><span class="meta">#PriorityDecayHalfLife=</span></div><div class="line"><span class="meta">#PriorityCalcPeriod=</span></div><div class="line"><span class="meta">#PriorityFavorSmall=</span></div><div class="line"><span class="meta">#PriorityMaxAge=</span></div><div class="line"><span class="meta">#PriorityUsageResetPeriod=</span></div><div class="line"><span class="meta">#PriorityWeightAge=</span></div><div class="line"><span class="meta">#PriorityWeightFairshare=</span></div><div class="line"><span class="meta">#PriorityWeightJobSize=</span></div><div class="line"><span class="meta">#PriorityWeightPartition=</span></div><div class="line"><span class="meta">#PriorityWeightQOS=</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># LOGGING AND ACCOUNTING</span></div><div class="line"><span class="meta">#AccountingStorageEnforce=0</span></div><div class="line"><span class="meta">#AccountingStorageHost=</span></div><div class="line"><span class="meta">#AccountingStorageLoc=</span></div><div class="line"><span class="meta">#AccountingStoragePass=</span></div><div class="line"><span class="meta">#AccountingStoragePort=</span></div><div class="line">AccountingStorageType=accounting_storage/none</div><div class="line"><span class="meta">#AccountingStorageUser=</span></div><div class="line">AccountingStoreJobComment=YES</div><div class="line">ClusterName=cluster</div><div class="line"><span class="meta">#DebugFlags=</span></div><div class="line"><span class="meta">#JobCompHost=</span></div><div class="line"><span class="meta">#JobCompLoc=</span></div><div class="line"><span class="meta">#JobCompPass=</span></div><div class="line"><span class="meta">#JobCompPort=</span></div><div class="line">JobCompType=jobcomp/none</div><div class="line"><span class="meta">#JobCompUser=</span></div><div class="line">JobAcctGatherFrequency=<span class="number">30</span></div><div class="line">JobAcctGatherType=jobacct_gather/none</div><div class="line">SlurmctldDebug=<span class="number">3</span></div><div class="line"><span class="meta">#SlurmctldLogFile=</span></div><div class="line">SlurmdDebug=<span class="number">3</span></div><div class="line"><span class="meta">#SlurmdLogFile=</span></div><div class="line"><span class="meta">#SlurmSchedLogFile=</span></div><div class="line"><span class="meta">#SlurmSchedLogLevel=</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># POWER SAVE SUPPORT FOR IDLE NODES (optional)</span></div><div class="line"><span class="meta">#SuspendProgram=</span></div><div class="line"><span class="meta">#ResumeProgram=</span></div><div class="line"><span class="meta">#SuspendTimeout=</span></div><div class="line"><span class="meta">#ResumeTimeout=</span></div><div class="line"><span class="meta">#ResumeRate=</span></div><div class="line"><span class="meta">#SuspendExcNodes=</span></div><div class="line"><span class="meta">#SuspendExcParts=</span></div><div class="line"><span class="meta">#SuspendRate=</span></div><div class="line"><span class="meta">#SuspendTime=</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># COMPUTE NODES</span></div><div class="line">NodeName=node01 CPUs=<span class="number">1</span> State=UNKNOWN</div><div class="line">NodeName=node00 CPUs=<span class="number">1</span> State=UNKNOWN</div><div class="line">PartitionName=debug Nodes=node00,node01 Default=YES MaxTime=INFINITE State=UP</div></pre></td></tr></table></figure>  </p>
<p>将该配置文件拷贝至所有节点，放置于/etc/slurm-llnl/slurm.conf中。</p>
<h3 id="启动和测试slurm"><a href="#启动和测试slurm" class="headerlink" title="启动和测试slurm"></a>启动和测试slurm</h3><p>到所有节点中启动：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo /ete/init.d/slurm-llnl start</div></pre></td></tr></table></figure>  </p>
<p>查看节点信息：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sinfo</div></pre></td></tr></table></figure></p>
<p>测试脚本test：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#SBATCH -A &lt;account&gt;</span></div><div class="line"><span class="comment">#SBATCH -D /home/slurm/Slurm</span></div><div class="line"><span class="comment">#SBATCH -I</span></div><div class="line"><span class="comment">#SBATCH --time=00:30:00</span></div><div class="line"><span class="comment">#SBATCH --error=job.%J.err</span></div><div class="line"><span class="comment">#SBATCH --output=job.%J.out</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"hello world!"</span></div><div class="line">./hello.sh</div></pre></td></tr></table></figure></p>
<p>运行测试脚本:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sbatch <span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<p>当某一个job因为某些I/O原因阻塞以后，会导致某个节点一直处于comp状态，重启该节点可以使用如下命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ scontrol update NodeName=OptiPlex State=DOWN Reason=hung_completing</div><div class="line">$ scontrol update NodeName=OptiPlex State=RESUME</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Slurm is an open-source workload manager designed for Linux clusters of all sizes. It provides three key functions. First it allocates exclusive and/or non-exclusive access to resources (computer nodes) to users for some duration of time so they can perform work. Second, it provides a framework for starting, executing, and monitoring work (typically a parallel job) on a set of allocated nodes. Finally, it arbitrates contention for resources by managing a queue of pending work.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;系统：ubuntu 14.04。slurm版本2.6.5。&lt;br&gt;节点：2个独立的ubuntu14.04计算机。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ubuntu" scheme="http://itanch.github.io/tags/ubuntu/"/>
    
      <category term="slurm" scheme="http://itanch.github.io/tags/slurm/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣电影Top250获取</title>
    <link href="http://itanch.github.io/2015/08/29/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1Top250%E8%8E%B7%E5%8F%96/"/>
    <id>http://itanch.github.io/2015/08/29/豆瓣电影Top250获取/</id>
    <published>2015-08-29T12:53:09.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="豆瓣API说明"><a href="#豆瓣API说明" class="headerlink" title="豆瓣API说明"></a>豆瓣API说明</h3><p>豆瓣为开发者提供了用于应用开发的<a href="http://developers.douban.com/wiki/?title=api_v2" target="_blank" rel="external">Api接口</a>，通过这些Api接口可以获得豆瓣的部分内容。  </p>
<p>豆瓣Api V2认证使用了OAuth2，使得用户的授权过程更为安全，返回数据的格式为json，便于应用开发者解析获得的数据。豆瓣没有提供官方的SDK，但是提供了其他非官方的基于多种语言的SDK，我们采用了Java语言的<a href="https://github.com/UglyTroLL/Douban-Java-SDK-OAuth2" target="_blank" rel="external">SDK</a>。由于该版本的Java SDK基于较早的豆瓣API的v1版本，所以需要进行部分修改适应新的v2版本，其中我们修改了电影相关的代码(<a href="https://github.com/ITanCh/Douban-Java-SDK-OAuth2" target="_blank" rel="external">新的源代码</a>)。  </p>
<p>Java SDK为Maven工程，可以使用Maven编译打包：  </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package -Dmaven<span class="selector-class">.test</span><span class="selector-class">.skip</span>=true</div></pre></td></tr></table></figure>  
<p>为了将所有依赖一起打包进去，我们使用了fatjar工具进行打包，生成可以调用的函数库(<a href="https://github.com/ITanCh/Douban-Java-SDK-OAuth2/raw/origin/Douban-Java-SDK-OAuth2-origin_fat.jar" target="_blank" rel="external">jar</a>)。<br><a id="more"></a></p>
<h3 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h3><h4 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.model.app.AccessToken;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.model.app.DoubanException;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.model.app.RequestGrantScope;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.model.v2.DoubanCastObject;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.model.v2.DoubanDirectorObj;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.model.v2.DoubanSubjectListObj;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.model.v2.DoubanSubjectObj;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.playground.BrowserLauncher;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.playground.PlayGround;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.provider.OAuthDoubanProvider;</div><div class="line"><span class="keyword">import</span> com.dongxuexidu.douban4j.service.DoubanBookMovieMusicService;</div></pre></td></tr></table></figure>  
<h4 id="AccessToken获取"><a href="#AccessToken获取" class="headerlink" title="AccessToken获取"></a>AccessToken获取</h4><p>通过豆瓣API获取用户相关的信息时需要获取AccessToken，在Java中可以实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">testAccessToken</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			OAuthDoubanProvider oauth = <span class="keyword">new</span> OAuthDoubanProvider();</div><div class="line">			oauth.setApiKey(<span class="string">"your api key"</span>).setSecretKey(</div><div class="line">					<span class="string">"your secret key"</span>);</div><div class="line">			oauth.addScope(RequestGrantScope.BASIC_COMMON_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.SHUO_READ_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.SHUO_WRITE_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.BASIC_NOTE_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.BOOK_READ_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.EVENT_READ_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.EVENT_WRITE_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.MAIL_READ_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.MAIL_WRITE_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.MOVIE_READ_SCOPE)</div><div class="line">					.addScope(RequestGrantScope.MUSIC_READ_SCOPE);</div><div class="line">			oauth.setRedirectUrl(<span class="string">"http://www.liutianchi.com"</span>);</div><div class="line">			BrowserLauncher.openURL(oauth.getGetCodeRedirectUrl());</div><div class="line">			System.out.println(oauth.getGetCodeRedirectUrl());</div><div class="line">			System.out.print(<span class="string">"Put the code you got here.[Enter]:"</span>);</div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">					System.in));</div><div class="line">			String code = br.readLine();</div><div class="line">			System.out.println(<span class="string">"code : "</span> + code);</div><div class="line">			AccessToken at = oauth.tradeAccessTokenWithCode(code);</div><div class="line">			System.out.println(<span class="string">"at : "</span> + at.getAccessToken());</div><div class="line">			System.out.println(<span class="string">"uid : "</span> + at.getDoubanUserId());</div><div class="line">			<span class="keyword">return</span> at.getAccessToken();</div><div class="line">		&#125; <span class="keyword">catch</span> (DoubanException ex) &#123;</div><div class="line">			Logger.getLogger(PlayGround.class.getName()).log(Level.SEVERE,</div><div class="line">					<span class="keyword">null</span>, ex);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			Logger.getLogger(PlayGround.class.getName()).log(Level.SEVERE,</div><div class="line">					<span class="keyword">null</span>, ex);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>  </p>
<p>获取电影Top250的基本信息不涉及用户内容，所以不必获取AccessToken。  </p>
<h4 id="获取Top250电影ID"><a href="#获取Top250电影ID" class="headerlink" title="获取Top250电影ID"></a>获取Top250电影ID</h4><p>虽然豆瓣提供了获取Top250的API：  </p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/v2/movie/top250</div></pre></td></tr></table></figure>
<p>但是，通过上述方法获取的电影信息为简单内容，其中演员数为3，无电影的国家信息，无电影内容简介。这些内容无法达到我们数据分析的目的，所以我们首先统计出Top250的ID，然后使用如下API获取每一部电影的详细信息:  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/v2/m</span>ovie<span class="regexp">/subject/</span>:id</div></pre></td></tr></table></figure>  
<p>豆瓣限制了一次获取Top250的电影数目最大为100，所以需要进行3次请求。代码实现如下：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTop250ID</span><span class="params">()</span> </span>&#123;</div><div class="line">		DoubanBookMovieMusicService instance = <span class="keyword">new</span> DoubanBookMovieMusicService();</div><div class="line">		DoubanSubjectListObj results = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File dirFile = <span class="keyword">new</span> File(FILEPATH);</div><div class="line">			dirFile.mkdirs();</div><div class="line"></div><div class="line">			File idFile = <span class="keyword">new</span> File(dirFile, <span class="string">"movie_id"</span>);</div><div class="line">			<span class="keyword">if</span> (!idFile.exists())</div><div class="line">				idFile.createNewFile();</div><div class="line">			BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(idFile,</div><div class="line">					<span class="keyword">false</span>));</div><div class="line"></div><div class="line">			<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (start &lt; <span class="number">300</span>) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">while</span> (flag) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						results = instance.getMoviesTop250(start, <span class="number">100</span>);</div><div class="line">						flag = <span class="keyword">false</span>;</div><div class="line">					&#125; <span class="keyword">catch</span> (NoHttpResponseException e) &#123;</div><div class="line">						System.out.println(<span class="string">"NoHttpResponseException"</span>);</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				List&lt;DoubanSubjectObj&gt; movieList = results.getSubjects();</div><div class="line"></div><div class="line">				<span class="keyword">for</span> (DoubanSubjectObj result : movieList) &#123;</div><div class="line">					out.write(result.getId());</div><div class="line">					out.newLine();</div><div class="line">				&#125;</div><div class="line">				start += <span class="number">100</span>;</div><div class="line">				Thread.sleep(<span class="number">1000</span>);</div><div class="line">			&#125;</div><div class="line">			out.write(<span class="string">"#"</span>);</div><div class="line">			out.flush();</div><div class="line">			out.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (DoubanException | IOException | InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>  
<p>如下所示为Top250的部分ID:  </p>
<pre><code>1292052
1295644
1292720
1291546
1292063
1292001
1295124
1291561
</code></pre><h4 id="获取每一部电影的信息"><a href="#获取每一部电影的信息" class="headerlink" title="获取每一部电影的信息"></a>获取每一部电影的信息</h4><p>代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTop250Info</span><span class="params">()</span> </span>&#123;</div><div class="line">		File dirFile = <span class="keyword">new</span> File(FILEPATH);</div><div class="line">		File idFile = <span class="keyword">new</span> File(dirFile, <span class="string">"movie_id"</span>);</div><div class="line">		<span class="keyword">if</span> (!idFile.exists()) &#123;</div><div class="line">			System.err.println(<span class="string">"movie id file not exist!"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		LinkedHashSet&lt;String&gt; castSet = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">		LinkedHashSet&lt;String&gt; dirSet = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"></div><div class="line">		BufferedWriter writer;</div><div class="line">		BufferedReader reader;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File mvFile = <span class="keyword">new</span> File(dirFile, <span class="string">"movie_info"</span>);</div><div class="line">			<span class="keyword">if</span> (!mvFile.exists())</div><div class="line">				mvFile.createNewFile();</div><div class="line">			writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(mvFile, <span class="keyword">false</span>));</div><div class="line"></div><div class="line">			reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(idFile));</div><div class="line"></div><div class="line">			DoubanBookMovieMusicService instance = <span class="keyword">new</span> DoubanBookMovieMusicService();</div><div class="line">			DoubanSubjectObj result = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			String id = <span class="string">""</span>;</div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">				id = reader.readLine();</div><div class="line">				<span class="keyword">if</span> (id == <span class="keyword">null</span> || id.equals(<span class="string">"#"</span>))</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				count++;</div><div class="line">				System.out.println(count + <span class="string">": "</span> + id);</div><div class="line"></div><div class="line">				<span class="keyword">long</span> l = Long.parseLong(id);</div><div class="line"></div><div class="line">				<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">while</span> (flag) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						result = instance.getV2MovieInfoById(l);</div><div class="line">						flag = <span class="keyword">false</span>;</div><div class="line">					&#125; <span class="keyword">catch</span> (NoHttpResponseException | SocketTimeoutException e) &#123;</div><div class="line">						System.out.println(<span class="string">"NoHttpResponseException"</span>);</div><div class="line">						Thread.sleep(<span class="number">2000</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				writer.write(result.getId() + <span class="string">" "</span>);</div><div class="line">				writer.write(result.getTitle() + <span class="string">" "</span>);</div><div class="line">				writer.write(result.getRating().getAverage() + <span class="string">" "</span>);</div><div class="line"></div><div class="line">				List&lt;DoubanCastObject&gt; castList = result.getCasts();</div><div class="line">				<span class="keyword">boolean</span> first = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">for</span> (DoubanCastObject cast : castList) &#123;</div><div class="line">					<span class="keyword">if</span> (!first)</div><div class="line">						writer.write(<span class="string">"#"</span>);</div><div class="line">					writer.write(cast.getId());</div><div class="line">					castSet.add(cast.getId());</div><div class="line">					first = <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				writer.write(<span class="string">" "</span>);</div><div class="line"></div><div class="line">				List&lt;DoubanDirectorObj&gt; dirList = result.getDirectors();</div><div class="line">				first = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">for</span> (DoubanDirectorObj dir : dirList) &#123;</div><div class="line">					<span class="keyword">if</span> (!first)</div><div class="line">						writer.write(<span class="string">"#"</span>);</div><div class="line">					writer.write(dir.getId());</div><div class="line">					dirSet.add(dir.getId());</div><div class="line">					first = <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				writer.write(<span class="string">" "</span>);</div><div class="line"></div><div class="line">				List&lt;String&gt; strList = result.getCountries();</div><div class="line">				first = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">for</span> (String str : strList) &#123;</div><div class="line">					<span class="keyword">if</span> (!first)</div><div class="line">						writer.write(<span class="string">"#"</span>);</div><div class="line">					writer.write(str);</div><div class="line">					first = <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				writer.write(<span class="string">" "</span>);</div><div class="line"></div><div class="line">				strList = result.getGenres();</div><div class="line">				first = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">for</span> (String str : strList) &#123;</div><div class="line">					<span class="keyword">if</span> (!first)</div><div class="line">						writer.write(<span class="string">"#"</span>);</div><div class="line">					writer.write(str);</div><div class="line">					first = <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				writer.write(<span class="string">" "</span> + result.getYear());</div><div class="line">				writer.newLine();</div><div class="line">				writer.flush();</div><div class="line">				Thread.sleep(<span class="number">3000</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			reader.close();</div><div class="line">			writer.close();</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"Get movie !"</span>);</div><div class="line"></div><div class="line">			File castIdFile = <span class="keyword">new</span> File(dirFile, <span class="string">"cast_id"</span>);</div><div class="line">			<span class="keyword">if</span> (!castIdFile.exists())</div><div class="line">				castIdFile.createNewFile();</div><div class="line">			BufferedWriter castIdWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(</div><div class="line">					castIdFile, <span class="keyword">true</span>));</div><div class="line">			Iterator&lt;String&gt; it = castSet.iterator();</div><div class="line">			<span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">				castIdWriter.write(it.next());</div><div class="line">				castIdWriter.newLine();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			castIdWriter.write(<span class="string">"#"</span>);</div><div class="line">			castIdWriter.flush();</div><div class="line">			castIdWriter.close();</div><div class="line"></div><div class="line">			File dirIdFile = <span class="keyword">new</span> File(dirFile, <span class="string">"dir_id"</span>);</div><div class="line">			<span class="keyword">if</span> (!dirIdFile.exists())</div><div class="line">				dirIdFile.createNewFile();</div><div class="line">			BufferedWriter dirIdWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(</div><div class="line">					dirIdFile, <span class="keyword">true</span>));</div><div class="line">			it = dirSet.iterator();</div><div class="line">			<span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">				dirIdWriter.write(it.next());</div><div class="line">				dirIdWriter.newLine();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			dirIdWriter.write(<span class="string">"#"</span>);</div><div class="line">			dirIdWriter.flush();</div><div class="line">			dirIdWriter.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException | DoubanException | InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在获取电影信息时，我们同时利用哈希集统计了演员的ID和导演的ID，目的是为了进一步统计影人的具体信息。  </p>
<p>在这里需要注意的是，豆瓣为了防止恶意访问，对每分钟请求的次数进行了限制，官方文档说为40次/分钟，经过实验发现，这个时间并不准确，最后我们采用3s一次的请求进行了连续的访问。如果请求次数过度频繁，则会出现警告页面，同时导致在该IP下若干小时内无法继续访问。</p>
<p>最后获取的电影信息部分结果如下所示(id，名称，平分，演员id集合，导演id集合，国家，标签集合，发行年份)：  </p>
<pre><code>1292052 肖申克的救赎 9.6 1054521#1054534#1041179#1000095 1047973 美国 犯罪#剧情 1994
1295644 这个杀手不太冷 9.4 1025182#1054454#1010507#1019050 1031876 法国 剧情#动作#犯罪 1994
1292720 阿甘正传 9.4 1054450#1002676#1031848#1031912 1053564 美国 剧情#爱情 1994
1291546 霸王别姬 9.4 1003494#1050265#1035641#1000905 1023040 中国大陆#香港 剧情#爱情#同性 1993
1292063 美丽人生 9.4 1041004#1000375#1000368#1082051 1041004 意大利 剧情#战争 1997
1292001 海上钢琴师 9.2 1025176#1010659#1027407#1009391 1018983 意大利 剧情#音乐 1998
1295124 辛德勒的名单 9.4 1031220#1054393#1006956#1041165 1054440 美国 剧情#历史#战争 1993
1291561 千与千寻 9.2 1023337#1005438#1045797#1025558 1054439 日本 剧情#动画#奇幻 2001
2131459 机器人总动员 9.3 1009535#1000389#1018022#1049585 1036450 美国 喜剧#爱情#科幻 2008
1292722 泰坦尼克号 9.1 1041029#1054446#1031864#1010555 1022571 美国 剧情#爱情#灾难 1997
3541415 盗梦空间 9.2 1041029#1101703#1012520#1027181 1054524 美国#英国 剧情#动作#科幻 2010
3793023 三傻大闹宝莱坞 9.1 1031931#1049635#1018290#1032430 1286677 印度 剧情#喜剧#爱情 2009  
</code></pre><p>其中所有的演员和导演的信息用豆瓣赋予的ID表示，ID是豆瓣采用的唯一标示影人的序号。由于豆瓣提供的电影信息内容不完全规范，同一个影人可能在不同电影中使用了不同的名字，例如名字拼写、翻译不同，所以采用ID而不是影人的名字来进行数据分析。  </p>
<h4 id="获取影人信息"><a href="#获取影人信息" class="headerlink" title="获取影人信息"></a>获取影人信息</h4><p>因为需要对男女演员进行分别统计，所以我们对影人的详细信息又进行了获取，代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCastInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">		File dirFile = <span class="keyword">new</span> File(FILEPATH);</div><div class="line">		File idFile = <span class="keyword">new</span> File(dirFile, <span class="string">"dir_id"</span>);</div><div class="line">		<span class="keyword">if</span> (!idFile.exists()) &#123;</div><div class="line">			System.err.println(<span class="string">"cast id file not exist!"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		BufferedWriter writer;</div><div class="line">		BufferedReader reader;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File infoFile = <span class="keyword">new</span> File(dirFile, <span class="string">"dir_info"</span>);</div><div class="line">			<span class="keyword">if</span> (!infoFile.exists())</div><div class="line">				infoFile.createNewFile();</div><div class="line">			writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(infoFile, <span class="keyword">false</span>));</div><div class="line"></div><div class="line">			reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(idFile));</div><div class="line"></div><div class="line">			DoubanBookMovieMusicService instance = <span class="keyword">new</span> DoubanBookMovieMusicService();</div><div class="line">			DoubanCastObject result = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			String id = <span class="string">""</span>;</div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">				id = reader.readLine();</div><div class="line">				<span class="keyword">if</span> (id == <span class="keyword">null</span> || id.equals(<span class="string">"#"</span>))</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				count++;</div><div class="line">				System.out.println(count + <span class="string">": "</span> + id);</div><div class="line"></div><div class="line">				<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">while</span> (flag) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						result = instance.getMoviesCast(id);</div><div class="line">						flag = <span class="keyword">false</span>;</div><div class="line">					&#125; <span class="keyword">catch</span> (NoHttpResponseException | SocketTimeoutException e) &#123;</div><div class="line">						System.out.println(<span class="string">"NoHttpResponseException"</span>);</div><div class="line">						Thread.sleep(<span class="number">2000</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				writer.write(result.getId() + <span class="string">" "</span>);</div><div class="line">				writer.write(result.getName() + <span class="string">" "</span>);</div><div class="line">				writer.write(result.getGender());</div><div class="line">				writer.newLine();</div><div class="line">				writer.flush();</div><div class="line">				Thread.sleep(<span class="number">4000</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			reader.close();</div><div class="line">			writer.close();</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"Get movie !"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException | DoubanException | InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>获取的部分演员信息如下(id，名字，性别)：</p>
<pre><code>1054521 蒂姆·罗宾斯 男
1054534 摩根·弗里曼 男
1041179 鲍勃·冈顿 男
1000095 威廉姆·赛德勒 男
1025182 让·雷诺 男
1054454 娜塔莉·波特曼 女
1010507 加里·奥德曼 男
1019050 丹尼·爱罗 男
1054450 汤姆·汉克斯 男
1002676 罗宾·怀特 女
1031848 加里·西尼斯 男
1031912 麦凯尔泰·威廉逊 男
1003494 张国荣 男
1050265 张丰毅 男
1035641 巩俐 女
</code></pre><p>获取的导演信息如下：  </p>
<pre><code>1047973 弗兰克·德拉邦特 男
1031876 吕克·贝松 男
1053564 罗伯特·泽米吉斯 男
1023040 陈凯歌 男
1041004 罗伯托·贝尼尼 男
1018983 朱塞佩·托纳多雷 男
1054440 史蒂文·斯皮尔伯格 男
1054439 宫崎骏 男  
</code></pre><h4 id="数据完善"><a href="#数据完善" class="headerlink" title="数据完善"></a>数据完善</h4><p>需要注意的是，获取的源数据形式并不规范，影人的名字格式多样，有的影人没有性别信息，所以对源数据进行过滤修正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;豆瓣API说明&quot;&gt;&lt;a href=&quot;#豆瓣API说明&quot; class=&quot;headerlink&quot; title=&quot;豆瓣API说明&quot;&gt;&lt;/a&gt;豆瓣API说明&lt;/h3&gt;&lt;p&gt;豆瓣为开发者提供了用于应用开发的&lt;a href=&quot;http://developers.douban.com/wiki/?title=api_v2&quot;&gt;Api接口&lt;/a&gt;，通过这些Api接口可以获得豆瓣的部分内容。  &lt;/p&gt;
&lt;p&gt;豆瓣Api V2认证使用了OAuth2，使得用户的授权过程更为安全，返回数据的格式为json，便于应用开发者解析获得的数据。豆瓣没有提供官方的SDK，但是提供了其他非官方的基于多种语言的SDK，我们采用了Java语言的&lt;a href=&quot;https://github.com/UglyTroLL/Douban-Java-SDK-OAuth2&quot;&gt;SDK&lt;/a&gt;。由于该版本的Java SDK基于较早的豆瓣API的v1版本，所以需要进行部分修改适应新的v2版本，其中我们修改了电影相关的代码(&lt;a href=&quot;https://github.com/ITanCh/Douban-Java-SDK-OAuth2&quot;&gt;新的源代码&lt;/a&gt;)。  &lt;/p&gt;
&lt;p&gt;Java SDK为Maven工程，可以使用Maven编译打包：  &lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mvn package -Dmaven&lt;span class=&quot;selector-class&quot;&gt;.test&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.skip&lt;/span&gt;=true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;  
&lt;p&gt;为了将所有依赖一起打包进去，我们使用了fatjar工具进行打包，生成可以调用的函数库(&lt;a href=&quot;https://github.com/ITanCh/Douban-Java-SDK-OAuth2/raw/origin/Douban-Java-SDK-OAuth2-origin_fat.jar&quot;&gt;jar&lt;/a&gt;)。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="豆瓣" scheme="http://itanch.github.io/tags/%E8%B1%86%E7%93%A3/"/>
    
      <category term="电影" scheme="http://itanch.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14.04基本配置</title>
    <link href="http://itanch.github.io/2015/08/06/ubuntu14-04%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://itanch.github.io/2015/08/06/ubuntu14-04基本配置/</id>
    <published>2015-08-06T03:59:57.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span>  </div><div class="line">$ sudo apt-<span class="built_in">get</span> upgrade</div></pre></td></tr></table></figure>
<h2 id="安装搜狗输入法："><a href="#安装搜狗输入法：" class="headerlink" title="安装搜狗输入法："></a>安装搜狗输入法：</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo<span class="built_in"> add-apt-repository </span>ppa:fcitx-team/nightly	<span class="comment">#添加fcitx源</span></div><div class="line">$ sudo apt-get install fcitx  </div><div class="line"><span class="comment">#下载搜狗输入法双击安装</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装JDK："><a href="#安装JDK：" class="headerlink" title="安装JDK："></a>安装JDK：</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#下载最近的jdk包  </span></div><div class="line">$ sudo mv jdk.tar.gz /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">jvm</span>/  </span></div><div class="line">$ cd /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">jvm</span>/  </span></div><div class="line">$ sudo tar -zxvf jdk.tar.gz  </div><div class="line">$ sudo rm jdk.tar.gz  </div><div class="line"></div><div class="line">$ sudo update-alternatives --install /usr/bin/java java /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">jvm</span>/<span class="title">jdk</span>/<span class="title">bin</span>/<span class="title">java</span> 300  </span></div><div class="line">$ sudo update-alternatives --install /usr/bin/javac javac /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">jvm</span>/<span class="title">jdk</span>/<span class="title">bin</span>/<span class="title">javac</span> 300</span></div><div class="line"></div><div class="line"><span class="comment">#选择默认java库</span></div><div class="line">$ sudo update-alternatives --config java  </div><div class="line">$ java -version	<span class="comment">#测试</span></div></pre></td></tr></table></figure>
<h2 id="安装Eclispe"><a href="#安装Eclispe" class="headerlink" title="安装Eclispe"></a>安装Eclispe</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#下载最新的elipse包  </span></div><div class="line"></div><div class="line">$ sudo mv eclipse.tar.gz /opt/</div><div class="line">$ <span class="built_in">cd</span> /opt/</div><div class="line">$ sudo tar -zxvf eclipse.tar.gz</div><div class="line">$ sudo rm eclipse.tar.gz</div><div class="line"></div><div class="line"><span class="comment">#若想从命令行启动  </span></div><div class="line">$ sudo ln -sf /opt/eclipse/eclipse /usr/bin</div><div class="line"></div><div class="line"><span class="comment">#创建桌面图标  </span></div><div class="line">$ sudo vi /usr/share/applications/eclipse.desktop</div><div class="line"><span class="comment">#添加如下内容  </span></div><div class="line">[Desktop Entry]</div><div class="line">Type=Application</div><div class="line">Name=Eclipse</div><div class="line">Comment=Eclipse Integrated Development Environment</div><div class="line">Icon=/opt/eclipse/icon.xpm</div><div class="line">Exec=eclipse</div><div class="line">Terminal=<span class="literal">false</span></div><div class="line">Categories=Development;IDE;Java;</div></pre></td></tr></table></figure>
<h2 id="配置Android-SDK"><a href="#配置Android-SDK" class="headerlink" title="配置Android SDK:"></a>配置Android SDK:</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#从官网下载最新的SDK</span></div><div class="line"></div><div class="line"><span class="comment">#将文件解压到目标文件夹/opt/</span></div><div class="line"></div><div class="line"><span class="variable">$ </span>cd /opt/android-sdk/tools</div><div class="line"></div><div class="line"><span class="variable">$ </span>sudo  ./android <span class="comment">#运行Android SDK Manager,下载platfor-tools和bulid-tools</span></div><div class="line"></div><div class="line"><span class="variable">$ </span>sudo chmod <span class="number">777</span> android-sdk	<span class="comment">#修改所有文件的权限,使之可以运行</span></div><div class="line"></div><div class="line"><span class="comment">#64位的ubuntu 13.10及以上版本需要安装32位相关的库</span></div><div class="line"><span class="variable">$ </span>sudo dpkg --add-architecture i386</div><div class="line"><span class="variable">$ </span>sudo apt-get update</div><div class="line"><span class="variable">$ </span>sudo apt-get install <span class="symbol">libncurses5:</span>i386 libstdc++<span class="number">6</span><span class="symbol">:i386</span> <span class="symbol">zlib1g:</span>i386</div><div class="line"></div><div class="line"><span class="variable">$ </span>sudo vi /ect/profile  </div><div class="line"><span class="comment">#添加如下内容</span></div><div class="line">export PATH=<span class="regexp">/opt/android</span>-sdk-linux/platform-<span class="symbol">tools:</span><span class="variable">$PATH</span>  </div><div class="line">export PATH=<span class="regexp">/opt/android</span>-sdk-linux/<span class="symbol">tools:</span><span class="variable">$PATH</span></div><div class="line"><span class="variable">$ </span>source /ect/profile</div></pre></td></tr></table></figure>
<h2 id="Firefox-Flash插件"><a href="#Firefox-Flash插件" class="headerlink" title="Firefox Flash插件"></a>Firefox Flash插件</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#下载最新的Flash Player</span></div><div class="line"></div><div class="line">$ tar -zxvf flash.tar.gz</div><div class="line"><span class="comment">#获取flashplayer.so</span></div><div class="line"></div><div class="line">$ sudo cp libflashplayer.so /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">mozilla</span>/<span class="title">plugins</span></span></div></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li>取消某个软件(tomcat)开机自启动。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">update</span>-rc.d tomcat <span class="keyword">disable</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新：&quot;&gt;&lt;a href=&quot;#更新：&quot; class=&quot;headerlink&quot; title=&quot;更新：&quot;&gt;&lt;/a&gt;更新：&lt;/h2&gt;&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; upgrade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装搜狗输入法：&quot;&gt;&lt;a href=&quot;#安装搜狗输入法：&quot; class=&quot;headerlink&quot; title=&quot;安装搜狗输入法：&quot;&gt;&lt;/a&gt;安装搜狗输入法：&lt;/h2&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo&lt;span class=&quot;built_in&quot;&gt; add-apt-repository &lt;/span&gt;ppa:fcitx-team/nightly	&lt;span class=&quot;comment&quot;&gt;#添加fcitx源&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install fcitx  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#下载搜狗输入法双击安装&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ubuntu" scheme="http://itanch.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Torque安装笔记(多ubuntu节点)</title>
    <link href="http://itanch.github.io/2015/08/06/Torque%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://itanch.github.io/2015/08/06/Torque学习笔记/</id>
    <published>2015-08-06T03:59:57.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.实验系统ubuntu14.04。更新系统软件，防止相关软件版本过低  </p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span>  </div><div class="line">sudo apt-<span class="built_in">get</span> upgrade</div></pre></td></tr></table></figure>
<p>2.从官网下载Torque，在这里为Torque 5.1.1。  </p>
<p>3.解压文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf torque<span class="selector-class">.tar</span><span class="selector-class">.gz</span></div></pre></td></tr></table></figure>
<p>4.运行configure，可加prefix指定Torque命令安装位置，也可不加，不加参数命令默认装在/usr/local/bin和/usr/local/sbin下。利用configure可以检测依赖软件，按照提示安装这些软件。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>torque</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>5.编译安装</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">make</span>  </div><div class="line"><span class="built_in">make</span> install</div></pre></td></tr></table></figure>
<p>6.生成子节点安装包，mom和clients为需要拷贝的文件。需要安装ssh，ubuntu默认安装openssh-client，所以需要手动再安装openssh-server，让其他计算机登陆。  </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">make packages</div><div class="line"><span class="keyword">scp </span>tpackages name@ip:<span class="keyword">dir </span> <span class="comment">#非必要</span></div><div class="line"><span class="keyword">scp </span>torque-package-mom-linux-x86_64.<span class="keyword">sh </span>name@ip:<span class="keyword">dir </span> </div><div class="line"><span class="keyword">scp </span>torque-package-clients-linux-x86_64.<span class="keyword">sh </span>name@ip:<span class="keyword">dir</span></div></pre></td></tr></table></figure>
<p>7.在子节点上安装，mom和clients。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ./torque-<span class="keyword">package</span>-mom-linux-x86_64.sh <span class="comment">--install</span></div><div class="line">sudo ./torque-<span class="keyword">package</span>-clients-linux-x86_64.sh <span class="comment">--install</span></div></pre></td></tr></table></figure>
<p>8.配置主节  </p>
<ul>
<li>将/usr/local/torque/bin和/usr/local/torque/sbin添加进环境变量，这里我将其添加入.bashrc文件。  </li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/torque/bin</span><span class="symbol">:/usr/local/torque/sbin</span>  </div></pre></td></tr></table></figure>  
<ul>
<li>添加共享库到Torque的配置文件中（如果出现有什么库找不到，则必须加上）  </li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo <span class="string">'/usr/local/lib'</span> &gt; /etc/ld<span class="selector-class">.so</span><span class="selector-class">.conf</span><span class="selector-class">.d</span>/torque<span class="selector-class">.conf</span></div><div class="line">ldconfig  </div></pre></td></tr></table></figure>
<ul>
<li>添加主节点名字：  </li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo 主节点名字 &gt; <span class="regexp">/var/</span>spool<span class="regexp">/torque/</span>server_name  </div></pre></td></tr></table></figure>  
<ul>
<li>初始化serverdb文件，在使用pbs_sever之前必须完成该步骤：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./torque<span class="selector-class">.setup</span> 用户名</div></pre></td></tr></table></figure>
<ul>
<li>添加子节点，np为节点cpu核个数  </li>
</ul>
<p>vi /var/spool/torque/server_priv/nodes<br>子节点的名字为计算机名，而非用户名。每次添加节点需要重启pbs_sever。添加如下内容（也可以先在子节点启动mom，在主节点启动server，然后用命令<code>qmgr -c &#39;create node ubuntu np=4&#39;</code>进行添加节点）：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">子节点<span class="number">1</span>名字 np=<span class="number">4</span>  </div><div class="line">子节点<span class="number">2</span>名字 np=<span class="number">4</span></div></pre></td></tr></table></figure></p>
<ul>
<li>启动</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pbs_server</span></div><div class="line">pbs_sched  </div><div class="line">pbs_mom</div></pre></td></tr></table></figure>
<p>9.配置子节点，同样需要添加环境变量。  </p>
<ul>
<li><p>修改config<br>使用make packages 命令生成mom安装于子节点的，无需进行这一步。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> vi <span class="meta-keyword">/var/</span>spool<span class="meta-keyword">/torque/</span>mom_priv/config  </div><div class="line">添加：  </div><div class="line">pbsserver 主节点名称  </div><div class="line">logevent <span class="number">255</span>  </div></pre></td></tr></table></figure>
</li>
<li><p>启动：</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pbs_mom</div></pre></td></tr></table></figure>
<p>10.注意！因为配置文件中使用了<em>主节点名称</em>和<em>子节点名称</em>，所以主、从节点都需要修改</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/hosts  </div><div class="line">添加这些名称和对应的<span class="built_in">ip</span></div></pre></td></tr></table></figure>
<p>11.检查运行情况<br>保证在server上运行<code>trqauthd</code>、<code>pbs_server</code>、<code>pbs_sched</code>这三个程序。<br>保证在子节点上运行<code>pbs_mom</code>。</p>
<p>12.常用命令<br><code>pbsnodes</code>: 子节点信息。<br><code>qterm</code>: 结束pbs_server。<br><code>qsub</code>: 提交job。<br><code>qstat</code>: job运行信息。</p>
<p>13.测试：<br>注意！在提交Job时，需要主节点和子节点为相同的用户名，同时保证操作的文件目录也相同。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"sleep 300"</span> | qsub  </div><div class="line">qstat</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.实验系统ubuntu14.04。更新系统软件，防止相关软件版本过低  &lt;/p&gt;
&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; upgrade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.从官网下载Torque，在这里为Torque 5.1.1。  &lt;/p&gt;
&lt;p&gt;3.解压文件&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar -xzvf torque&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.运行configure，可加prefix指定Torque命令安装位置，也可不加，不加参数命令默认装在/usr/local/bin和/usr/local/sbin下。利用configure可以检测依赖软件，按照提示安装这些软件。&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.&lt;span class=&quot;regexp&quot;&gt;/configure --prefix=/u&lt;/span&gt;sr&lt;span class=&quot;regexp&quot;&gt;/local/&lt;/span&gt;torque&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://itanch.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ubuntu" scheme="http://itanch.github.io/tags/ubuntu/"/>
    
      <category term="Torque" scheme="http://itanch.github.io/tags/Torque/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://itanch.github.io/2015/08/01/hello/"/>
    <id>http://itanch.github.io/2015/08/01/hello/</id>
    <published>2015-07-31T23:33:44.000Z</published>
    <updated>2017-02-23T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Tianchi’s Blog今天诞生了！<br><img src="http://7xky03.com1.z0.glb.clouddn.com/helloa.jpg" alt="image">  </p>
<blockquote>
<p>夫君子之行，静以修身，俭以养德。<br>非澹泊无以明志，非宁静无以致远。<br>夫学须静也，才须学也，非学无以广才，非志无以成学。<br>淫慢则不能励精，险躁则不能冶性。<br>年与时驰，意与日去，遂成枯落，多不接世，悲守穷庐，将复何及！  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tianchi’s Blog今天诞生了！&lt;br&gt;&lt;img src=&quot;http://7xky03.com1.z0.glb.clouddn.com/helloa.jpg&quot; alt=&quot;image&quot;&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;夫君子之行，静以修身，俭以养德。&lt;b
    
    </summary>
    
    
      <category term="记录" scheme="http://itanch.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
